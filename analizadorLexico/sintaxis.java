
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 29 20:22:16 CST 2019
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 29 20:22:16 CST 2019
  */
public class sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\150\003\000\002\150\003\000\002\150\004" +
    "\000\002\150\002\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\004\000\002\003\004\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\156\004" +
    "\000\002\156\004\000\002\156\004\000\002\156\005\000" +
    "\002\156\006\000\002\156\004\000\002\156\004\000\002" +
    "\156\004\000\002\157\004\000\002\157\004\000\002\157" +
    "\004\000\002\160\004\000\002\160\004\000\002\160\004" +
    "\000\002\160\004\000\002\160\004\000\002\004\010\000" +
    "\002\004\032\000\002\004\016\000\002\005\003\000\002" +
    "\005\003\000\002\005\002\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\002" +
    "\000\002\010\005\000\002\011\002\000\002\011\006\000" +
    "\002\012\002\000\002\012\006\000\002\013\006\000\002" +
    "\013\011\000\002\013\010\000\002\013\005\000\002\013" +
    "\007\000\002\013\007\000\002\013\011\000\002\013\007" +
    "\000\002\013\011\000\002\013\010\000\002\013\006\000" +
    "\002\013\010\000\002\013\005\000\002\013\007\000\002" +
    "\013\006\000\002\013\006\000\002\013\005\000\002\013" +
    "\006\000\002\014\005\000\002\014\006\000\002\015\007" +
    "\000\002\015\006\000\002\015\012\000\002\015\010\000" +
    "\002\016\002\000\002\016\005\000\002\017\003\000\002" +
    "\017\007\000\002\020\002\000\002\020\003\000\002\021" +
    "\003\000\002\021\012\000\002\021\013\000\002\022\007" +
    "\000\002\022\010\000\002\023\010\000\002\023\005\000" +
    "\002\024\005\000\002\024\007\000\002\046\006\000\002" +
    "\046\007\000\002\045\012\000\002\045\010\000\002\043" +
    "\014\000\002\043\014\000\002\027\003\000\002\027\002" +
    "\000\002\102\004\000\002\026\012\000\002\026\010\000" +
    "\002\025\014\000\002\025\014\000\002\117\003\000\002" +
    "\117\003\000\002\117\003\000\002\117\006\000\002\117" +
    "\010\000\002\116\002\000\002\116\004\000\002\116\006" +
    "\000\002\115\005\000\002\115\010\000\002\115\012\000" +
    "\002\114\003\000\002\114\003\000\002\114\003\000\002" +
    "\047\011\000\002\047\006\000\002\147\002\000\002\147" +
    "\005\000\002\147\006\000\002\147\006\000\002\044\011" +
    "\000\002\030\003\000\002\030\003\000\002\030\002\000" +
    "\002\053\006\000\002\057\003\000\002\057\004\000\002" +
    "\057\005\000\002\056\003\000\002\054\003\000\002\054" +
    "\005\000\002\042\005\000\002\106\004\000\002\106\005" +
    "\000\002\106\005\000\002\106\002\000\002\062\003\000" +
    "\002\062\005\000\002\063\013\000\002\132\005\000\002" +
    "\132\002\000\002\037\004\000\002\041\005\000\002\041" +
    "\007\000\002\060\003\000\002\055\003\000\002\101\003" +
    "\000\002\101\005\000\002\100\004\000\002\135\003\000" +
    "\002\135\005\000\002\134\005\000\002\134\010\000\002" +
    "\134\010\000\002\134\010\000\002\134\012\000\002\134" +
    "\005\000\002\134\003\000\002\134\006\000\002\134\007" +
    "\000\002\134\006\000\002\134\006\000\002\134\010\000" +
    "\002\134\007\000\002\134\007\000\002\134\007\000\002" +
    "\134\010\000\002\134\007\000\002\134\006\000\002\134" +
    "\007\000\002\134\012\000\002\134\006\000\002\134\007" +
    "\000\002\134\010\000\002\134\007\000\002\134\006\000" +
    "\002\035\003\000\002\035\003\000\002\035\004\000\002" +
    "\035\004\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\034\002\000\002\034\004\000\002\034" +
    "\004\000\002\034\003\000\002\034\003\000\002\036\004" +
    "\000\002\036\004\000\002\036\003\000\002\036\010\000" +
    "\002\033\003\000\002\033\004\000\002\033\006\000\002" +
    "\032\003\000\002\032\004\000\002\032\003\000\002\032" +
    "\004\000\002\032\003\000\002\032\003\000\002\032\004" +
    "\000\002\032\004\000\002\032\003\000\002\032\006\000" +
    "\002\032\005\000\002\130\003\000\002\130\005\000\002" +
    "\127\005\000\002\127\005\000\002\122\005\000\002\122" +
    "\005\000\002\126\002\000\002\126\003\000\002\126\003" +
    "\000\002\124\003\000\002\124\005\000\002\123\003\000" +
    "\002\123\004\000\002\123\005\000\002\123\007\000\002" +
    "\123\005\000\002\123\004\000\002\123\006\000\002\123" +
    "\006\000\002\123\006\000\002\123\006\000\002\123\006" +
    "\000\002\061\005\000\002\061\005\000\002\061\003\000" +
    "\002\142\005\000\002\142\005\000\002\142\003\000\002" +
    "\103\003\000\002\103\004\000\002\103\004\000\002\141" +
    "\005\000\002\141\006\000\002\141\003\000\002\141\003" +
    "\000\002\052\003\000\002\052\012\000\002\052\010\000" +
    "\002\052\010\000\002\052\010\000\002\052\006\000\002" +
    "\052\005\000\002\052\007\000\002\052\006\000\002\052" +
    "\010\000\002\145\006\000\002\145\007\000\002\144\006" +
    "\000\002\144\007\000\002\071\002\000\002\071\003\000" +
    "\002\071\003\000\002\131\003\000\002\131\003\000\002" +
    "\120\003\000\002\120\003\000\002\121\003\000\002\154" +
    "\005\000\002\064\006\000\002\067\002\000\002\067\003" +
    "\000\002\067\003\000\002\070\003\000\002\070\005\000" +
    "\002\065\002\000\002\065\004\000\002\065\006\000\002" +
    "\065\005\000\002\066\003\000\002\066\005\000\002\136" +
    "\003\000\002\136\005\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\137\005\000\002\137\006\000" +
    "\002\137\007\000\002\137\011\000\002\137\010\000\002" +
    "\137\012\000\002\140\003\000\002\140\004\000\002\140" +
    "\006\000\002\140\005\000\002\140\007\000\002\113\006" +
    "\000\002\105\011\000\002\105\011\000\002\105\010\000" +
    "\002\105\010\000\002\105\011\000\002\105\010\000\002" +
    "\105\010\000\002\146\002\000\002\146\004\000\002\072" +
    "\002\000\002\072\005\000\002\073\003\000\002\073\005" +
    "\000\002\074\002\000\002\074\004\000\002\110\002\000" +
    "\002\110\005\000\002\112\003\000\002\112\005\000\002" +
    "\111\004\000\002\031\003\000\002\031\005\000\002\155" +
    "\003\000\002\155\005\000\002\104\003\000\002\104\004" +
    "\000\002\040\005\000\002\040\005\000\002\040\006\000" +
    "\002\040\005\000\002\040\006\000\002\040\007\000\002" +
    "\040\010\000\002\040\005\000\002\040\007\000\002\040" +
    "\007\000\002\040\011\000\002\040\007\000\002\040\010" +
    "\000\002\040\011\000\002\040\007\000\002\040\010\000" +
    "\002\125\003\000\002\125\003\000\002\125\003\000\002" +
    "\107\003\000\002\107\003\000\002\107\003\000\002\107" +
    "\003\000\002\107\003\000\002\107\003\000\002\143\003" +
    "\000\002\143\003\000\002\143\005\000\002\143\005\000" +
    "\002\152\003\000\002\152\005\000\002\152\007\000\002" +
    "\076\003\000\002\076\005\000\002\077\003\000\002\077" +
    "\005\000\002\077\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u034c\000\042\003\022\006\020\015\013\034\012\043" +
    "\014\056\025\060\023\067\021\072\010\076\004\131\016" +
    "\216\011\225\006\232\017\251\007\257\024\001\002\000" +
    "\004\u013e\030\001\002\000\010\002\ufffb\346\u034c\u014c\u034a" +
    "\001\002\000\042\005\120\064\115\245\uff14\302\uff14\322" +
    "\uff14\371\uff14\372\uff14\u0122\uff14\u013a\uff14\u013b\uff14\u013c\uff14" +
    "\u013e\uff14\u013f\uff14\u0152\uff14\u0155\uff14\u015c\uff14\001\002\000" +
    "\004\240\u0347\001\002\000\006\246\u01d7\247\u01d6\001\002" +
    "\000\056\002\uffef\006\uffef\015\uffef\034\uffef\043\uffef\056" +
    "\uffef\060\uffef\067\uffef\072\uffef\076\uffef\131\uffef\212\uffef" +
    "\216\uffef\225\uffef\232\uffef\246\u0345\247\u0344\251\uffef\257" +
    "\uffef\346\uffef\u013e\030\u014c\uffef\001\002\000\054\002\uffec" +
    "\006\uffec\015\uffec\034\uffec\043\uffec\056\uffec\060\uffec\067" +
    "\uffec\072\uffec\076\uffec\131\uffec\212\uffec\216\uffec\225\uffec" +
    "\232\uffec\246\u0343\247\u0342\251\uffec\257\uffec\346\uffec\u014c" +
    "\uffec\001\002\000\006\246\u0341\247\u0340\001\002\000\026" +
    "\030\u02e1\053\u02de\114\u02e5\127\uffcd\147\u02e8\200\u02e0\240" +
    "\u02e3\255\u02df\265\u02e4\u0164\u02e2\001\002\000\004\002\u02dd" +
    "\001\002\000\006\133\u02cd\u013e\030\001\002\000\006\u0165" +
    "\u02c4\u0166\u02c3\001\002\000\010\114\u01a3\200\u01a0\240\u01a2" +
    "\001\002\000\014\053\u018d\127\u018c\200\u018b\240\u0190\265" +
    "\u018e\001\002\000\004\002\uffff\001\002\000\006\112\uffc6" +
    "\245\027\001\002\000\006\245\027\u013e\030\001\002\000" +
    "\002\001\002\000\050\002\uffe4\006\uffe4\015\uffe4\034\uffe4" +
    "\043\uffe4\056\uffe4\060\uffe4\067\uffe4\072\uffe4\076\uffe4\131" +
    "\uffe4\212\uffe4\216\uffe4\225\uffe4\232\uffe4\251\uffe4\257\uffe4" +
    "\346\uffe4\u014c\uffe4\001\002\000\004\u0152\u0183\001\002\000" +
    "\306\002\ufe8c\004\ufe8c\006\ufe8c\007\ufe8c\011\ufe8c\012\ufe8c" +
    "\015\ufe8c\016\ufe8c\023\ufe8c\025\ufe8c\034\ufe8c\036\ufe8c\043" +
    "\ufe8c\056\ufe8c\057\ufe8c\060\ufe8c\062\ufe8c\066\ufe8c\067\ufe8c" +
    "\071\ufe8c\072\ufe8c\076\ufe8c\106\ufe8c\107\ufe8c\112\ufe8c\113" +
    "\ufe8c\117\ufe8c\120\ufe8c\122\ufe8c\126\ufe8c\127\ufe8c\130\ufe8c" +
    "\131\ufe8c\133\ufe8c\134\ufe8c\140\ufe8c\141\ufe8c\150\ufe8c\151" +
    "\ufe8c\156\ufe8c\165\ufe8c\166\ufe8c\175\ufe8c\206\ufe8c\212\ufe8c" +
    "\215\ufe8c\216\ufe8c\225\ufe8c\232\ufe8c\243\ufe8c\244\ufe8c\251" +
    "\ufe8c\254\ufe8c\255\ufe8c\257\ufe8c\263\ufe8c\267\ufe8c\270\ufe8c" +
    "\272\ufe8c\303\ufe8c\311\ufe8c\313\ufe8c\323\ufe8c\326\ufe8c\341" +
    "\ufe8c\346\ufe8c\356\ufe8c\357\ufe8c\u0104\ufe8c\u0111\ufe8c\u0124\ufe8c" +
    "\u0125\ufe8c\u0132\ufe8c\u0139\ufe8c\u013a\ufe8c\u013b\ufe8c\u013c\ufe8c\u013d" +
    "\ufe8c\u013e\ufe8c\u0142\ufe8c\u0143\ufe8c\u0144\ufe8c\u0145\ufe8c\u0147\ufe8c" +
    "\u014c\ufe8c\u014d\ufe8c\u014e\ufe8c\u014f\ufe8c\u0150\ufe8c\u0152\ufe8c\u0153" +
    "\ufe8c\u0156\ufe8c\u0158\ufe8c\u015d\ufe8c\u0163\ufe8c\u016a\ufe8c\u016d\ufe8c" +
    "\u0171\ufe8c\001\002\000\004\u013e\030\001\002\000\050\002" +
    "\ufff9\006\ufff9\015\ufff9\034\ufff9\043\ufff9\056\ufff9\060\ufff9" +
    "\067\ufff9\072\ufff9\076\ufff9\131\ufff9\212\ufff9\216\ufff9\225" +
    "\ufff9\232\ufff9\251\ufff9\257\ufff9\346\ufff9\u014c\ufff9\001\002" +
    "\000\004\232\034\001\002\000\004\u013e\030\001\002\000" +
    "\006\112\u0177\u014d\u0176\001\002\000\004\u0139\045\001\002" +
    "\000\056\002\uff1a\006\uff1a\015\uff1a\034\uff1a\043\uff1a\056" +
    "\uff1a\060\uff1a\067\uff1a\072\uff1a\076\uff1a\112\uff1a\131\uff1a" +
    "\212\uff1a\216\uff1a\225\uff1a\232\uff1a\251\uff1a\257\uff1a\270" +
    "\uff1a\346\uff1a\u014c\uff1a\u014d\uff1a\001\002\000\156\002\ufe87" +
    "\006\ufe87\011\ufe87\012\ufe87\015\ufe87\023\ufe87\025\ufe87\034" +
    "\ufe87\036\ufe87\043\ufe87\056\ufe87\057\ufe87\060\ufe87\062\ufe87" +
    "\067\ufe87\072\ufe87\076\ufe87\106\ufe87\107\ufe87\113\ufe87\117" +
    "\ufe87\120\ufe87\122\ufe87\127\ufe87\130\ufe87\131\ufe87\140\ufe87" +
    "\150\ufe87\151\ufe87\156\ufe87\166\ufe87\175\ufe87\206\ufe87\212" +
    "\ufe87\215\ufe87\216\ufe87\225\ufe87\232\ufe87\251\ufe87\254\ufe87" +
    "\255\ufe87\257\ufe87\263\ufe87\270\ufe87\346\ufe87\u0139\ufe87\u013e" +
    "\ufe87\u014c\ufe87\u014d\ufe87\u014e\041\u014f\ufe87\u0152\ufe87\u0153\ufe87" +
    "\u015d\ufe87\001\002\000\004\u013e\030\001\002\000\156\002" +
    "\ufe86\006\ufe86\011\ufe86\012\ufe86\015\ufe86\023\ufe86\025\ufe86" +
    "\034\ufe86\036\ufe86\043\ufe86\056\ufe86\057\ufe86\060\ufe86\062" +
    "\ufe86\067\ufe86\072\ufe86\076\ufe86\106\ufe86\107\ufe86\113\ufe86" +
    "\117\ufe86\120\ufe86\122\ufe86\127\ufe86\130\ufe86\131\ufe86\140" +
    "\ufe86\150\ufe86\151\ufe86\156\ufe86\166\ufe86\175\ufe86\206\ufe86" +
    "\212\ufe86\215\ufe86\216\ufe86\225\ufe86\232\ufe86\251\ufe86\254" +
    "\ufe86\255\ufe86\257\ufe86\263\ufe86\270\ufe86\346\ufe86\u0139\ufe86" +
    "\u013e\ufe86\u014c\ufe86\u014d\ufe86\u014e\043\u014f\ufe86\u0152\ufe86\u0153" +
    "\ufe86\u015d\ufe86\001\002\000\004\u013e\030\001\002\000\154" +
    "\002\ufe85\006\ufe85\011\ufe85\012\ufe85\015\ufe85\023\ufe85\025" +
    "\ufe85\034\ufe85\036\ufe85\043\ufe85\056\ufe85\057\ufe85\060\ufe85" +
    "\062\ufe85\067\ufe85\072\ufe85\076\ufe85\106\ufe85\107\ufe85\113" +
    "\ufe85\117\ufe85\120\ufe85\122\ufe85\127\ufe85\130\ufe85\131\ufe85" +
    "\140\ufe85\150\ufe85\151\ufe85\156\ufe85\166\ufe85\175\ufe85\206" +
    "\ufe85\212\ufe85\215\ufe85\216\ufe85\225\ufe85\232\ufe85\251\ufe85" +
    "\254\ufe85\255\ufe85\257\ufe85\263\ufe85\270\ufe85\346\ufe85\u0139" +
    "\ufe85\u013e\ufe85\u014c\ufe85\u014d\ufe85\u014f\ufe85\u0152\ufe85\u0153\ufe85" +
    "\u015d\ufe85\001\002\000\022\151\056\u013a\060\u013b\065\u013e" +
    "\030\u013f\063\u0152\052\u0155\064\u015c\046\001\002\000\206" +
    "\002\ufee3\006\ufee3\007\ufee3\011\ufee3\012\ufee3\015\ufee3\016" +
    "\ufee3\025\ufee3\034\ufee3\043\ufee3\056\ufee3\060\ufee3\062\ufee3" +
    "\067\ufee3\071\ufee3\072\ufee3\076\ufee3\106\ufee3\107\ufee3\112" +
    "\ufee3\113\ufee3\117\ufee3\120\ufee3\126\ufee3\127\ufee3\130\ufee3" +
    "\131\ufee3\133\ufee3\140\ufee3\141\ufee3\150\ufee3\151\ufee3\156" +
    "\ufee3\165\ufee3\166\ufee3\175\ufee3\206\ufee3\212\ufee3\215\ufee3" +
    "\216\ufee3\225\ufee3\232\ufee3\243\ufee3\251\ufee3\254\ufee3\255" +
    "\ufee3\257\ufee3\267\ufee3\270\ufee3\346\ufee3\u0139\ufee3\u013a\ufee3" +
    "\u013b\ufee3\u013c\ufee3\u013d\ufee3\u013e\ufee3\u0142\ufee3\u0143\ufee3\u0144" +
    "\ufee3\u0145\ufee3\u0147\ufee3\u014c\ufee3\u014d\ufee3\u0153\ufee3\u0156\ufee3" +
    "\u015d\ufee3\001\002\000\206\002\uff02\006\uff02\007\uff02\011" +
    "\uff02\012\uff02\015\uff02\016\uff02\025\uff02\034\uff02\043\uff02" +
    "\056\uff02\060\uff02\062\uff02\067\uff02\071\uff02\072\uff02\076" +
    "\uff02\106\uff02\107\uff02\112\uff02\113\uff02\117\uff02\120\uff02" +
    "\126\uff02\127\uff02\130\uff02\131\uff02\133\uff02\140\uff02\141" +
    "\uff02\150\uff02\151\uff02\156\uff02\165\uff02\166\uff02\175\uff02" +
    "\206\uff02\212\uff02\215\uff02\216\uff02\225\uff02\232\uff02\243" +
    "\uff02\251\uff02\254\uff02\255\uff02\257\uff02\267\uff02\270\uff02" +
    "\346\uff02\u0139\uff02\u013a\uff02\u013b\uff02\u013c\105\u013d\104\u013e" +
    "\uff02\u0142\uff02\u0143\uff02\u0144\uff02\u0145\uff02\u0147\uff02\u014c\uff02" +
    "\u014d\uff02\u0153\uff02\u0156\uff02\u015d\uff02\001\002\000\206\002" +
    "\ufee5\006\ufee5\007\ufee5\011\ufee5\012\ufee5\015\ufee5\016\ufee5" +
    "\025\ufee5\034\ufee5\043\ufee5\056\ufee5\060\ufee5\062\ufee5\067" +
    "\ufee5\071\ufee5\072\ufee5\076\ufee5\106\ufee5\107\ufee5\112\ufee5" +
    "\113\ufee5\117\ufee5\120\ufee5\126\ufee5\127\ufee5\130\ufee5\131" +
    "\ufee5\133\ufee5\140\ufee5\141\ufee5\150\ufee5\151\ufee5\156\ufee5" +
    "\165\ufee5\166\ufee5\175\ufee5\206\ufee5\212\ufee5\215\ufee5\216" +
    "\ufee5\225\ufee5\232\ufee5\243\ufee5\251\ufee5\254\ufee5\255\ufee5" +
    "\257\ufee5\267\ufee5\270\ufee5\346\ufee5\u0139\ufee5\u013a\ufee5\u013b" +
    "\ufee5\u013c\ufee5\u013d\ufee5\u013e\ufee5\u0142\ufee5\u0143\ufee5\u0144\ufee5" +
    "\u0145\ufee5\u0147\ufee5\u014c\ufee5\u014d\ufee5\u0153\ufee5\u0156\ufee5\u015d" +
    "\ufee5\001\002\000\206\002\ufef8\006\ufef8\007\ufef8\011\ufef8" +
    "\012\ufef8\015\ufef8\016\ufef8\025\ufef8\034\ufef8\043\ufef8\056" +
    "\ufef8\060\ufef8\062\ufef8\067\ufef8\071\ufef8\072\ufef8\076\ufef8" +
    "\106\ufef8\107\ufef8\112\ufef8\113\ufef8\117\ufef8\120\ufef8\126" +
    "\ufef8\127\ufef8\130\ufef8\131\ufef8\133\ufef8\140\ufef8\141\ufef8" +
    "\150\ufef8\151\ufef8\156\ufef8\165\ufef8\166\ufef8\175\ufef8\206" +
    "\ufef8\212\ufef8\215\ufef8\216\ufef8\225\ufef8\232\ufef8\243\ufef8" +
    "\251\ufef8\254\ufef8\255\ufef8\257\ufef8\267\ufef8\270\ufef8\346" +
    "\ufef8\u0139\ufef8\u013a\ufef8\u013b\ufef8\u013c\ufef8\u013d\ufef8\u013e\ufef8" +
    "\u0142\ufef8\u0143\ufef8\u0144\ufef8\u0145\ufef8\u0147\ufef8\u014c\ufef8\u014d" +
    "\ufef8\u0153\ufef8\u0156\ufef8\u015d\ufef8\001\002\000\022\225\114" +
    "\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c" +
    "\046\001\002\000\206\002\ufee2\006\ufee2\007\ufee2\011\ufee2" +
    "\012\ufee2\015\ufee2\016\ufee2\025\ufee2\034\ufee2\043\ufee2\056" +
    "\ufee2\060\ufee2\062\ufee2\067\ufee2\071\ufee2\072\ufee2\076\ufee2" +
    "\106\ufee2\107\ufee2\112\ufee2\113\ufee2\117\ufee2\120\ufee2\126" +
    "\ufee2\127\ufee2\130\ufee2\131\ufee2\133\ufee2\140\ufee2\141\ufee2" +
    "\150\ufee2\151\ufee2\156\ufee2\165\ufee2\166\ufee2\175\ufee2\206" +
    "\ufee2\212\ufee2\215\ufee2\216\ufee2\225\ufee2\232\ufee2\243\ufee2" +
    "\251\ufee2\254\ufee2\255\ufee2\257\ufee2\267\ufee2\270\ufee2\346" +
    "\ufee2\u0139\ufee2\u013a\ufee2\u013b\ufee2\u013c\ufee2\u013d\ufee2\u013e\ufee2" +
    "\u0142\ufee2\u0143\ufee2\u0144\ufee2\u0145\ufee2\u0147\ufee2\u014c\ufee2\u014d" +
    "\ufee2\u0153\ufee2\u0156\ufee2\u015d\ufee2\001\002\000\206\002\ufefe" +
    "\006\ufefe\007\ufefe\011\ufefe\012\ufefe\015\ufefe\016\ufefe\025" +
    "\ufefe\034\ufefe\043\ufefe\056\ufefe\060\ufefe\062\ufefe\067\ufefe" +
    "\071\ufefe\072\ufefe\076\ufefe\106\ufefe\107\ufefe\112\ufefe\113" +
    "\ufefe\117\ufefe\120\ufefe\126\ufefe\127\ufefe\130\ufefe\131\ufefe" +
    "\133\ufefe\140\ufefe\141\ufefe\150\ufefe\151\ufefe\156\ufefe\165" +
    "\ufefe\166\ufefe\175\ufefe\206\ufefe\212\ufefe\215\ufefe\216\ufefe" +
    "\225\ufefe\232\ufefe\243\ufefe\251\ufefe\254\ufefe\255\ufefe\257" +
    "\ufefe\267\ufefe\270\ufefe\346\ufefe\u0139\ufefe\u013a\ufefe\u013b\ufefe" +
    "\u013c\ufefe\u013d\ufefe\u013e\ufefe\u0142\ufefe\u0143\ufefe\u0144\ufefe\u0145" +
    "\ufefe\u0147\ufefe\u014c\ufefe\u014d\ufefe\u0153\ufefe\u0156\ufefe\u015d\ufefe" +
    "\001\002\000\206\002\ufeff\006\ufeff\007\ufeff\011\ufeff\012" +
    "\ufeff\015\ufeff\016\ufeff\025\ufeff\034\ufeff\043\ufeff\056\ufeff" +
    "\060\ufeff\062\ufeff\067\ufeff\071\ufeff\072\ufeff\076\ufeff\106" +
    "\ufeff\107\ufeff\112\ufeff\113\ufeff\117\ufeff\120\ufeff\126\ufeff" +
    "\127\ufeff\130\ufeff\131\ufeff\133\ufeff\140\ufeff\141\ufeff\150" +
    "\ufeff\151\ufeff\156\ufeff\165\ufeff\166\ufeff\175\ufeff\206\ufeff" +
    "\212\ufeff\215\ufeff\216\ufeff\225\ufeff\232\ufeff\243\ufeff\251" +
    "\ufeff\254\ufeff\255\ufeff\257\ufeff\267\ufeff\270\ufeff\346\ufeff" +
    "\u0139\ufeff\u013a\ufeff\u013b\ufeff\u013c\ufeff\u013d\ufeff\u013e\ufeff\u0142" +
    "\ufeff\u0143\ufeff\u0144\ufeff\u0145\ufeff\u0147\ufeff\u014c\ufeff\u014d\ufeff" +
    "\u0153\ufeff\u0156\ufeff\u015d\ufeff\001\002\000\056\002\uff18\006" +
    "\uff18\015\uff18\034\uff18\043\uff18\056\uff18\060\uff18\067\uff18" +
    "\072\uff18\076\uff18\112\uff18\131\uff18\212\uff18\216\uff18\225" +
    "\uff18\232\uff18\251\uff18\257\uff18\270\uff18\346\uff18\u014c\uff18" +
    "\u014d\uff18\001\002\000\062\002\uff17\006\uff17\015\uff17\034" +
    "\uff17\043\uff17\056\uff17\060\uff17\067\uff17\072\uff17\076\uff17" +
    "\112\uff17\131\uff17\212\uff17\216\uff17\225\uff17\232\uff17\251" +
    "\uff17\257\uff17\270\uff17\346\uff17\u013a\102\u013b\101\u014c\uff17" +
    "\u014d\uff17\001\002\000\014\u013e\030\u013f\063\u0152\052\u0155" +
    "\064\u015c\046\001\002\000\206\002\ufef9\006\ufef9\007\ufef9" +
    "\011\ufef9\012\ufef9\015\ufef9\016\ufef9\025\ufef9\034\ufef9\043" +
    "\ufef9\056\ufef9\060\ufef9\062\ufef9\067\ufef9\071\ufef9\072\ufef9" +
    "\076\ufef9\106\ufef9\107\ufef9\112\ufef9\113\ufef9\117\ufef9\120" +
    "\ufef9\126\ufef9\127\ufef9\130\ufef9\131\ufef9\133\ufef9\140\ufef9" +
    "\141\ufef9\150\ufef9\151\ufef9\156\ufef9\165\ufef9\166\ufef9\175" +
    "\ufef9\206\ufef9\212\ufef9\215\ufef9\216\ufef9\225\ufef9\232\ufef9" +
    "\243\ufef9\251\ufef9\254\ufef9\255\ufef9\257\ufef9\267\ufef9\270" +
    "\ufef9\346\ufef9\u0139\ufef9\u013a\ufef9\u013b\ufef9\u013c\ufef9\u013d\ufef9" +
    "\u013e\ufef9\u0142\ufef9\u0143\ufef9\u0144\ufef9\u0145\ufef9\u0147\ufef9\u014c" +
    "\ufef9\u014d\ufef9\u0153\ufef9\u0156\ufef9\u015d\ufef9\001\002\000\206" +
    "\002\ufee6\006\ufee6\007\ufee6\011\ufee6\012\ufee6\015\ufee6\016" +
    "\ufee6\025\ufee6\034\ufee6\043\ufee6\056\ufee6\060\ufee6\062\ufee6" +
    "\067\ufee6\071\ufee6\072\ufee6\076\ufee6\106\ufee6\107\ufee6\112" +
    "\ufee6\113\ufee6\117\ufee6\120\ufee6\126\ufee6\127\ufee6\130\ufee6" +
    "\131\ufee6\133\ufee6\140\ufee6\141\ufee6\150\ufee6\151\ufee6\156" +
    "\ufee6\165\ufee6\166\ufee6\175\ufee6\206\ufee6\212\ufee6\215\ufee6" +
    "\216\ufee6\225\ufee6\232\ufee6\243\ufee6\251\ufee6\254\ufee6\255" +
    "\ufee6\257\ufee6\267\ufee6\270\ufee6\346\ufee6\u0139\ufee6\u013a\ufee6" +
    "\u013b\ufee6\u013c\ufee6\u013d\ufee6\u013e\ufee6\u0142\ufee6\u0143\ufee6\u0144" +
    "\ufee6\u0145\ufee6\u0147\ufee6\u014c\ufee6\u014d\ufee6\u0153\ufee6\u0156\ufee6" +
    "\u015d\ufee6\001\002\000\206\002\ufee4\006\ufee4\007\ufee4\011" +
    "\ufee4\012\ufee4\015\ufee4\016\ufee4\025\ufee4\034\ufee4\043\ufee4" +
    "\056\ufee4\060\ufee4\062\ufee4\067\ufee4\071\ufee4\072\ufee4\076" +
    "\ufee4\106\ufee4\107\ufee4\112\ufee4\113\ufee4\117\ufee4\120\ufee4" +
    "\126\ufee4\127\ufee4\130\ufee4\131\ufee4\133\ufee4\140\ufee4\141" +
    "\ufee4\150\ufee4\151\ufee4\156\ufee4\165\ufee4\166\ufee4\175\ufee4" +
    "\206\ufee4\212\ufee4\215\ufee4\216\ufee4\225\ufee4\232\ufee4\243" +
    "\ufee4\251\ufee4\254\ufee4\255\ufee4\257\ufee4\267\ufee4\270\ufee4" +
    "\346\ufee4\u0139\ufee4\u013a\ufee4\u013b\ufee4\u013c\ufee4\u013d\ufee4\u013e" +
    "\ufee4\u0142\ufee4\u0143\ufee4\u0144\ufee4\u0145\ufee4\u0147\ufee4\u014c\ufee4" +
    "\u014d\ufee4\u0153\ufee4\u0156\ufee4\u015d\ufee4\001\002\000\004\u013e" +
    "\030\001\002\000\014\u013e\030\u013f\063\u0152\052\u0155\064" +
    "\u015c\046\001\002\000\206\002\ufefc\006\ufefc\007\ufefc\011" +
    "\ufefc\012\ufefc\015\ufefc\016\ufefc\025\ufefc\034\ufefc\043\ufefc" +
    "\056\ufefc\060\ufefc\062\ufefc\067\ufefc\071\ufefc\072\ufefc\076" +
    "\ufefc\106\ufefc\107\ufefc\112\ufefc\113\ufefc\117\ufefc\120\ufefc" +
    "\126\ufefc\127\ufefc\130\ufefc\131\ufefc\133\ufefc\140\ufefc\141" +
    "\ufefc\150\ufefc\151\ufefc\156\ufefc\165\ufefc\166\ufefc\175\ufefc" +
    "\206\ufefc\212\ufefc\215\ufefc\216\ufefc\225\ufefc\232\ufefc\243" +
    "\ufefc\251\ufefc\254\ufefc\255\ufefc\257\ufefc\267\ufefc\270\ufefc" +
    "\346\ufefc\u0139\ufefc\u013a\ufefc\u013b\ufefc\u013c\ufefc\u013d\ufefc\u013e" +
    "\ufefc\u0142\ufefc\u0143\ufefc\u0144\ufefc\u0145\ufefc\u0147\ufefc\u014c\ufefc" +
    "\u014d\ufefc\u0153\ufefc\u0156\ufefc\u015d\ufefc\001\002\000\004\u0156" +
    "\111\001\002\000\004\u0152\071\001\002\000\024\u013a\060" +
    "\u013b\065\u013c\074\u013e\030\u013f\063\u0152\052\u0153\ufedf\u0155" +
    "\064\u015c\046\001\002\000\012\u013a\102\u013b\101\u014d\ufedc" +
    "\u0153\ufedc\001\002\000\006\u014d\077\u0153\ufedd\001\002\000" +
    "\004\u0153\ufede\001\002\000\004\u0153\076\001\002\000\004" +
    "\u0156\ufee0\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f" +
    "\063\u0152\052\u0155\064\u015c\046\001\002\000\012\u013a\102" +
    "\u013b\101\u014d\ufedb\u0153\ufedb\001\002\000\020\u013a\060\u013b" +
    "\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001\002" +
    "\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155" +
    "\064\u015c\046\001\002\000\206\002\uff04\006\uff04\007\uff04" +
    "\011\uff04\012\uff04\015\uff04\016\uff04\025\uff04\034\uff04\043" +
    "\uff04\056\uff04\060\uff04\062\uff04\067\uff04\071\uff04\072\uff04" +
    "\076\uff04\106\uff04\107\uff04\112\uff04\113\uff04\117\uff04\120" +
    "\uff04\126\uff04\127\uff04\130\uff04\131\uff04\133\uff04\140\uff04" +
    "\141\uff04\150\uff04\151\uff04\156\uff04\165\uff04\166\uff04\175" +
    "\uff04\206\uff04\212\uff04\215\uff04\216\uff04\225\uff04\232\uff04" +
    "\243\uff04\251\uff04\254\uff04\255\uff04\257\uff04\267\uff04\270" +
    "\uff04\346\uff04\u0139\uff04\u013a\uff04\u013b\uff04\u013c\105\u013d\104" +
    "\u013e\uff04\u0142\uff04\u0143\uff04\u0144\uff04\u0145\uff04\u0147\uff04\u014c" +
    "\uff04\u014d\uff04\u0153\uff04\u0156\uff04\u015d\uff04\001\002\000\020" +
    "\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c" +
    "\046\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f\063" +
    "\u0152\052\u0155\064\u015c\046\001\002\000\206\002\uff01\006" +
    "\uff01\007\uff01\011\uff01\012\uff01\015\uff01\016\uff01\025\uff01" +
    "\034\uff01\043\uff01\056\uff01\060\uff01\062\uff01\067\uff01\071" +
    "\uff01\072\uff01\076\uff01\106\uff01\107\uff01\112\uff01\113\uff01" +
    "\117\uff01\120\uff01\126\uff01\127\uff01\130\uff01\131\uff01\133" +
    "\uff01\140\uff01\141\uff01\150\uff01\151\uff01\156\uff01\165\uff01" +
    "\166\uff01\175\uff01\206\uff01\212\uff01\215\uff01\216\uff01\225" +
    "\uff01\232\uff01\243\uff01\251\uff01\254\uff01\255\uff01\257\uff01" +
    "\267\uff01\270\uff01\346\uff01\u0139\uff01\u013a\uff01\u013b\uff01\u013c" +
    "\uff01\u013d\uff01\u013e\uff01\u0142\uff01\u0143\uff01\u0144\uff01\u0145\uff01" +
    "\u0147\uff01\u014c\uff01\u014d\uff01\u0153\uff01\u0156\uff01\u015d\uff01\001" +
    "\002\000\206\002\uff00\006\uff00\007\uff00\011\uff00\012\uff00" +
    "\015\uff00\016\uff00\025\uff00\034\uff00\043\uff00\056\uff00\060" +
    "\uff00\062\uff00\067\uff00\071\uff00\072\uff00\076\uff00\106\uff00" +
    "\107\uff00\112\uff00\113\uff00\117\uff00\120\uff00\126\uff00\127" +
    "\uff00\130\uff00\131\uff00\133\uff00\140\uff00\141\uff00\150\uff00" +
    "\151\uff00\156\uff00\165\uff00\166\uff00\175\uff00\206\uff00\212" +
    "\uff00\215\uff00\216\uff00\225\uff00\232\uff00\243\uff00\251\uff00" +
    "\254\uff00\255\uff00\257\uff00\267\uff00\270\uff00\346\uff00\u0139" +
    "\uff00\u013a\uff00\u013b\uff00\u013c\uff00\u013d\uff00\u013e\uff00\u0142\uff00" +
    "\u0143\uff00\u0144\uff00\u0145\uff00\u0147\uff00\u014c\uff00\u014d\uff00\u0153" +
    "\uff00\u0156\uff00\u015d\uff00\001\002\000\206\002\uff03\006\uff03" +
    "\007\uff03\011\uff03\012\uff03\015\uff03\016\uff03\025\uff03\034" +
    "\uff03\043\uff03\056\uff03\060\uff03\062\uff03\067\uff03\071\uff03" +
    "\072\uff03\076\uff03\106\uff03\107\uff03\112\uff03\113\uff03\117" +
    "\uff03\120\uff03\126\uff03\127\uff03\130\uff03\131\uff03\133\uff03" +
    "\140\uff03\141\uff03\150\uff03\151\uff03\156\uff03\165\uff03\166" +
    "\uff03\175\uff03\206\uff03\212\uff03\215\uff03\216\uff03\225\uff03" +
    "\232\uff03\243\uff03\251\uff03\254\uff03\255\uff03\257\uff03\267" +
    "\uff03\270\uff03\346\uff03\u0139\uff03\u013a\uff03\u013b\uff03\u013c\105" +
    "\u013d\104\u013e\uff03\u0142\uff03\u0143\uff03\u0144\uff03\u0145\uff03\u0147" +
    "\uff03\u014c\uff03\u014d\uff03\u0153\uff03\u0156\uff03\u015d\uff03\001\002" +
    "\000\206\002\ufee1\006\ufee1\007\ufee1\011\ufee1\012\ufee1\015" +
    "\ufee1\016\ufee1\025\ufee1\034\ufee1\043\ufee1\056\ufee1\060\ufee1" +
    "\062\ufee1\067\ufee1\071\ufee1\072\ufee1\076\ufee1\106\ufee1\107" +
    "\ufee1\112\ufee1\113\ufee1\117\ufee1\120\ufee1\126\ufee1\127\ufee1" +
    "\130\ufee1\131\ufee1\133\ufee1\140\ufee1\141\ufee1\150\ufee1\151" +
    "\ufee1\156\ufee1\165\ufee1\166\ufee1\175\ufee1\206\ufee1\212\ufee1" +
    "\215\ufee1\216\ufee1\225\ufee1\232\ufee1\243\ufee1\251\ufee1\254" +
    "\ufee1\255\ufee1\257\ufee1\267\ufee1\270\ufee1\346\ufee1\u0139\ufee1" +
    "\u013a\ufee1\u013b\ufee1\u013c\ufee1\u013d\ufee1\u013e\ufee1\u0142\ufee1\u0143" +
    "\ufee1\u0144\ufee1\u0145\ufee1\u0147\ufee1\u014c\ufee1\u014d\ufee1\u0153\ufee1" +
    "\u0156\ufee1\u015d\ufee1\001\002\000\206\002\ufefd\006\ufefd\007" +
    "\ufefd\011\ufefd\012\ufefd\015\ufefd\016\ufefd\025\ufefd\034\ufefd" +
    "\043\ufefd\056\ufefd\060\ufefd\062\ufefd\067\ufefd\071\ufefd\072" +
    "\ufefd\076\ufefd\106\ufefd\107\ufefd\112\ufefd\113\ufefd\117\ufefd" +
    "\120\ufefd\126\ufefd\127\ufefd\130\ufefd\131\ufefd\133\ufefd\140" +
    "\ufefd\141\ufefd\150\ufefd\151\ufefd\156\ufefd\165\ufefd\166\ufefd" +
    "\175\ufefd\206\ufefd\212\ufefd\215\ufefd\216\ufefd\225\ufefd\232" +
    "\ufefd\243\ufefd\251\ufefd\254\ufefd\255\ufefd\257\ufefd\267\ufefd" +
    "\270\ufefd\346\ufefd\u0139\ufefd\u013a\ufefd\u013b\ufefd\u013c\ufefd\u013d" +
    "\ufefd\u013e\ufefd\u0142\ufefd\u0143\ufefd\u0144\ufefd\u0145\ufefd\u0147\ufefd" +
    "\u014c\ufefd\u014d\ufefd\u0153\ufefd\u0156\ufefd\u015d\ufefd\001\002\000" +
    "\010\u013a\102\u013b\101\u0153\326\001\002\000\042\005\120" +
    "\064\115\245\uff14\302\uff14\322\uff14\371\uff14\372\uff14\u0122" +
    "\uff14\u013a\uff14\u013b\uff14\u013c\uff14\u013e\uff14\u013f\uff14\u0152\uff14" +
    "\u0155\uff14\u015c\uff14\001\002\000\036\245\uff12\302\uff12\322" +
    "\uff12\371\uff12\372\uff12\u0122\uff12\u013a\uff12\u013b\uff12\u013c\uff12" +
    "\u013e\uff12\u013f\uff12\u0152\uff12\u0155\uff12\u015c\uff12\001\002\000" +
    "\054\002\uffa8\006\uffa8\015\uffa8\034\uffa8\043\uffa8\056\uffa8" +
    "\060\uffa8\067\uffa8\072\uffa8\076\uffa8\131\uffa8\212\uffa8\216" +
    "\uffa8\225\uffa8\232\uffa8\251\uffa8\254\u0171\257\uffa8\346\uffa8" +
    "\u014c\uffa8\u0153\uffa8\001\002\000\004\u0153\u0170\001\002\000" +
    "\036\245\uff13\302\uff13\322\uff13\371\uff13\372\uff13\u0122\uff13" +
    "\u013a\uff13\u013b\uff13\u013c\uff13\u013e\uff13\u013f\uff13\u0152\uff13\u0155" +
    "\uff13\u015c\uff13\001\002\000\036\245\027\302\uffc6\322\uffc6" +
    "\371\uffc6\372\uffc6\u0122\uffc6\u013a\uffc6\u013b\uffc6\u013c\uffc6\u013e" +
    "\uffc6\u013f\uffc6\u0152\uffc6\u0155\uffc6\u015c\uffc6\001\002\000\060" +
    "\002\uffa4\006\uffa4\015\uffa4\034\uffa4\043\uffa4\056\uffa4\060" +
    "\uffa4\067\uffa4\072\uffa4\076\uffa4\112\123\131\uffa4\133\124" +
    "\212\uffa4\216\uffa4\225\uffa4\232\uffa4\251\uffa4\254\uffa4\257" +
    "\uffa4\346\uffa4\u014c\uffa4\u0153\uffa4\001\002\000\010\u013e\030" +
    "\u0152\132\u0155\136\001\002\000\004\u013e\030\001\002\000" +
    "\006\112\130\u014d\127\001\002\000\066\002\ufe89\004\ufe89" +
    "\006\ufe89\015\ufe89\034\ufe89\043\ufe89\056\ufe89\060\ufe89\067" +
    "\ufe89\072\ufe89\076\ufe89\112\ufe89\131\ufe89\212\ufe89\216\ufe89" +
    "\225\ufe89\232\ufe89\251\ufe89\257\ufe89\272\ufe89\346\ufe89\u014c" +
    "\ufe89\u014d\ufe89\u0152\ufe89\u0153\ufe89\u016a\ufe89\001\002\000\004" +
    "\u013e\030\001\002\000\010\u013e\030\u0152\132\u0155\136\001" +
    "\002\000\110\002\ufec9\006\ufec9\011\u0134\015\ufec9\034\ufec9" +
    "\043\ufec9\056\ufec9\060\ufec9\067\ufec9\072\ufec9\076\ufec9\106" +
    "\ufec9\113\ufec9\117\ufec9\120\ufec9\130\ufec9\131\ufec9\140\ufec9" +
    "\156\ufec9\166\ufec9\212\ufec9\215\ufec9\216\ufec9\225\ufec9\232" +
    "\ufec9\251\ufec9\254\ufec9\257\ufec9\270\ufec9\346\ufec9\u013e\030" +
    "\u014c\ufec9\u014d\ufec9\u014f\u0135\u0153\ufec9\001\002\000\012\225" +
    "\u0126\u013e\030\u0152\132\u0155\136\001\002\000\100\002\ufed4" +
    "\006\ufed4\015\ufed4\034\ufed4\043\ufed4\056\ufed4\060\ufed4\067" +
    "\ufed4\072\ufed4\076\ufed4\106\ufed4\113\150\117\ufed4\120\ufed4" +
    "\130\146\131\ufed4\140\145\166\ufed4\212\ufed4\215\147\216" +
    "\ufed4\225\ufed4\232\ufed4\251\ufed4\254\ufed4\257\ufed4\270\ufed4" +
    "\346\ufed4\u014c\ufed4\u014d\ufed4\u0153\ufed4\001\002\000\102\002" +
    "\ufed0\006\ufed0\015\ufed0\034\ufed0\043\ufed0\056\ufed0\060\ufed0" +
    "\067\ufed0\072\ufed0\076\ufed0\106\ufed0\113\ufed0\117\ufed0\120" +
    "\ufed0\130\ufed0\131\ufed0\140\ufed0\156\ufed0\166\ufed0\212\ufed0" +
    "\215\ufed0\216\ufed0\225\ufed0\232\ufed0\251\ufed0\254\ufed0\257" +
    "\ufed0\270\ufed0\346\ufed0\u014c\ufed0\u014d\ufed0\u0153\ufed0\001\002" +
    "\000\102\002\ufed2\006\ufed2\015\ufed2\034\ufed2\043\ufed2\056" +
    "\ufed2\060\ufed2\067\ufed2\072\ufed2\076\ufed2\106\ufed2\113\ufed2" +
    "\117\ufed2\120\ufed2\130\ufed2\131\ufed2\140\ufed2\156\ufed2\166" +
    "\ufed2\212\ufed2\215\ufed2\216\ufed2\225\ufed2\232\ufed2\251\ufed2" +
    "\254\ufed2\257\ufed2\270\ufed2\346\ufed2\u014c\ufed2\u014d\ufed2\u0153" +
    "\ufed2\001\002\000\004\u0173\u0122\001\002\000\102\002\ufed1" +
    "\006\ufed1\015\ufed1\034\ufed1\043\ufed1\056\ufed1\060\ufed1\067" +
    "\ufed1\072\ufed1\076\ufed1\106\ufed1\113\ufed1\117\ufed1\120\ufed1" +
    "\130\ufed1\131\ufed1\140\ufed1\156\ufed1\166\ufed1\212\ufed1\215" +
    "\ufed1\216\ufed1\225\ufed1\232\ufed1\251\ufed1\254\ufed1\257\ufed1" +
    "\270\ufed1\346\ufed1\u014c\ufed1\u014d\ufed1\u0153\ufed1\001\002\000" +
    "\066\002\ufebc\006\ufebc\015\ufebc\034\ufebc\043\ufebc\056\ufebc" +
    "\060\ufebc\067\ufebc\072\ufebc\076\ufebc\117\ufebc\120\ufebc\131" +
    "\ufebc\166\ufebc\212\ufebc\216\ufebc\225\ufebc\232\ufebc\251\ufebc" +
    "\254\ufebc\257\ufebc\270\142\346\ufebc\u014c\ufebc\u014d\143\u0153" +
    "\ufebc\001\002\000\062\002\ufeba\006\ufeba\015\ufeba\034\ufeba" +
    "\043\ufeba\056\ufeba\060\ufeba\067\ufeba\072\ufeba\076\ufeba\117" +
    "\u010e\120\ufeba\131\ufeba\166\ufeba\212\ufeba\216\ufeba\225\ufeba" +
    "\232\ufeba\251\ufeba\254\ufeba\257\ufeba\346\ufeba\u014c\ufeba\u0153" +
    "\ufeba\001\002\000\040\024\167\031\157\042\175\100\170" +
    "\150\162\152\165\307\163\u013a\060\u013b\065\u013e\030\u013f" +
    "\063\u0152\161\u0155\064\u015c\046\u0172\171\001\002\000\010" +
    "\u013e\030\u0152\132\u0155\136\001\002\000\100\002\ufed3\006" +
    "\ufed3\015\ufed3\034\ufed3\043\ufed3\056\ufed3\060\ufed3\067\ufed3" +
    "\072\ufed3\076\ufed3\106\ufed3\113\150\117\ufed3\120\ufed3\130" +
    "\146\131\ufed3\140\145\166\ufed3\212\ufed3\215\147\216\ufed3" +
    "\225\ufed3\232\ufed3\251\ufed3\254\ufed3\257\ufed3\270\ufed3\346" +
    "\ufed3\u014c\ufed3\u014d\ufed3\u0153\ufed3\001\002\000\006\135\u0103" +
    "\167\u0104\001\002\000\004\135\377\001\002\000\006\135" +
    "\366\167\367\001\002\000\006\135\151\167\152\001\002" +
    "\000\010\u013e\030\u0152\132\u0155\136\001\002\000\004\135" +
    "\153\001\002\000\010\u013e\030\u0152\132\u0155\136\001\002" +
    "\000\014\113\150\130\146\140\145\156\155\215\147\001" +
    "\002\000\040\024\167\031\157\042\175\100\170\150\162" +
    "\152\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152" +
    "\161\u0155\064\u015c\046\u0172\171\001\002\000\004\134\357" +
    "\001\002\000\004\u0152\354\001\002\000\112\002\ufead\006" +
    "\ufead\007\352\015\ufead\034\ufead\043\ufead\056\ufead\060\ufead" +
    "\067\ufead\072\ufead\076\ufead\106\ufead\113\ufead\117\ufead\120" +
    "\ufead\130\ufead\131\ufead\140\ufead\156\ufead\165\ufead\166\ufead" +
    "\212\ufead\215\ufead\216\ufead\225\ufead\232\ufead\243\ufead\251" +
    "\ufead\254\ufead\257\ufead\270\ufead\346\ufead\u014c\ufead\u014d\ufead" +
    "\u0153\ufead\u0156\ufead\001\002\000\042\024\167\031\157\042" +
    "\175\100\170\150\162\152\165\225\114\307\163\u013a\060" +
    "\u013b\065\u013e\030\u013f\063\u0152\161\u0155\064\u015c\046\u0172" +
    "\171\001\002\000\036\024\167\031\157\042\175\100\170" +
    "\152\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152" +
    "\161\u0155\064\u015c\046\u0172\171\001\002\000\004\u0152\335" +
    "\001\002\000\032\016\265\126\261\141\272\150\271\u0139" +
    "\270\u013a\102\u013b\101\u0142\262\u0143\266\u0144\263\u0145\267" +
    "\u0147\260\001\002\000\004\u0152\253\001\002\000\042\016" +
    "\ufee5\126\ufee5\134\ufef7\141\ufee5\150\ufee5\u0139\ufee5\u013a\ufee5" +
    "\u013b\ufee5\u013c\ufee5\u013d\ufee5\u0142\ufee5\u0143\ufee5\u0144\ufee5\u0145" +
    "\ufee5\u0147\ufee5\u0153\ufee5\001\002\000\022\267\222\u013a\060" +
    "\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001" +
    "\002\000\004\u0152\214\001\002\000\004\u0152\205\001\002" +
    "\000\104\002\ufebf\006\ufebf\015\ufebf\034\ufebf\043\ufebf\056" +
    "\ufebf\060\ufebf\067\ufebf\072\ufebf\076\ufebf\106\ufebf\113\ufebf" +
    "\117\ufebf\120\ufebf\130\ufebf\131\ufebf\140\ufebf\156\ufebf\166" +
    "\ufebf\212\ufebf\215\ufebf\216\ufebf\225\ufebf\232\ufebf\251\ufebf" +
    "\254\ufebf\257\ufebf\270\ufebf\346\ufebf\u014c\ufebf\u014d\ufebf\u0153" +
    "\ufebf\u0156\ufebf\001\002\000\110\002\ufeaf\006\ufeaf\015\ufeaf" +
    "\034\ufeaf\043\ufeaf\056\ufeaf\060\ufeaf\067\ufeaf\072\ufeaf\076" +
    "\ufeaf\106\ufeaf\113\ufeaf\117\ufeaf\120\ufeaf\130\ufeaf\131\ufeaf" +
    "\140\ufeaf\156\ufeaf\165\203\166\ufeaf\212\ufeaf\215\ufeaf\216" +
    "\ufeaf\225\ufeaf\232\ufeaf\243\ufeaf\251\ufeaf\254\ufeaf\257\ufeaf" +
    "\270\ufeaf\346\ufeaf\u014c\ufeaf\u014d\ufeaf\u0153\ufeaf\u0156\ufeaf\001" +
    "\002\000\112\002\ufeab\006\ufeab\007\ufeab\015\ufeab\034\ufeab" +
    "\043\ufeab\056\ufeab\060\ufeab\067\ufeab\072\ufeab\076\ufeab\106" +
    "\ufeab\113\ufeab\117\ufeab\120\ufeab\130\ufeab\131\ufeab\140\ufeab" +
    "\156\ufeab\165\ufeab\166\ufeab\212\ufeab\215\ufeab\216\ufeab\225" +
    "\ufeab\232\ufeab\243\ufeab\251\ufeab\254\ufeab\257\ufeab\270\ufeab" +
    "\346\ufeab\u014c\ufeab\u014d\ufeab\u0153\ufeab\u0156\ufeab\001\002\000" +
    "\004\u0152\176\001\002\000\020\u013a\060\u013b\065\u013e\030" +
    "\u013f\063\u0152\052\u0155\064\u015c\046\001\002\000\010\u013a" +
    "\102\u013b\101\u014d\200\001\002\000\004\u013e\030\001\002" +
    "\000\004\u0153\202\001\002\000\004\134\ufef4\001\002\000" +
    "\040\024\167\031\157\042\175\100\170\150\162\152\165" +
    "\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152\161\u0155" +
    "\064\u015c\046\u0172\171\001\002\000\106\002\ufeae\006\ufeae" +
    "\015\ufeae\034\ufeae\043\ufeae\056\ufeae\060\ufeae\067\ufeae\072" +
    "\ufeae\076\ufeae\106\ufeae\113\ufeae\117\ufeae\120\ufeae\130\ufeae" +
    "\131\ufeae\140\ufeae\156\ufeae\166\ufeae\212\ufeae\215\ufeae\216" +
    "\ufeae\225\ufeae\232\ufeae\243\ufeae\251\ufeae\254\ufeae\257\ufeae" +
    "\270\ufeae\346\ufeae\u014c\ufeae\u014d\ufeae\u0153\ufeae\u0156\ufeae\001" +
    "\002\000\040\024\167\031\157\042\175\100\170\150\162" +
    "\152\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152" +
    "\161\u0155\064\u015c\046\u0172\171\001\002\000\004\u014d\207" +
    "\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152" +
    "\052\u0155\064\u015c\046\001\002\000\010\u013a\102\u013b\101" +
    "\u014d\211\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f" +
    "\063\u0152\052\u0155\064\u015c\046\001\002\000\010\u013a\102" +
    "\u013b\101\u0153\213\001\002\000\004\134\ufef6\001\002\000" +
    "\004\225\215\001\002\000\042\005\120\064\115\245\uff14" +
    "\302\uff14\322\uff14\371\uff14\372\uff14\u0122\uff14\u013a\uff14\u013b" +
    "\uff14\u013c\uff14\u013e\uff14\u013f\uff14\u0152\uff14\u0155\uff14\u015c\uff14" +
    "\001\002\000\004\u0153\217\001\002\000\112\002\ufe9e\006" +
    "\ufe9e\007\ufe9e\015\ufe9e\034\ufe9e\043\ufe9e\056\ufe9e\060\ufe9e" +
    "\067\ufe9e\072\ufe9e\076\ufe9e\106\ufe9e\113\ufe9e\117\ufe9e\120" +
    "\ufe9e\130\ufe9e\131\ufe9e\140\ufe9e\156\ufe9e\165\ufe9e\166\ufe9e" +
    "\212\ufe9e\215\ufe9e\216\ufe9e\225\ufe9e\232\ufe9e\243\ufe9e\251" +
    "\ufe9e\254\ufe9e\257\ufe9e\270\ufe9e\346\ufe9e\u014c\ufe9e\u014d\ufe9e" +
    "\u0153\ufe9e\u0156\ufe9e\001\002\000\010\071\243\072\245\267" +
    "\244\001\002\000\010\267\226\u013a\102\u013b\101\001\002" +
    "\000\040\024\167\031\157\042\175\100\170\150\162\152" +
    "\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152\161" +
    "\u0155\064\u015c\046\u0172\171\001\002\000\004\243\224\001" +
    "\002\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052" +
    "\u0155\064\u015c\046\001\002\000\014\071\ufeed\072\ufeed\267" +
    "\ufeed\u013a\102\u013b\101\001\002\000\020\u013a\060\u013b\065" +
    "\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001\002\000" +
    "\010\071\230\072\232\267\231\001\002\000\020\u013a\060" +
    "\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001" +
    "\002\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052" +
    "\u0155\064\u015c\046\001\002\000\004\134\ufeef\001\002\000" +
    "\010\243\234\u013a\102\u013b\101\001\002\000\020\u013a\060" +
    "\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001" +
    "\002\000\014\071\ufeea\072\ufeea\267\ufeea\u013a\102\u013b\101" +
    "\001\002\000\010\072\237\u013a\102\u013b\101\001\002\000" +
    "\004\134\ufeee\001\002\000\010\243\241\u013a\102\u013b\101" +
    "\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152" +
    "\052\u0155\064\u015c\046\001\002\000\014\071\ufeeb\072\ufeeb" +
    "\267\ufeeb\u013a\102\u013b\101\001\002\000\020\u013a\060\u013b" +
    "\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001\002" +
    "\000\040\024\167\031\157\042\175\100\170\150\162\152" +
    "\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152\161" +
    "\u0155\064\u015c\046\u0172\171\001\002\000\004\134\ufef1\001" +
    "\002\000\004\243\247\001\002\000\020\u013a\060\u013b\065" +
    "\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001\002\000" +
    "\014\071\ufeec\072\ufeec\267\ufeec\u013a\102\u013b\101\001\002" +
    "\000\010\072\252\u013a\102\u013b\101\001\002\000\004\134" +
    "\ufef0\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f\063" +
    "\u0152\052\u0155\064\u015c\046\001\002\000\010\u013a\102\u013b" +
    "\101\u014d\255\001\002\000\020\u013a\060\u013b\065\u013e\030" +
    "\u013f\063\u0152\052\u0155\064\u015c\046\001\002\000\010\u013a" +
    "\102\u013b\101\u0153\257\001\002\000\004\134\ufef3\001\002" +
    "\000\020\u013a\ufe91\u013b\ufe91\u013e\ufe91\u013f\ufe91\u0152\ufe91\u0155" +
    "\ufe91\u015c\ufe91\001\002\000\004\u0152\327\001\002\000\020" +
    "\u013a\ufe94\u013b\ufe94\u013e\ufe94\u013f\ufe94\u0152\ufe94\u0155\ufe94\u015c" +
    "\ufe94\001\002\000\020\u013a\ufe93\u013b\ufe93\u013e\ufe93\u013f\ufe93" +
    "\u0152\ufe93\u0155\ufe93\u015c\ufe93\001\002\000\020\u013a\060\u013b" +
    "\065\u013e\030\u013f\063\u0152\321\u0155\064\u015c\046\001\002" +
    "\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155" +
    "\064\u015c\046\001\002\000\020\u013a\ufe96\u013b\ufe96\u013e\ufe96" +
    "\u013f\ufe96\u0152\ufe96\u0155\ufe96\u015c\ufe96\001\002\000\020\u013a" +
    "\ufe95\u013b\ufe95\u013e\ufe95\u013f\ufe95\u0152\ufe95\u0155\ufe95\u015c\ufe95" +
    "\001\002\000\020\u013a\ufe92\u013b\ufe92\u013e\ufe92\u013f\ufe92\u0152" +
    "\ufe92\u0155\ufe92\u015c\ufe92\001\002\000\010\016\276\126\275" +
    "\141\274\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f" +
    "\063\u0152\052\u0155\064\u015c\046\001\002\000\116\002\ufea6" +
    "\006\ufea6\007\ufea6\015\ufea6\034\ufea6\043\ufea6\056\ufea6\060" +
    "\ufea6\067\ufea6\072\ufea6\076\ufea6\106\ufea6\113\ufea6\117\ufea6" +
    "\120\ufea6\130\ufea6\131\ufea6\140\ufea6\156\ufea6\165\ufea6\166" +
    "\ufea6\212\ufea6\215\ufea6\216\ufea6\225\ufea6\232\ufea6\243\ufea6" +
    "\251\ufea6\254\ufea6\257\ufea6\270\ufea6\346\ufea6\u013a\102\u013b" +
    "\101\u014c\ufea6\u014d\ufea6\u0153\ufea6\u0156\ufea6\001\002\000\020" +
    "\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c" +
    "\046\001\002\000\004\u0152\302\001\002\000\020\u013a\060" +
    "\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001" +
    "\002\000\010\007\300\u013a\102\u013b\101\001\002\000\020" +
    "\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c" +
    "\046\001\002\000\116\002\ufe9a\006\ufe9a\007\ufe9a\015\ufe9a" +
    "\034\ufe9a\043\ufe9a\056\ufe9a\060\ufe9a\067\ufe9a\072\ufe9a\076" +
    "\ufe9a\106\ufe9a\113\ufe9a\117\ufe9a\120\ufe9a\130\ufe9a\131\ufe9a" +
    "\140\ufe9a\156\ufe9a\165\ufe9a\166\ufe9a\212\ufe9a\215\ufe9a\216" +
    "\ufe9a\225\ufe9a\232\ufe9a\243\ufe9a\251\ufe9a\254\ufe9a\257\ufe9a" +
    "\270\ufe9a\346\ufe9a\u013a\102\u013b\101\u014c\ufe9a\u014d\ufe9a\u0153" +
    "\ufe9a\u0156\ufe9a\001\002\000\024\151\306\225\303\u013a\060" +
    "\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001" +
    "\002\000\042\005\120\064\115\245\uff14\302\uff14\322\uff14" +
    "\371\uff14\372\uff14\u0122\uff14\u013a\uff14\u013b\uff14\u013c\uff14\u013e" +
    "\uff14\u013f\uff14\u0152\uff14\u0155\uff14\u015c\uff14\001\002\000\006" +
    "\u014d\310\u0153\307\001\002\000\012\u013a\102\u013b\101\u014d" +
    "\ufe8f\u0153\ufe8f\001\002\000\006\u014d\ufe90\u0153\ufe90\001\002" +
    "\000\112\002\ufea3\006\ufea3\007\ufea3\015\ufea3\034\ufea3\043" +
    "\ufea3\056\ufea3\060\ufea3\067\ufea3\072\ufea3\076\ufea3\106\ufea3" +
    "\113\ufea3\117\ufea3\120\ufea3\130\ufea3\131\ufea3\140\ufea3\156" +
    "\ufea3\165\ufea3\166\ufea3\212\ufea3\215\ufea3\216\ufea3\225\ufea3" +
    "\232\ufea3\243\ufea3\251\ufea3\254\ufea3\257\ufea3\270\ufea3\346" +
    "\ufea3\u014c\ufea3\u014d\ufea3\u0153\ufea3\u0156\ufea3\001\002\000\022" +
    "\151\311\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155" +
    "\064\u015c\046\001\002\000\006\u014d\ufe8e\u0153\ufe8e\001\002" +
    "\000\012\u013a\102\u013b\101\u014d\ufe8d\u0153\ufe8d\001\002\000" +
    "\004\u0153\314\001\002\000\112\002\ufe9c\006\ufe9c\007\ufe9c" +
    "\015\ufe9c\034\ufe9c\043\ufe9c\056\ufe9c\060\ufe9c\067\ufe9c\072" +
    "\ufe9c\076\ufe9c\106\ufe9c\113\ufe9c\117\ufe9c\120\ufe9c\130\ufe9c" +
    "\131\ufe9c\140\ufe9c\156\ufe9c\165\ufe9c\166\ufe9c\212\ufe9c\215" +
    "\ufe9c\216\ufe9c\225\ufe9c\232\ufe9c\243\ufe9c\251\ufe9c\254\ufe9c" +
    "\257\ufe9c\270\ufe9c\346\ufe9c\u014c\ufe9c\u014d\ufe9c\u0153\ufe9c\u0156" +
    "\ufe9c\001\002\000\116\002\ufea5\006\ufea5\007\ufea5\015\ufea5" +
    "\034\ufea5\043\ufea5\056\ufea5\060\ufea5\067\ufea5\072\ufea5\076" +
    "\ufea5\106\ufea5\113\ufea5\117\ufea5\120\ufea5\130\ufea5\131\ufea5" +
    "\140\ufea5\156\ufea5\165\ufea5\166\ufea5\212\ufea5\215\ufea5\216" +
    "\ufea5\225\ufea5\232\ufea5\243\ufea5\251\ufea5\254\ufea5\257\ufea5" +
    "\270\ufea5\346\ufea5\u013a\102\u013b\101\u014c\ufea5\u014d\ufea5\u0153" +
    "\ufea5\u0156\ufea5\001\002\000\010\007\317\u013a\102\u013b\101" +
    "\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152" +
    "\052\u0155\064\u015c\046\001\002\000\116\002\ufe9b\006\ufe9b" +
    "\007\ufe9b\015\ufe9b\034\ufe9b\043\ufe9b\056\ufe9b\060\ufe9b\067" +
    "\ufe9b\072\ufe9b\076\ufe9b\106\ufe9b\113\ufe9b\117\ufe9b\120\ufe9b" +
    "\130\ufe9b\131\ufe9b\140\ufe9b\156\ufe9b\165\ufe9b\166\ufe9b\212" +
    "\ufe9b\215\ufe9b\216\ufe9b\225\ufe9b\232\ufe9b\243\ufe9b\251\ufe9b" +
    "\254\ufe9b\257\ufe9b\270\ufe9b\346\ufe9b\u013a\102\u013b\101\u014c" +
    "\ufe9b\u014d\ufe9b\u0153\ufe9b\u0156\ufe9b\001\002\000\042\024\167" +
    "\031\157\042\175\100\170\150\162\152\165\225\114\307" +
    "\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152\161\u0155\064" +
    "\u015c\046\u0172\171\001\002\000\116\002\ufea2\006\ufea2\007" +
    "\ufea2\015\ufea2\034\ufea2\043\ufea2\056\ufea2\060\ufea2\067\ufea2" +
    "\072\ufea2\076\ufea2\106\ufea2\113\ufea2\117\ufea2\120\ufea2\130" +
    "\ufea2\131\ufea2\140\ufea2\156\ufea2\165\ufea2\166\ufea2\212\ufea2" +
    "\215\ufea2\216\ufea2\225\ufea2\232\ufea2\243\ufea2\251\ufea2\254" +
    "\ufea2\257\ufea2\270\ufea2\346\ufea2\u013a\102\u013b\101\u014c\ufea2" +
    "\u014d\ufea2\u0153\ufea2\u0156\ufea2\001\002\000\034\016\265\126" +
    "\261\141\272\150\271\u0139\270\u013a\102\u013b\101\u0142\262" +
    "\u0143\266\u0144\263\u0145\267\u0147\260\u0153\326\001\002\000" +
    "\004\u0153\325\001\002\000\112\002\ufea1\006\ufea1\007\ufea1" +
    "\015\ufea1\034\ufea1\043\ufea1\056\ufea1\060\ufea1\067\ufea1\072" +
    "\ufea1\076\ufea1\106\ufea1\113\ufea1\117\ufea1\120\ufea1\130\ufea1" +
    "\131\ufea1\140\ufea1\156\ufea1\165\ufea1\166\ufea1\212\ufea1\215" +
    "\ufea1\216\ufea1\225\ufea1\232\ufea1\243\ufea1\251\ufea1\254\ufea1" +
    "\257\ufea1\270\ufea1\346\ufea1\u014c\ufea1\u014d\ufea1\u0153\ufea1\u0156" +
    "\ufea1\001\002\000\206\002\ufefb\006\ufefb\007\ufefb\011\ufefb" +
    "\012\ufefb\015\ufefb\016\ufefb\025\ufefb\034\ufefb\043\ufefb\056" +
    "\ufefb\060\ufefb\062\ufefb\067\ufefb\071\ufefb\072\ufefb\076\ufefb" +
    "\106\ufefb\107\ufefb\112\ufefb\113\ufefb\117\ufefb\120\ufefb\126" +
    "\ufefb\127\ufefb\130\ufefb\131\ufefb\133\ufefb\140\ufefb\141\ufefb" +
    "\150\ufefb\151\ufefb\156\ufefb\165\ufefb\166\ufefb\175\ufefb\206" +
    "\ufefb\212\ufefb\215\ufefb\216\ufefb\225\ufefb\232\ufefb\243\ufefb" +
    "\251\ufefb\254\ufefb\255\ufefb\257\ufefb\267\ufefb\270\ufefb\346" +
    "\ufefb\u0139\ufefb\u013a\ufefb\u013b\ufefb\u013c\ufefb\u013d\ufefb\u013e\ufefb" +
    "\u0142\ufefb\u0143\ufefb\u0144\ufefb\u0145\ufefb\u0147\ufefb\u014c\ufefb\u014d" +
    "\ufefb\u0153\ufefb\u0156\ufefb\u015d\ufefb\001\002\000\024\151\306" +
    "\225\330\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155" +
    "\064\u015c\046\001\002\000\042\005\120\064\115\245\uff14" +
    "\302\uff14\322\uff14\371\uff14\372\uff14\u0122\uff14\u013a\uff14\u013b" +
    "\uff14\u013c\uff14\u013e\uff14\u013f\uff14\u0152\uff14\u0155\uff14\u015c\uff14" +
    "\001\002\000\006\u014d\310\u0153\332\001\002\000\112\002" +
    "\ufea4\006\ufea4\007\ufea4\015\ufea4\034\ufea4\043\ufea4\056\ufea4" +
    "\060\ufea4\067\ufea4\072\ufea4\076\ufea4\106\ufea4\113\ufea4\117" +
    "\ufea4\120\ufea4\130\ufea4\131\ufea4\140\ufea4\156\ufea4\165\ufea4" +
    "\166\ufea4\212\ufea4\215\ufea4\216\ufea4\225\ufea4\232\ufea4\243" +
    "\ufea4\251\ufea4\254\ufea4\257\ufea4\270\ufea4\346\ufea4\u014c\ufea4" +
    "\u014d\ufea4\u0153\ufea4\u0156\ufea4\001\002\000\004\u0153\334\001" +
    "\002\000\112\002\ufe9d\006\ufe9d\007\ufe9d\015\ufe9d\034\ufe9d" +
    "\043\ufe9d\056\ufe9d\060\ufe9d\067\ufe9d\072\ufe9d\076\ufe9d\106" +
    "\ufe9d\113\ufe9d\117\ufe9d\120\ufe9d\130\ufe9d\131\ufe9d\140\ufe9d" +
    "\156\ufe9d\165\ufe9d\166\ufe9d\212\ufe9d\215\ufe9d\216\ufe9d\225" +
    "\ufe9d\232\ufe9d\243\ufe9d\251\ufe9d\254\ufe9d\257\ufe9d\270\ufe9d" +
    "\346\ufe9d\u014c\ufe9d\u014d\ufe9d\u0153\ufe9d\u0156\ufe9d\001\002\000" +
    "\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064" +
    "\u015c\046\001\002\000\010\011\337\u013a\102\u013b\101\001" +
    "\002\000\004\u013e\030\001\002\000\004\u0153\341\001\002" +
    "\000\004\134\ufef5\001\002\000\112\002\ufeaa\006\ufeaa\007" +
    "\ufeaa\015\ufeaa\034\ufeaa\043\ufeaa\056\ufeaa\060\ufeaa\067\ufeaa" +
    "\072\ufeaa\076\ufeaa\106\ufeaa\113\ufeaa\117\ufeaa\120\ufeaa\130" +
    "\ufeaa\131\ufeaa\140\ufeaa\156\ufeaa\165\ufeaa\166\ufeaa\212\ufeaa" +
    "\215\ufeaa\216\ufeaa\225\ufeaa\232\ufeaa\243\ufeaa\251\ufeaa\254" +
    "\ufeaa\257\ufeaa\270\ufeaa\346\ufeaa\u014c\ufeaa\u014d\ufeaa\u0153\ufeaa" +
    "\u0156\ufeaa\001\002\000\004\u0153\344\001\002\000\126\002" +
    "\ufea9\006\ufea9\007\ufea9\015\ufea9\034\ufea9\043\ufea9\056\ufea9" +
    "\060\ufea9\067\ufea9\072\ufea9\076\ufea9\106\ufea9\113\ufea9\117" +
    "\ufea9\120\ufea9\130\ufea9\131\ufea9\140\ufea9\156\ufea9\165\ufea9" +
    "\166\ufea9\212\ufea9\215\ufea9\216\ufea9\225\ufea9\232\ufea9\243" +
    "\ufea9\251\ufea9\254\ufea9\257\ufea9\270\ufea9\346\ufea9\u0139\270" +
    "\u0142\262\u0143\266\u0144\263\u0145\267\u0147\260\u014c\ufea9\u014d" +
    "\ufea9\u0153\ufea9\u0156\ufea9\001\002\000\020\u013a\060\u013b\065" +
    "\u013e\030\u013f\063\u0152\346\u0155\064\u015c\046\001\002\000" +
    "\042\024\167\031\157\042\175\100\170\150\162\152\165" +
    "\225\114\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152" +
    "\161\u0155\064\u015c\046\u0172\171\001\002\000\116\002\ufea0" +
    "\006\ufea0\007\ufea0\015\ufea0\034\ufea0\043\ufea0\056\ufea0\060" +
    "\ufea0\067\ufea0\072\ufea0\076\ufea0\106\ufea0\113\ufea0\117\ufea0" +
    "\120\ufea0\130\ufea0\131\ufea0\140\ufea0\156\ufea0\165\ufea0\166" +
    "\ufea0\212\ufea0\215\ufea0\216\ufea0\225\ufea0\232\ufea0\243\ufea0" +
    "\251\ufea0\254\ufea0\257\ufea0\270\ufea0\346\ufea0\u013a\102\u013b" +
    "\101\u014c\ufea0\u014d\ufea0\u0153\ufea0\u0156\ufea0\001\002\000\004" +
    "\u0153\351\001\002\000\112\002\ufe9f\006\ufe9f\007\ufe9f\015" +
    "\ufe9f\034\ufe9f\043\ufe9f\056\ufe9f\060\ufe9f\067\ufe9f\072\ufe9f" +
    "\076\ufe9f\106\ufe9f\113\ufe9f\117\ufe9f\120\ufe9f\130\ufe9f\131" +
    "\ufe9f\140\ufe9f\156\ufe9f\165\ufe9f\166\ufe9f\212\ufe9f\215\ufe9f" +
    "\216\ufe9f\225\ufe9f\232\ufe9f\243\ufe9f\251\ufe9f\254\ufe9f\257" +
    "\ufe9f\270\ufe9f\346\ufe9f\u014c\ufe9f\u014d\ufe9f\u0153\ufe9f\u0156\ufe9f" +
    "\001\002\000\040\024\167\031\157\042\175\100\170\150" +
    "\162\152\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063" +
    "\u0152\161\u0155\064\u015c\046\u0172\171\001\002\000\110\002" +
    "\ufeac\006\ufeac\015\ufeac\034\ufeac\043\ufeac\056\ufeac\060\ufeac" +
    "\067\ufeac\072\ufeac\076\ufeac\106\ufeac\113\ufeac\117\ufeac\120" +
    "\ufeac\130\ufeac\131\ufeac\140\ufeac\156\ufeac\165\ufeac\166\ufeac" +
    "\212\ufeac\215\ufeac\216\ufeac\225\ufeac\232\ufeac\243\ufeac\251" +
    "\ufeac\254\ufeac\257\ufeac\270\ufeac\346\ufeac\u014c\ufeac\u014d\ufeac" +
    "\u0153\ufeac\u0156\ufeac\001\002\000\024\u013a\060\u013b\065\u013c" +
    "\074\u013e\030\u013f\063\u0152\052\u0153\ufedf\u0155\064\u015c\046" +
    "\001\002\000\004\u0153\356\001\002\000\004\134\ufef2\001" +
    "\002\000\006\150\360\151\361\001\002\000\004\151\362" +
    "\001\002\000\112\002\ufea8\006\ufea8\007\ufea8\015\ufea8\034" +
    "\ufea8\043\ufea8\056\ufea8\060\ufea8\067\ufea8\072\ufea8\076\ufea8" +
    "\106\ufea8\113\ufea8\117\ufea8\120\ufea8\130\ufea8\131\ufea8\140" +
    "\ufea8\156\ufea8\165\ufea8\166\ufea8\212\ufea8\215\ufea8\216\ufea8" +
    "\225\ufea8\232\ufea8\243\ufea8\251\ufea8\254\ufea8\257\ufea8\270" +
    "\ufea8\346\ufea8\u014c\ufea8\u014d\ufea8\u0153\ufea8\u0156\ufea8\001\002" +
    "\000\112\002\ufea7\006\ufea7\007\ufea7\015\ufea7\034\ufea7\043" +
    "\ufea7\056\ufea7\060\ufea7\067\ufea7\072\ufea7\076\ufea7\106\ufea7" +
    "\113\ufea7\117\ufea7\120\ufea7\130\ufea7\131\ufea7\140\ufea7\156" +
    "\ufea7\165\ufea7\166\ufea7\212\ufea7\215\ufea7\216\ufea7\225\ufea7" +
    "\232\ufea7\243\ufea7\251\ufea7\254\ufea7\257\ufea7\270\ufea7\346" +
    "\ufea7\u014c\ufea7\u014d\ufea7\u0153\ufea7\u0156\ufea7\001\002\000\014" +
    "\113\150\130\146\140\145\156\364\215\147\001\002\000" +
    "\040\024\167\031\157\042\175\100\170\150\162\152\165" +
    "\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152\161\u0155" +
    "\064\u015c\046\u0172\171\001\002\000\104\002\ufebe\006\ufebe" +
    "\015\ufebe\034\ufebe\043\ufebe\056\ufebe\060\ufebe\067\ufebe\072" +
    "\ufebe\076\ufebe\106\ufebe\113\ufebe\117\ufebe\120\ufebe\130\ufebe" +
    "\131\ufebe\140\ufebe\156\ufebe\166\ufebe\212\ufebe\215\ufebe\216" +
    "\ufebe\225\ufebe\232\ufebe\251\ufebe\254\ufebe\257\ufebe\270\ufebe" +
    "\346\ufebe\u014c\ufebe\u014d\ufebe\u0153\ufebe\u0156\ufebe\001\002\000" +
    "\010\u013e\030\u0152\132\u0155\136\001\002\000\004\135\370" +
    "\001\002\000\010\u013e\030\u0152\132\u0155\136\001\002\000" +
    "\014\113\150\130\146\140\145\156\372\215\147\001\002" +
    "\000\040\024\167\031\157\042\175\100\170\150\162\152" +
    "\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152\161" +
    "\u0155\064\u015c\046\u0172\171\001\002\000\104\002\ufec2\006" +
    "\ufec2\015\ufec2\034\ufec2\043\ufec2\056\ufec2\060\ufec2\067\ufec2" +
    "\072\ufec2\076\ufec2\106\ufec2\113\ufec2\117\ufec2\120\ufec2\130" +
    "\ufec2\131\ufec2\140\ufec2\156\ufec2\166\ufec2\212\ufec2\215\ufec2" +
    "\216\ufec2\225\ufec2\232\ufec2\251\ufec2\254\ufec2\257\ufec2\270" +
    "\ufec2\346\ufec2\u014c\ufec2\u014d\ufec2\u0153\ufec2\u0156\ufec2\001\002" +
    "\000\014\113\150\130\146\140\145\156\375\215\147\001" +
    "\002\000\040\024\167\031\157\042\175\100\170\150\162" +
    "\152\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152" +
    "\161\u0155\064\u015c\046\u0172\171\001\002\000\104\002\ufec0" +
    "\006\ufec0\015\ufec0\034\ufec0\043\ufec0\056\ufec0\060\ufec0\067" +
    "\ufec0\072\ufec0\076\ufec0\106\ufec0\113\ufec0\117\ufec0\120\ufec0" +
    "\130\ufec0\131\ufec0\140\ufec0\156\ufec0\166\ufec0\212\ufec0\215" +
    "\ufec0\216\ufec0\225\ufec0\232\ufec0\251\ufec0\254\ufec0\257\ufec0" +
    "\270\ufec0\346\ufec0\u014c\ufec0\u014d\ufec0\u0153\ufec0\u0156\ufec0\001" +
    "\002\000\010\u013e\030\u0152\132\u0155\136\001\002\000\014" +
    "\113\150\130\146\140\145\156\u0101\215\147\001\002\000" +
    "\040\024\167\031\157\042\175\100\170\150\162\152\165" +
    "\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152\161\u0155" +
    "\064\u015c\046\u0172\171\001\002\000\104\002\ufebd\006\ufebd" +
    "\015\ufebd\034\ufebd\043\ufebd\056\ufebd\060\ufebd\067\ufebd\072" +
    "\ufebd\076\ufebd\106\ufebd\113\ufebd\117\ufebd\120\ufebd\130\ufebd" +
    "\131\ufebd\140\ufebd\156\ufebd\166\ufebd\212\ufebd\215\ufebd\216" +
    "\ufebd\225\ufebd\232\ufebd\251\ufebd\254\ufebd\257\ufebd\270\ufebd" +
    "\346\ufebd\u014c\ufebd\u014d\ufebd\u0153\ufebd\u0156\ufebd\001\002\000" +
    "\010\u013e\030\u0152\132\u0155\136\001\002\000\004\135\u0105" +
    "\001\002\000\010\u013e\030\u0152\132\u0155\136\001\002\000" +
    "\014\113\150\130\146\140\145\156\u0107\215\147\001\002" +
    "\000\040\024\167\031\157\042\175\100\170\150\162\152" +
    "\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152\161" +
    "\u0155\064\u015c\046\u0172\171\001\002\000\104\002\ufec3\006" +
    "\ufec3\015\ufec3\034\ufec3\043\ufec3\056\ufec3\060\ufec3\067\ufec3" +
    "\072\ufec3\076\ufec3\106\ufec3\113\ufec3\117\ufec3\120\ufec3\130" +
    "\ufec3\131\ufec3\140\ufec3\156\ufec3\166\ufec3\212\ufec3\215\ufec3" +
    "\216\ufec3\225\ufec3\232\ufec3\251\ufec3\254\ufec3\257\ufec3\270" +
    "\ufec3\346\ufec3\u014c\ufec3\u014d\ufec3\u0153\ufec3\u0156\ufec3\001\002" +
    "\000\014\113\150\130\146\140\145\156\u010a\215\147\001" +
    "\002\000\040\024\167\031\157\042\175\100\170\150\162" +
    "\152\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152" +
    "\161\u0155\064\u015c\046\u0172\171\001\002\000\104\002\ufec1" +
    "\006\ufec1\015\ufec1\034\ufec1\043\ufec1\056\ufec1\060\ufec1\067" +
    "\ufec1\072\ufec1\076\ufec1\106\ufec1\113\ufec1\117\ufec1\120\ufec1" +
    "\130\ufec1\131\ufec1\140\ufec1\156\ufec1\166\ufec1\212\ufec1\215" +
    "\ufec1\216\ufec1\225\ufec1\232\ufec1\251\ufec1\254\ufec1\257\ufec1" +
    "\270\ufec1\346\ufec1\u014c\ufec1\u014d\ufec1\u0153\ufec1\u0156\ufec1\001" +
    "\002\000\064\002\ufebb\006\ufebb\015\ufebb\034\ufebb\043\ufebb" +
    "\056\ufebb\060\ufebb\067\ufebb\072\ufebb\076\ufebb\106\ufebb\117" +
    "\ufebb\120\ufebb\131\ufebb\166\ufebb\212\ufebb\216\ufebb\225\ufebb" +
    "\232\ufebb\251\ufebb\254\ufebb\257\ufebb\346\ufebb\u014c\ufebb\u0153" +
    "\ufebb\001\002\000\060\002\ufeb6\006\ufeb6\015\ufeb6\034\ufeb6" +
    "\043\ufeb6\056\ufeb6\060\ufeb6\067\ufeb6\072\ufeb6\076\ufeb6\120" +
    "\u0114\131\ufeb6\166\ufeb6\212\ufeb6\216\ufeb6\225\ufeb6\232\ufeb6" +
    "\251\ufeb6\254\ufeb6\257\ufeb6\346\ufeb6\u014c\ufeb6\u0153\ufeb6\001" +
    "\002\000\004\022\u010f\001\002\000\020\u013a\060\u013b\065" +
    "\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001\002\000" +
    "\064\002\ufeb9\006\ufeb9\015\ufeb9\034\ufeb9\043\ufeb9\056\ufeb9" +
    "\060\ufeb9\067\ufeb9\072\ufeb9\076\ufeb9\106\ufeb9\120\ufeb9\131" +
    "\ufeb9\166\ufeb9\212\ufeb9\216\ufeb9\225\ufeb9\232\ufeb9\251\ufeb9" +
    "\254\ufeb9\257\ufeb9\346\ufeb9\u014c\ufeb9\u014d\u0112\u0153\ufeb9\001" +
    "\002\000\070\002\ufeb8\006\ufeb8\015\ufeb8\034\ufeb8\043\ufeb8" +
    "\056\ufeb8\060\ufeb8\067\ufeb8\072\ufeb8\076\ufeb8\106\ufeb8\120" +
    "\ufeb8\131\ufeb8\166\ufeb8\212\ufeb8\216\ufeb8\225\ufeb8\232\ufeb8" +
    "\251\ufeb8\254\ufeb8\257\ufeb8\346\ufeb8\u013a\102\u013b\101\u014c" +
    "\ufeb8\u014d\ufeb8\u0153\ufeb8\001\002\000\020\u013a\060\u013b\065" +
    "\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001\002\000" +
    "\070\002\ufeb7\006\ufeb7\015\ufeb7\034\ufeb7\043\ufeb7\056\ufeb7" +
    "\060\ufeb7\067\ufeb7\072\ufeb7\076\ufeb7\106\ufeb7\120\ufeb7\131" +
    "\ufeb7\166\ufeb7\212\ufeb7\216\ufeb7\225\ufeb7\232\ufeb7\251\ufeb7" +
    "\254\ufeb7\257\ufeb7\346\ufeb7\u013a\102\u013b\101\u014c\ufeb7\u014d" +
    "\ufeb7\u0153\ufeb7\001\002\000\040\024\167\031\157\042\175" +
    "\100\170\150\162\152\165\307\163\u013a\060\u013b\065\u013e" +
    "\030\u013f\063\u0152\161\u0155\064\u015c\046\u0172\171\001\002" +
    "\000\056\002\ufeb4\006\ufeb4\015\ufeb4\034\ufeb4\043\ufeb4\056" +
    "\ufeb4\060\ufeb4\067\ufeb4\072\ufeb4\076\ufeb4\131\ufeb4\166\u0116" +
    "\212\ufeb4\216\ufeb4\225\ufeb4\232\ufeb4\251\ufeb4\254\ufeb4\257" +
    "\ufeb4\346\ufeb4\u014c\ufeb4\u0153\ufeb4\001\002\000\004\022\u0118" +
    "\001\002\000\054\002\uffa2\006\uffa2\015\uffa2\034\uffa2\043" +
    "\uffa2\056\uffa2\060\uffa2\067\uffa2\072\uffa2\076\uffa2\131\uffa2" +
    "\212\uffa2\216\uffa2\225\uffa2\232\uffa2\251\uffa2\254\uffa2\257" +
    "\uffa2\346\uffa2\u014c\uffa2\u0153\uffa2\001\002\000\020\u013a\060" +
    "\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001" +
    "\002\000\070\002\uff77\006\uff77\012\u011f\015\uff77\034\uff77" +
    "\043\uff77\056\uff77\060\uff77\062\u0120\067\uff77\072\uff77\076" +
    "\uff77\106\uff77\131\uff77\212\uff77\216\uff77\225\uff77\232\uff77" +
    "\251\uff77\254\uff77\257\uff77\346\uff77\u013a\102\u013b\101\u014c" +
    "\uff77\u014d\uff77\u0153\uff77\001\002\000\060\002\ufeb3\006\ufeb3" +
    "\015\ufeb3\034\ufeb3\043\ufeb3\056\ufeb3\060\ufeb3\067\ufeb3\072" +
    "\ufeb3\076\ufeb3\106\ufeb3\131\ufeb3\212\ufeb3\216\ufeb3\225\ufeb3" +
    "\232\ufeb3\251\ufeb3\254\ufeb3\257\ufeb3\346\ufeb3\u014c\ufeb3\u014d" +
    "\u011c\u0153\ufeb3\001\002\000\060\002\ufeb2\006\ufeb2\015\ufeb2" +
    "\034\ufeb2\043\ufeb2\056\ufeb2\060\ufeb2\067\ufeb2\072\ufeb2\076" +
    "\ufeb2\106\ufeb2\131\ufeb2\212\ufeb2\216\ufeb2\225\ufeb2\232\ufeb2" +
    "\251\ufeb2\254\ufeb2\257\ufeb2\346\ufeb2\u014c\ufeb2\u014d\ufeb2\u0153" +
    "\ufeb2\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f\063" +
    "\u0152\052\u0155\064\u015c\046\001\002\000\060\002\ufeb1\006" +
    "\ufeb1\015\ufeb1\034\ufeb1\043\ufeb1\056\ufeb1\060\ufeb1\067\ufeb1" +
    "\072\ufeb1\076\ufeb1\106\ufeb1\131\ufeb1\212\ufeb1\216\ufeb1\225" +
    "\ufeb1\232\ufeb1\251\ufeb1\254\ufeb1\257\ufeb1\346\ufeb1\u014c\ufeb1" +
    "\u014d\ufeb1\u0153\ufeb1\001\002\000\060\002\ufeb0\006\ufeb0\015" +
    "\ufeb0\034\ufeb0\043\ufeb0\056\ufeb0\060\ufeb0\067\ufeb0\072\ufeb0" +
    "\076\ufeb0\106\ufeb0\131\ufeb0\212\ufeb0\216\ufeb0\225\ufeb0\232" +
    "\ufeb0\251\ufeb0\254\ufeb0\257\ufeb0\346\ufeb0\u014c\ufeb0\u014d\ufeb0" +
    "\u0153\ufeb0\001\002\000\064\002\uff79\006\uff79\012\uff79\015" +
    "\uff79\034\uff79\043\uff79\056\uff79\060\uff79\062\uff79\067\uff79" +
    "\072\uff79\076\uff79\106\uff79\131\uff79\212\uff79\216\uff79\225" +
    "\uff79\232\uff79\251\uff79\254\uff79\257\uff79\346\uff79\u014c\uff79" +
    "\u014d\uff79\u0153\uff79\001\002\000\064\002\uff78\006\uff78\012" +
    "\uff78\015\uff78\034\uff78\043\uff78\056\uff78\060\uff78\062\uff78" +
    "\067\uff78\072\uff78\076\uff78\106\uff78\131\uff78\212\uff78\216" +
    "\uff78\225\uff78\232\uff78\251\uff78\254\uff78\257\uff78\346\uff78" +
    "\u014c\uff78\u014d\uff78\u0153\uff78\001\002\000\060\002\ufeb5\006" +
    "\ufeb5\015\ufeb5\034\ufeb5\043\ufeb5\056\ufeb5\060\ufeb5\067\ufeb5" +
    "\072\ufeb5\076\ufeb5\106\ufeb5\131\ufeb5\166\ufeb5\212\ufeb5\216" +
    "\ufeb5\225\ufeb5\232\ufeb5\251\ufeb5\254\ufeb5\257\ufeb5\346\ufeb5" +
    "\u014c\ufeb5\u0153\ufeb5\001\002\000\010\u013e\030\u0152\132\u0155" +
    "\136\001\002\000\012\113\150\130\146\140\145\215\147" +
    "\001\002\000\014\113\ufed0\130\ufed0\140\ufed0\215\ufed0\u0156" +
    "\u0125\001\002\000\102\002\ufec4\006\ufec4\015\ufec4\034\ufec4" +
    "\043\ufec4\056\ufec4\060\ufec4\067\ufec4\072\ufec4\076\ufec4\106" +
    "\ufec4\113\ufec4\117\ufec4\120\ufec4\130\ufec4\131\ufec4\140\ufec4" +
    "\156\ufec4\166\ufec4\212\ufec4\215\ufec4\216\ufec4\225\ufec4\232" +
    "\ufec4\251\ufec4\254\ufec4\257\ufec4\270\ufec4\346\ufec4\u014c\ufec4" +
    "\u014d\ufec4\u0153\ufec4\001\002\000\042\005\120\064\115\245" +
    "\uff14\302\uff14\322\uff14\371\uff14\372\uff14\u0122\uff14\u013a\uff14" +
    "\u013b\uff14\u013c\uff14\u013e\uff14\u013f\uff14\u0152\uff14\u0155\uff14\u015c" +
    "\uff14\001\002\000\006\u014d\143\u0153\u0128\001\002\000\102" +
    "\002\ufecf\006\ufecf\015\ufecf\034\ufecf\043\ufecf\056\ufecf\060" +
    "\ufecf\067\ufecf\072\ufecf\076\ufecf\106\ufecf\113\ufecf\117\ufecf" +
    "\120\ufecf\130\ufecf\131\ufecf\140\ufecf\156\ufecf\166\ufecf\212" +
    "\ufecf\215\ufecf\216\ufecf\225\ufecf\232\ufecf\251\ufecf\254\ufecf" +
    "\257\ufecf\270\ufecf\346\ufecf\u014c\ufecf\u014d\ufecf\u0153\ufecf\001" +
    "\002\000\004\u0153\u012a\001\002\000\110\002\ufece\006\ufece" +
    "\011\u012b\015\ufece\034\ufece\043\ufece\056\ufece\060\ufece\067" +
    "\ufece\072\ufece\076\ufece\106\ufece\113\ufece\117\ufece\120\ufece" +
    "\130\ufece\131\ufece\140\ufece\156\ufece\166\ufece\212\ufece\215" +
    "\ufece\216\ufece\225\ufece\232\ufece\251\ufece\254\ufece\257\ufece" +
    "\270\ufece\346\ufece\u013e\030\u014c\ufece\u014d\ufece\u014f\u012c\u0153" +
    "\ufece\001\002\000\006\u013e\030\u014f\u0130\001\002\000\004" +
    "\u013e\030\001\002\000\102\002\ufecd\006\ufecd\015\ufecd\034" +
    "\ufecd\043\ufecd\056\ufecd\060\ufecd\067\ufecd\072\ufecd\076\ufecd" +
    "\106\ufecd\113\ufecd\117\ufecd\120\ufecd\130\ufecd\131\ufecd\140" +
    "\ufecd\156\ufecd\166\ufecd\212\ufecd\215\ufecd\216\ufecd\225\ufecd" +
    "\232\ufecd\251\ufecd\254\ufecd\257\ufecd\270\ufecd\346\ufecd\u014c" +
    "\ufecd\u014d\ufecd\u0153\ufecd\001\002\000\004\u0150\u012f\001\002" +
    "\000\102\002\ufecc\006\ufecc\015\ufecc\034\ufecc\043\ufecc\056" +
    "\ufecc\060\ufecc\067\ufecc\072\ufecc\076\ufecc\106\ufecc\113\ufecc" +
    "\117\ufecc\120\ufecc\130\ufecc\131\ufecc\140\ufecc\156\ufecc\166" +
    "\ufecc\212\ufecc\215\ufecc\216\ufecc\225\ufecc\232\ufecc\251\ufecc" +
    "\254\ufecc\257\ufecc\270\ufecc\346\ufecc\u014c\ufecc\u014d\ufecc\u0153" +
    "\ufecc\001\002\000\004\u013e\030\001\002\000\102\002\ufecb" +
    "\006\ufecb\015\ufecb\034\ufecb\043\ufecb\056\ufecb\060\ufecb\067" +
    "\ufecb\072\ufecb\076\ufecb\106\ufecb\113\ufecb\117\ufecb\120\ufecb" +
    "\130\ufecb\131\ufecb\140\ufecb\156\ufecb\166\ufecb\212\ufecb\215" +
    "\ufecb\216\ufecb\225\ufecb\232\ufecb\251\ufecb\254\ufecb\257\ufecb" +
    "\270\ufecb\346\ufecb\u014c\ufecb\u014d\ufecb\u0153\ufecb\001\002\000" +
    "\004\u0150\u0133\001\002\000\102\002\ufeca\006\ufeca\015\ufeca" +
    "\034\ufeca\043\ufeca\056\ufeca\060\ufeca\067\ufeca\072\ufeca\076" +
    "\ufeca\106\ufeca\113\ufeca\117\ufeca\120\ufeca\130\ufeca\131\ufeca" +
    "\140\ufeca\156\ufeca\166\ufeca\212\ufeca\215\ufeca\216\ufeca\225" +
    "\ufeca\232\ufeca\251\ufeca\254\ufeca\257\ufeca\270\ufeca\346\ufeca" +
    "\u014c\ufeca\u014d\ufeca\u0153\ufeca\001\002\000\006\u013e\030\u014f" +
    "\u0139\001\002\000\004\u013e\030\001\002\000\102\002\ufec8" +
    "\006\ufec8\015\ufec8\034\ufec8\043\ufec8\056\ufec8\060\ufec8\067" +
    "\ufec8\072\ufec8\076\ufec8\106\ufec8\113\ufec8\117\ufec8\120\ufec8" +
    "\130\ufec8\131\ufec8\140\ufec8\156\ufec8\166\ufec8\212\ufec8\215" +
    "\ufec8\216\ufec8\225\ufec8\232\ufec8\251\ufec8\254\ufec8\257\ufec8" +
    "\270\ufec8\346\ufec8\u014c\ufec8\u014d\ufec8\u0153\ufec8\001\002\000" +
    "\004\u0150\u0138\001\002\000\102\002\ufec7\006\ufec7\015\ufec7" +
    "\034\ufec7\043\ufec7\056\ufec7\060\ufec7\067\ufec7\072\ufec7\076" +
    "\ufec7\106\ufec7\113\ufec7\117\ufec7\120\ufec7\130\ufec7\131\ufec7" +
    "\140\ufec7\156\ufec7\166\ufec7\212\ufec7\215\ufec7\216\ufec7\225" +
    "\ufec7\232\ufec7\251\ufec7\254\ufec7\257\ufec7\270\ufec7\346\ufec7" +
    "\u014c\ufec7\u014d\ufec7\u0153\ufec7\001\002\000\004\u013e\030\001" +
    "\002\000\102\002\ufec6\006\ufec6\015\ufec6\034\ufec6\043\ufec6" +
    "\056\ufec6\060\ufec6\067\ufec6\072\ufec6\076\ufec6\106\ufec6\113" +
    "\ufec6\117\ufec6\120\ufec6\130\ufec6\131\ufec6\140\ufec6\156\ufec6" +
    "\166\ufec6\212\ufec6\215\ufec6\216\ufec6\225\ufec6\232\ufec6\251" +
    "\ufec6\254\ufec6\257\ufec6\270\ufec6\346\ufec6\u014c\ufec6\u014d\ufec6" +
    "\u0153\ufec6\001\002\000\004\u0150\u013c\001\002\000\102\002" +
    "\ufec5\006\ufec5\015\ufec5\034\ufec5\043\ufec5\056\ufec5\060\ufec5" +
    "\067\ufec5\072\ufec5\076\ufec5\106\ufec5\113\ufec5\117\ufec5\120" +
    "\ufec5\130\ufec5\131\ufec5\140\ufec5\156\ufec5\166\ufec5\212\ufec5" +
    "\215\ufec5\216\ufec5\225\ufec5\232\ufec5\251\ufec5\254\ufec5\257" +
    "\ufec5\270\ufec5\346\ufec5\u014c\ufec5\u014d\ufec5\u0153\ufec5\001\002" +
    "\000\074\002\ufe88\004\ufe88\006\ufe88\011\ufe88\015\ufe88\034" +
    "\ufe88\043\ufe88\056\ufe88\060\ufe88\067\ufe88\072\ufe88\076\ufe88" +
    "\112\ufe88\131\ufe88\212\ufe88\216\ufe88\225\ufe88\232\ufe88\251" +
    "\ufe88\257\ufe88\272\ufe88\346\ufe88\u014c\ufe88\u014d\ufe88\u0152\ufe88" +
    "\u0153\ufe88\u0158\ufe88\u016a\ufe88\u016d\ufe88\001\002\000\070\002" +
    "\ufebc\006\ufebc\015\ufebc\034\ufebc\043\ufebc\056\ufebc\060\ufebc" +
    "\067\ufebc\072\ufebc\076\ufebc\106\ufebc\117\ufebc\120\ufebc\131" +
    "\ufebc\166\ufebc\212\ufebc\216\ufebc\225\ufebc\232\ufebc\251\ufebc" +
    "\254\ufebc\257\ufebc\270\142\346\ufebc\u014c\ufebc\u014d\143\u0153" +
    "\ufebc\001\002\000\064\002\ufeba\006\ufeba\015\ufeba\034\ufeba" +
    "\043\ufeba\056\ufeba\060\ufeba\067\ufeba\072\ufeba\076\ufeba\106" +
    "\ufeba\117\u010e\120\ufeba\131\ufeba\166\ufeba\212\ufeba\216\ufeba" +
    "\225\ufeba\232\ufeba\251\ufeba\254\ufeba\257\ufeba\346\ufeba\u014c" +
    "\ufeba\u0153\ufeba\001\002\000\062\002\ufeb6\006\ufeb6\015\ufeb6" +
    "\034\ufeb6\043\ufeb6\056\ufeb6\060\ufeb6\067\ufeb6\072\ufeb6\076" +
    "\ufeb6\106\ufeb6\120\u0114\131\ufeb6\166\ufeb6\212\ufeb6\216\ufeb6" +
    "\225\ufeb6\232\ufeb6\251\ufeb6\254\ufeb6\257\ufeb6\346\ufeb6\u014c" +
    "\ufeb6\u0153\ufeb6\001\002\000\060\002\ufeb4\006\ufeb4\015\ufeb4" +
    "\034\ufeb4\043\ufeb4\056\ufeb4\060\ufeb4\067\ufeb4\072\ufeb4\076" +
    "\ufeb4\106\ufeb4\131\ufeb4\166\u0116\212\ufeb4\216\ufeb4\225\ufeb4" +
    "\232\ufeb4\251\ufeb4\254\ufeb4\257\ufeb4\346\ufeb4\u014c\ufeb4\u0153" +
    "\ufeb4\001\002\000\056\002\ufeda\006\ufeda\015\ufeda\034\ufeda" +
    "\043\ufeda\056\ufeda\060\ufeda\067\ufeda\072\ufeda\076\ufeda\106" +
    "\u0144\131\ufeda\212\ufeda\216\ufeda\225\ufeda\232\ufeda\251\ufeda" +
    "\254\ufeda\257\ufeda\346\ufeda\u014c\ufeda\u0153\ufeda\001\002\000" +
    "\054\002\uffa3\006\uffa3\015\uffa3\034\uffa3\043\uffa3\056\uffa3" +
    "\060\uffa3\067\uffa3\072\uffa3\076\uffa3\131\uffa3\212\uffa3\216" +
    "\uffa3\225\uffa3\232\uffa3\251\uffa3\254\uffa3\257\uffa3\346\uffa3" +
    "\u014c\uffa3\u0153\uffa3\001\002\000\006\203\u0145\257\u0146\001" +
    "\002\000\004\u0106\u014c\001\002\000\056\002\ufed9\006\ufed9" +
    "\015\ufed9\034\ufed9\043\ufed9\056\ufed9\060\ufed9\067\ufed9\072" +
    "\ufed9\076\ufed9\131\ufed9\153\u0147\212\ufed9\216\ufed9\225\ufed9" +
    "\232\ufed9\251\ufed9\254\ufed9\257\ufed9\346\ufed9\u014c\ufed9\u0153" +
    "\ufed9\001\002\000\004\u013e\030\001\002\000\056\002\ufed6" +
    "\006\ufed6\015\ufed6\034\ufed6\043\ufed6\056\ufed6\060\ufed6\067" +
    "\ufed6\072\ufed6\076\ufed6\131\ufed6\212\ufed6\216\ufed6\225\ufed6" +
    "\232\ufed6\251\ufed6\254\ufed6\257\ufed6\346\ufed6\u014c\ufed6\u014d" +
    "\ufed6\u0153\ufed6\001\002\000\056\002\ufed8\006\ufed8\015\ufed8" +
    "\034\ufed8\043\ufed8\056\ufed8\060\ufed8\067\ufed8\072\ufed8\076" +
    "\ufed8\131\ufed8\212\ufed8\216\ufed8\225\ufed8\232\ufed8\251\ufed8" +
    "\254\ufed8\257\ufed8\346\ufed8\u014c\ufed8\u014d\u014a\u0153\ufed8\001" +
    "\002\000\004\u013e\030\001\002\000\056\002\ufed5\006\ufed5" +
    "\015\ufed5\034\ufed5\043\ufed5\056\ufed5\060\ufed5\067\ufed5\072" +
    "\ufed5\076\ufed5\131\ufed5\212\ufed5\216\ufed5\225\ufed5\232\ufed5" +
    "\251\ufed5\254\ufed5\257\ufed5\346\ufed5\u014c\ufed5\u014d\ufed5\u0153" +
    "\ufed5\001\002\000\054\002\ufed7\006\ufed7\015\ufed7\034\ufed7" +
    "\043\ufed7\056\ufed7\060\ufed7\067\ufed7\072\ufed7\076\ufed7\131" +
    "\ufed7\212\ufed7\216\ufed7\225\ufed7\232\ufed7\251\ufed7\254\ufed7" +
    "\257\ufed7\346\ufed7\u014c\ufed7\u0153\ufed7\001\002\000\034\302" +
    "\u0152\322\u0156\371\u0154\372\u0153\u0122\u014e\u013a\060\u013b\065" +
    "\u013c\u0155\u013e\030\u013f\063\u0152\052\u0155\064\u015c\046\001" +
    "\002\000\004\u0152\u016d\001\002\000\062\002\uff16\006\uff16" +
    "\015\uff16\034\uff16\043\uff16\056\uff16\060\uff16\067\uff16\072" +
    "\uff16\076\uff16\112\uff16\131\uff16\133\uff16\212\uff16\216\uff16" +
    "\225\uff16\232\uff16\251\uff16\254\uff16\257\uff16\346\uff16\u014c" +
    "\uff16\u014d\u016b\u0153\uff16\001\002\000\074\002\uff0f\006\uff0f" +
    "\011\u0163\015\uff0f\034\uff0f\043\uff0f\056\uff0f\060\uff0f\067" +
    "\uff0f\072\uff0f\076\uff0f\112\uff0f\131\uff0f\133\uff0f\212\uff0f" +
    "\216\uff0f\225\uff0f\232\uff0f\251\uff0f\254\uff0f\257\uff0f\346" +
    "\uff0f\u013a\102\u013b\101\u013e\030\u014c\uff0f\u014d\uff0f\u0153\uff0f" +
    "\u015d\u0164\001\002\000\062\002\uff11\006\uff11\015\uff11\034" +
    "\uff11\043\uff11\056\uff11\060\uff11\067\uff11\072\uff11\076\uff11" +
    "\112\uff11\131\uff11\133\uff11\212\uff11\216\uff11\225\uff11\232" +
    "\uff11\251\uff11\254\uff11\257\uff11\346\uff11\u014c\uff11\u014d\uff11" +
    "\u0153\uff11\001\002\000\004\u0152\u0160\001\002\000\004\u0152" +
    "\u015d\001\002\000\004\u0152\u015a\001\002\000\060\002\uff15" +
    "\006\uff15\015\uff15\034\uff15\043\uff15\056\uff15\060\uff15\067" +
    "\uff15\072\uff15\076\uff15\112\uff15\131\uff15\133\uff15\212\uff15" +
    "\216\uff15\225\uff15\232\uff15\251\uff15\254\uff15\257\uff15\346" +
    "\uff15\u014c\uff15\u0153\uff15\001\002\000\004\u0152\u0157\001\002" +
    "\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155" +
    "\064\u015c\046\001\002\000\010\u013a\102\u013b\101\u0153\u0159" +
    "\001\002\000\062\002\uff09\006\uff09\015\uff09\034\uff09\043" +
    "\uff09\056\uff09\060\uff09\067\uff09\072\uff09\076\uff09\112\uff09" +
    "\131\uff09\133\uff09\212\uff09\216\uff09\225\uff09\232\uff09\251" +
    "\uff09\254\uff09\257\uff09\346\uff09\u014c\uff09\u014d\uff09\u0153\uff09" +
    "\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152" +
    "\052\u0155\064\u015c\046\001\002\000\010\u013a\102\u013b\101" +
    "\u0153\u015c\001\002\000\062\002\uff08\006\uff08\015\uff08\034" +
    "\uff08\043\uff08\056\uff08\060\uff08\067\uff08\072\uff08\076\uff08" +
    "\112\uff08\131\uff08\133\uff08\212\uff08\216\uff08\225\uff08\232" +
    "\uff08\251\uff08\254\uff08\257\uff08\346\uff08\u014c\uff08\u014d\uff08" +
    "\u0153\uff08\001\002\000\020\u013a\060\u013b\065\u013e\030\u013f" +
    "\063\u0152\052\u0155\064\u015c\046\001\002\000\010\u013a\102" +
    "\u013b\101\u0153\u015f\001\002\000\062\002\uff07\006\uff07\015" +
    "\uff07\034\uff07\043\uff07\056\uff07\060\uff07\067\uff07\072\uff07" +
    "\076\uff07\112\uff07\131\uff07\133\uff07\212\uff07\216\uff07\225" +
    "\uff07\232\uff07\251\uff07\254\uff07\257\uff07\346\uff07\u014c\uff07" +
    "\u014d\uff07\u0153\uff07\001\002\000\020\u013a\060\u013b\065\u013e" +
    "\030\u013f\063\u0152\052\u0155\064\u015c\046\001\002\000\010" +
    "\u013a\102\u013b\101\u0153\u0162\001\002\000\062\002\uff06\006" +
    "\uff06\015\uff06\034\uff06\043\uff06\056\uff06\060\uff06\067\uff06" +
    "\072\uff06\076\uff06\112\uff06\131\uff06\133\uff06\212\uff06\216" +
    "\uff06\225\uff06\232\uff06\251\uff06\254\uff06\257\uff06\346\uff06" +
    "\u014c\uff06\u014d\uff06\u0153\uff06\001\002\000\010\u013e\030\u014f" +
    "\u0167\u015d\u0166\001\002\000\062\002\uff0a\006\uff0a\015\uff0a" +
    "\034\uff0a\043\uff0a\056\uff0a\060\uff0a\067\uff0a\072\uff0a\076" +
    "\uff0a\112\uff0a\131\uff0a\133\uff0a\212\uff0a\216\uff0a\225\uff0a" +
    "\232\uff0a\251\uff0a\254\uff0a\257\uff0a\346\uff0a\u014c\uff0a\u014d" +
    "\uff0a\u0153\uff0a\001\002\000\062\002\uff0e\006\uff0e\015\uff0e" +
    "\034\uff0e\043\uff0e\056\uff0e\060\uff0e\067\uff0e\072\uff0e\076" +
    "\uff0e\112\uff0e\131\uff0e\133\uff0e\212\uff0e\216\uff0e\225\uff0e" +
    "\232\uff0e\251\uff0e\254\uff0e\257\uff0e\346\uff0e\u014c\uff0e\u014d" +
    "\uff0e\u0153\uff0e\001\002\000\062\002\uff0b\006\uff0b\015\uff0b" +
    "\034\uff0b\043\uff0b\056\uff0b\060\uff0b\067\uff0b\072\uff0b\076" +
    "\uff0b\112\uff0b\131\uff0b\133\uff0b\212\uff0b\216\uff0b\225\uff0b" +
    "\232\uff0b\251\uff0b\254\uff0b\257\uff0b\346\uff0b\u014c\uff0b\u014d" +
    "\uff0b\u0153\uff0b\001\002\000\004\u013e\030\001\002\000\062" +
    "\002\uff0d\006\uff0d\015\uff0d\034\uff0d\043\uff0d\056\uff0d\060" +
    "\uff0d\067\uff0d\072\uff0d\076\uff0d\112\uff0d\131\uff0d\133\uff0d" +
    "\212\uff0d\216\uff0d\225\uff0d\232\uff0d\251\uff0d\254\uff0d\257" +
    "\uff0d\346\uff0d\u014c\uff0d\u014d\uff0d\u0153\uff0d\001\002\000\004" +
    "\u0150\u016a\001\002\000\062\002\uff0c\006\uff0c\015\uff0c\034" +
    "\uff0c\043\uff0c\056\uff0c\060\uff0c\067\uff0c\072\uff0c\076\uff0c" +
    "\112\uff0c\131\uff0c\133\uff0c\212\uff0c\216\uff0c\225\uff0c\232" +
    "\uff0c\251\uff0c\254\uff0c\257\uff0c\346\uff0c\u014c\uff0c\u014d\uff0c" +
    "\u0153\uff0c\001\002\000\032\302\u0152\322\u0156\371\u0154\372" +
    "\u0153\u0122\u014e\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052" +
    "\u0155\064\u015c\046\001\002\000\062\002\uff10\006\uff10\015" +
    "\uff10\034\uff10\043\uff10\056\uff10\060\uff10\067\uff10\072\uff10" +
    "\076\uff10\112\uff10\131\uff10\133\uff10\212\uff10\216\uff10\225" +
    "\uff10\232\uff10\251\uff10\254\uff10\257\uff10\346\uff10\u014c\uff10" +
    "\u014d\uff10\u0153\uff10\001\002\000\020\u013a\060\u013b\065\u013e" +
    "\030\u013f\063\u0152\052\u0155\064\u015c\046\001\002\000\010" +
    "\u013a\102\u013b\101\u0153\u016f\001\002\000\062\002\uff05\006" +
    "\uff05\015\uff05\034\uff05\043\uff05\056\uff05\060\uff05\067\uff05" +
    "\072\uff05\076\uff05\112\uff05\131\uff05\133\uff05\212\uff05\216" +
    "\uff05\225\uff05\232\uff05\251\uff05\254\uff05\257\uff05\346\uff05" +
    "\u014c\uff05\u014d\uff05\u0153\uff05\001\002\000\206\002\ufefa\006" +
    "\ufefa\007\ufefa\011\ufefa\012\ufefa\015\ufefa\016\ufefa\025\ufefa" +
    "\034\ufefa\043\ufefa\056\ufefa\060\ufefa\062\ufefa\067\ufefa\071" +
    "\ufefa\072\ufefa\076\ufefa\106\ufefa\107\ufefa\112\ufefa\113\ufefa" +
    "\117\ufefa\120\ufefa\126\ufefa\127\ufefa\130\ufefa\131\ufefa\133" +
    "\ufefa\140\ufefa\141\ufefa\150\ufefa\151\ufefa\156\ufefa\165\ufefa" +
    "\166\ufefa\175\ufefa\206\ufefa\212\ufefa\215\ufefa\216\ufefa\225" +
    "\ufefa\232\ufefa\243\ufefa\251\ufefa\254\ufefa\255\ufefa\257\ufefa" +
    "\267\ufefa\270\ufefa\346\ufefa\u0139\ufefa\u013a\ufefa\u013b\ufefa\u013c" +
    "\ufefa\u013d\ufefa\u013e\ufefa\u0142\ufefa\u0143\ufefa\u0144\ufefa\u0145\ufefa" +
    "\u0147\ufefa\u014c\ufefa\u014d\ufefa\u0153\ufefa\u0156\ufefa\u015d\ufefa\001" +
    "\002\000\006\005\u0172\225\uffa6\001\002\000\004\225\uffa5" +
    "\001\002\000\004\225\u0174\001\002\000\042\005\120\064" +
    "\115\245\uff14\302\uff14\322\uff14\371\uff14\372\uff14\u0122\uff14" +
    "\u013a\uff14\u013b\uff14\u013c\uff14\u013e\uff14\u013f\uff14\u0152\uff14\u0155" +
    "\uff14\u015c\uff14\001\002\000\052\002\uffa7\006\uffa7\015\uffa7" +
    "\034\uffa7\043\uffa7\056\uffa7\060\uffa7\067\uffa7\072\uffa7\076" +
    "\uffa7\131\uffa7\212\uffa7\216\uffa7\225\uffa7\232\uffa7\251\uffa7" +
    "\257\uffa7\346\uffa7\u014c\uffa7\u0153\uffa7\001\002\000\004\u013e" +
    "\030\001\002\000\010\u013e\030\u0152\132\u0155\136\001\002" +
    "\000\054\002\ufebc\006\ufebc\015\ufebc\034\ufebc\043\ufebc\056" +
    "\ufebc\060\ufebc\067\ufebc\072\ufebc\076\ufebc\131\ufebc\212\ufebc" +
    "\216\ufebc\225\ufebc\232\ufebc\251\ufebc\257\ufebc\270\142\346" +
    "\ufebc\u014c\ufebc\u014d\143\001\002\000\050\002\uffa0\006\uffa0" +
    "\015\uffa0\034\uffa0\043\uffa0\056\uffa0\060\uffa0\067\uffa0\072" +
    "\uffa0\076\uffa0\131\uffa0\212\uffa0\216\uffa0\225\uffa0\232\uffa0" +
    "\251\uffa0\257\uffa0\346\uffa0\u014c\uffa0\001\002\000\056\002" +
    "\uff19\006\uff19\015\uff19\034\uff19\043\uff19\056\uff19\060\uff19" +
    "\067\uff19\072\uff19\076\uff19\112\uff19\131\uff19\212\uff19\216" +
    "\uff19\225\uff19\232\uff19\251\uff19\257\uff19\270\uff19\346\uff19" +
    "\u014c\uff19\u014d\uff19\001\002\000\004\232\u017c\001\002\000" +
    "\004\u013e\030\001\002\000\054\002\ufebc\006\ufebc\015\ufebc" +
    "\034\ufebc\043\ufebc\056\ufebc\060\ufebc\067\ufebc\072\ufebc\076" +
    "\ufebc\131\ufebc\212\ufebc\216\ufebc\225\ufebc\232\ufebc\251\ufebc" +
    "\257\ufebc\270\142\346\ufebc\u014c\ufebc\u014d\u0176\001\002\000" +
    "\050\002\uffa1\006\uffa1\015\uffa1\034\uffa1\043\uffa1\056\uffa1" +
    "\060\uffa1\067\uffa1\072\uffa1\076\uffa1\131\uffa1\212\uffa1\216" +
    "\uffa1\225\uffa1\232\uffa1\251\uffa1\257\uffa1\346\uffa1\u014c\uffa1" +
    "\001\002\000\004\u013e\u0180\001\002\000\306\002\ufe8b\004" +
    "\ufe8b\006\ufe8b\007\ufe8b\011\ufe8b\012\ufe8b\015\ufe8b\016\ufe8b" +
    "\023\ufe8b\025\ufe8b\034\ufe8b\036\ufe8b\043\ufe8b\056\ufe8b\057" +
    "\ufe8b\060\ufe8b\062\ufe8b\066\ufe8b\067\ufe8b\071\ufe8b\072\ufe8b" +
    "\076\ufe8b\106\ufe8b\107\ufe8b\112\ufe8b\113\ufe8b\117\ufe8b\120" +
    "\ufe8b\122\ufe8b\126\ufe8b\127\ufe8b\130\ufe8b\131\ufe8b\133\ufe8b" +
    "\134\ufe8b\140\ufe8b\141\ufe8b\150\ufe8b\151\ufe8b\156\ufe8b\165" +
    "\ufe8b\166\ufe8b\175\ufe8b\206\ufe8b\212\ufe8b\215\ufe8b\216\ufe8b" +
    "\225\ufe8b\232\ufe8b\243\ufe8b\244\ufe8b\251\ufe8b\254\ufe8b\255" +
    "\ufe8b\257\ufe8b\263\ufe8b\267\ufe8b\270\ufe8b\272\ufe8b\303\ufe8b" +
    "\311\ufe8b\313\ufe8b\323\ufe8b\326\ufe8b\341\ufe8b\346\ufe8b\356" +
    "\ufe8b\357\ufe8b\u0104\ufe8b\u0111\ufe8b\u0124\ufe8b\u0125\ufe8b\u0132\ufe8b" +
    "\u0139\ufe8b\u013a\ufe8b\u013b\ufe8b\u013c\ufe8b\u013d\ufe8b\u013e\ufe8b\u0142" +
    "\ufe8b\u0143\ufe8b\u0144\ufe8b\u0145\ufe8b\u0147\ufe8b\u014c\ufe8b\u014d\ufe8b" +
    "\u014e\ufe8b\u014f\ufe8b\u0150\ufe8b\u0152\ufe8b\u0153\ufe8b\u0156\ufe8b\u0158" +
    "\ufe8b\u015d\ufe8b\u0163\ufe8b\u016a\ufe8b\u016d\ufe8b\u0171\ufe8b\001\002" +
    "\000\004\u013e\u0182\001\002\000\306\002\ufe8a\004\ufe8a\006" +
    "\ufe8a\007\ufe8a\011\ufe8a\012\ufe8a\015\ufe8a\016\ufe8a\023\ufe8a" +
    "\025\ufe8a\034\ufe8a\036\ufe8a\043\ufe8a\056\ufe8a\057\ufe8a\060" +
    "\ufe8a\062\ufe8a\066\ufe8a\067\ufe8a\071\ufe8a\072\ufe8a\076\ufe8a" +
    "\106\ufe8a\107\ufe8a\112\ufe8a\113\ufe8a\117\ufe8a\120\ufe8a\122" +
    "\ufe8a\126\ufe8a\127\ufe8a\130\ufe8a\131\ufe8a\133\ufe8a\134\ufe8a" +
    "\140\ufe8a\141\ufe8a\150\ufe8a\151\ufe8a\156\ufe8a\165\ufe8a\166" +
    "\ufe8a\175\ufe8a\206\ufe8a\212\ufe8a\215\ufe8a\216\ufe8a\225\ufe8a" +
    "\232\ufe8a\243\ufe8a\244\ufe8a\251\ufe8a\254\ufe8a\255\ufe8a\257" +
    "\ufe8a\263\ufe8a\267\ufe8a\270\ufe8a\272\ufe8a\303\ufe8a\311\ufe8a" +
    "\313\ufe8a\323\ufe8a\326\ufe8a\341\ufe8a\346\ufe8a\356\ufe8a\357" +
    "\ufe8a\u0104\ufe8a\u0111\ufe8a\u0124\ufe8a\u0125\ufe8a\u0132\ufe8a\u0139\ufe8a" +
    "\u013a\ufe8a\u013b\ufe8a\u013c\ufe8a\u013d\ufe8a\u013e\ufe8a\u0142\ufe8a\u0143" +
    "\ufe8a\u0144\ufe8a\u0145\ufe8a\u0147\ufe8a\u014c\ufe8a\u014d\ufe8a\u014e\ufe8a" +
    "\u014f\ufe8a\u0150\ufe8a\u0152\ufe8a\u0153\ufe8a\u0156\ufe8a\u0158\ufe8a\u015d" +
    "\ufe8a\u0163\ufe8a\u016a\ufe8a\u016d\ufe8a\u0171\ufe8a\001\002\000\020" +
    "\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064\u015c" +
    "\046\001\002\000\010\u013a\102\u013b\101\u0153\u0185\001\002" +
    "\000\036\112\uffc5\302\uffc5\322\uffc5\371\uffc5\372\uffc5\u0122" +
    "\uffc5\u013a\uffc5\u013b\uffc5\u013c\uffc5\u013e\uffc5\u013f\uffc5\u0152\uffc5" +
    "\u0155\uffc5\u015c\uffc5\001\002\000\050\002\ufff3\006\ufff3\015" +
    "\ufff3\034\ufff3\043\ufff3\056\ufff3\060\ufff3\067\ufff3\072\ufff3" +
    "\076\ufff3\131\ufff3\212\ufff3\216\ufff3\225\ufff3\232\ufff3\251" +
    "\ufff3\257\ufff3\346\ufff3\u014c\ufff3\001\002\000\004\112\u0188" +
    "\001\002\000\004\u013e\030\001\002\000\052\002\ufebc\006" +
    "\ufebc\015\ufebc\034\ufebc\043\ufebc\056\ufebc\060\ufebc\067\ufebc" +
    "\072\ufebc\076\ufebc\131\ufebc\212\ufebc\216\ufebc\225\ufebc\232" +
    "\ufebc\251\ufebc\257\ufebc\270\142\346\ufebc\u014c\ufebc\001\002" +
    "\000\050\002\uff76\006\uff76\015\uff76\034\uff76\043\uff76\056" +
    "\uff76\060\uff76\067\uff76\072\uff76\076\uff76\131\uff76\212\uff76" +
    "\216\uff76\225\uff76\232\uff76\251\uff76\257\uff76\346\uff76\u014c" +
    "\uff76\001\002\000\004\u013e\030\001\002\000\004\u013e\030" +
    "\001\002\000\006\125\u0199\u013e\030\001\002\000\004\u013e" +
    "\030\001\002\000\050\002\ufff5\006\ufff5\015\ufff5\034\ufff5" +
    "\043\ufff5\056\ufff5\060\ufff5\067\ufff5\072\ufff5\076\ufff5\131" +
    "\ufff5\212\ufff5\216\ufff5\225\ufff5\232\ufff5\251\ufff5\257\ufff5" +
    "\346\ufff5\u014c\ufff5\001\002\000\004\u013e\030\001\002\000" +
    "\050\002\uffd6\006\uffd6\015\uffd6\034\uffd6\043\uffd6\056\uffd6" +
    "\060\uffd6\067\uffd6\072\uffd6\076\uffd6\131\uffd6\212\uffd6\216" +
    "\uffd6\225\uffd6\232\uffd6\251\uffd6\257\uffd6\346\uffd6\u014c\uffd6" +
    "\001\002\000\052\002\uff75\006\uff75\015\uff75\023\u0193\034" +
    "\uff75\043\uff75\056\uff75\060\uff75\067\uff75\072\uff75\076\uff75" +
    "\131\uff75\212\uff75\216\uff75\225\uff75\232\uff75\251\uff75\257" +
    "\uff75\346\uff75\u014c\uff75\001\002\000\052\002\uff74\006\uff74" +
    "\015\uff74\034\uff74\043\uff74\056\uff74\060\uff74\067\uff74\072" +
    "\uff74\076\uff74\131\uff74\212\uff74\216\uff74\225\uff74\232\uff74" +
    "\251\uff74\257\uff74\320\u0194\346\uff74\u014c\uff74\001\002\000" +
    "\050\002\uff73\006\uff73\015\uff73\034\uff73\043\uff73\056\uff73" +
    "\060\uff73\067\uff73\072\uff73\076\uff73\131\uff73\212\uff73\216" +
    "\uff73\225\uff73\232\uff73\251\uff73\257\uff73\346\uff73\u014c\uff73" +
    "\001\002\000\050\002\uffd4\006\uffd4\015\uffd4\034\uffd4\043" +
    "\uffd4\056\uffd4\060\uffd4\067\uffd4\072\uffd4\076\uffd4\131\uffd4" +
    "\212\uffd4\216\uffd4\225\uffd4\232\uffd4\251\uffd4\257\uffd4\346" +
    "\uffd4\u014c\uffd4\001\002\000\050\002\uff62\006\uff62\015\uff62" +
    "\034\uff62\043\uff62\056\uff62\060\uff62\067\uff62\072\uff62\076" +
    "\uff62\131\uff62\212\uff62\216\uff62\225\uff62\232\uff62\251\uff62" +
    "\257\uff62\346\uff62\u014c\uff62\001\002\000\050\002\uffd7\006" +
    "\uffd7\015\uffd7\034\uffd7\043\uffd7\056\uffd7\060\uffd7\067\uffd7" +
    "\072\uffd7\076\uffd7\131\uffd7\212\uffd7\216\uffd7\225\uffd7\232" +
    "\uffd7\251\uffd7\257\uffd7\346\uffd7\u014c\uffd7\001\002\000\050" +
    "\002\uff71\006\uff71\015\uff71\034\uff71\043\uff71\056\uff71\060" +
    "\uff71\067\uff71\072\uff71\076\uff71\131\uff71\212\uff71\216\uff71" +
    "\225\uff71\232\uff71\251\uff71\257\uff71\346\uff71\u014c\uff71\001" +
    "\002\000\004\100\u019a\001\002\000\004\u013e\030\001\002" +
    "\000\050\002\uff70\006\uff70\015\uff70\034\uff70\043\uff70\056" +
    "\uff70\060\uff70\067\uff70\072\uff70\076\uff70\131\uff70\212\uff70" +
    "\216\uff70\225\uff70\232\uff70\251\uff70\257\uff70\346\uff70\u014c" +
    "\uff70\001\002\000\050\002\uffd3\006\uffd3\015\uffd3\034\uffd3" +
    "\043\uffd3\056\uffd3\060\uffd3\067\uffd3\072\uffd3\076\uffd3\131" +
    "\uffd3\212\uffd3\216\uffd3\225\uffd3\232\uffd3\251\uffd3\257\uffd3" +
    "\346\uffd3\u014c\uffd3\001\002\000\050\002\uff61\006\uff61\015" +
    "\uff61\034\uff61\043\uff61\056\uff61\060\uff61\067\uff61\072\uff61" +
    "\076\uff61\131\uff61\212\uff61\216\uff61\225\uff61\232\uff61\251" +
    "\uff61\257\uff61\346\uff61\u014c\uff61\001\002\000\050\002\uffd5" +
    "\006\uffd5\015\uffd5\034\uffd5\043\uffd5\056\uffd5\060\uffd5\067" +
    "\uffd5\072\uffd5\076\uffd5\131\uffd5\212\uffd5\216\uffd5\225\uffd5" +
    "\232\uffd5\251\uffd5\257\uffd5\346\uffd5\u014c\uffd5\001\002\000" +
    "\050\002\uff72\006\uff72\015\uff72\034\uff72\043\uff72\056\uff72" +
    "\060\uff72\067\uff72\072\uff72\076\uff72\131\uff72\212\uff72\216" +
    "\uff72\225\uff72\232\uff72\251\uff72\257\uff72\346\uff72\u014c\uff72" +
    "\001\002\000\004\u013e\030\001\002\000\050\002\ufff4\006" +
    "\ufff4\015\ufff4\034\ufff4\043\ufff4\056\ufff4\060\ufff4\067\ufff4" +
    "\072\ufff4\076\ufff4\131\ufff4\212\ufff4\216\ufff4\225\ufff4\232" +
    "\ufff4\251\ufff4\257\ufff4\346\ufff4\u014c\ufff4\001\002\000\004" +
    "\u013e\030\001\002\000\004\u013e\030\001\002\000\010\u014d" +
    "\127\u0158\u01aa\u016d\uff89\001\002\000\050\002\uffd9\006\uffd9" +
    "\015\uffd9\034\uffd9\043\uffd9\056\uffd9\060\uffd9\067\uffd9\072" +
    "\uffd9\076\uffd9\131\uffd9\212\uffd9\216\uffd9\225\uffd9\232\uffd9" +
    "\251\uffd9\257\uffd9\346\uffd9\u014c\uffd9\001\002\000\004\u0152" +
    "\u01a8\001\002\000\020\011\ufe89\015\ufe89\u014d\ufe89\u014e\041" +
    "\u0152\ufe87\u0158\ufe89\u016d\ufe89\001\002\000\006\u0153\uff89\u0158" +
    "\u01aa\001\002\000\004\u0153\u01cd\001\002\000\004\u013e\030" +
    "\001\002\000\014\011\uff88\015\uff88\u014d\u01cb\u0153\uff88\u016d" +
    "\uff88\001\002\000\040\066\u01b6\303\u01b4\311\u01bb\313\u01af" +
    "\323\u01b1\326\u01ad\341\u01bc\356\u01ae\357\u01b0\u0104\u01b3\u0111" +
    "\u01b7\u0124\u01b2\u0125\u01b8\u0132\u01b5\u0163\u01b9\001\002\000\112" +
    "\002\uff34\006\uff34\011\uff34\015\uff34\025\uff34\034\uff34\043" +
    "\uff34\056\uff34\057\uff34\060\uff34\067\uff34\072\uff34\076\uff34" +
    "\107\uff34\122\uff34\126\uff34\127\uff34\131\uff34\150\uff34\151" +
    "\uff34\175\uff34\206\uff34\212\uff34\216\uff34\225\uff34\232\uff34" +
    "\251\uff34\255\uff34\257\uff34\346\uff34\u014c\uff34\u014d\uff34\u0152" +
    "\uff34\u0153\uff34\u016f\uff34\u0170\uff34\001\002\000\112\002\uff39" +
    "\006\uff39\011\uff39\015\uff39\025\uff39\034\uff39\043\uff39\056" +
    "\uff39\057\uff39\060\uff39\067\uff39\072\uff39\076\uff39\107\uff39" +
    "\122\uff39\126\uff39\127\uff39\131\uff39\150\uff39\151\uff39\175" +
    "\uff39\206\uff39\212\uff39\216\uff39\225\uff39\232\uff39\251\uff39" +
    "\255\uff39\257\uff39\346\uff39\u014c\uff39\u014d\uff39\u0152\uff39\u0153" +
    "\uff39\u016f\uff39\u0170\uff39\001\002\000\114\002\uff41\006\uff41" +
    "\011\uff41\015\uff41\025\uff41\034\uff41\043\uff41\056\uff41\057" +
    "\uff41\060\uff41\067\uff41\072\uff41\076\uff41\107\uff41\122\uff41" +
    "\126\uff41\127\uff41\131\uff41\150\uff41\151\uff41\175\uff41\206" +
    "\uff41\212\uff41\216\uff41\225\uff41\232\uff41\251\uff41\255\uff41" +
    "\257\uff41\264\u01ca\346\uff41\u014c\uff41\u014d\uff41\u0152\uff41\u0153" +
    "\uff41\u016f\uff41\u0170\uff41\001\002\000\112\002\uff38\006\uff38" +
    "\011\uff38\015\uff38\025\uff38\034\uff38\043\uff38\056\uff38\057" +
    "\uff38\060\uff38\067\uff38\072\uff38\076\uff38\107\uff38\122\uff38" +
    "\126\uff38\127\uff38\131\uff38\150\uff38\151\uff38\175\uff38\206" +
    "\uff38\212\uff38\216\uff38\225\uff38\232\uff38\251\uff38\255\uff38" +
    "\257\uff38\346\uff38\u014c\uff38\u014d\uff38\u0152\uff38\u0153\uff38\u016f" +
    "\uff38\u0170\uff38\001\002\000\112\002\uff32\006\uff32\011\uff32" +
    "\015\uff32\025\uff32\034\uff32\043\uff32\056\uff32\057\uff32\060" +
    "\uff32\067\uff32\072\uff32\076\uff32\107\uff32\122\uff32\126\uff32" +
    "\127\uff32\131\uff32\150\uff32\151\uff32\175\uff32\206\uff32\212" +
    "\uff32\216\uff32\225\uff32\232\uff32\251\uff32\255\uff32\257\uff32" +
    "\346\uff32\u014c\uff32\u014d\uff32\u0152\uff32\u0153\uff32\u016f\uff32\u0170" +
    "\uff32\001\002\000\112\002\uff36\006\uff36\011\uff36\015\uff36" +
    "\025\uff36\034\uff36\043\uff36\056\uff36\057\uff36\060\uff36\067" +
    "\uff36\072\uff36\076\uff36\107\uff36\122\uff36\126\uff36\127\uff36" +
    "\131\uff36\150\uff36\151\uff36\175\uff36\206\uff36\212\uff36\216" +
    "\uff36\225\uff36\232\uff36\251\uff36\255\uff36\257\uff36\346\uff36" +
    "\u014c\uff36\u014d\uff36\u0152\uff36\u0153\uff36\u016f\uff36\u0170\uff36\001" +
    "\002\000\112\002\uff33\006\uff33\011\uff33\015\uff33\025\uff33" +
    "\034\uff33\043\uff33\056\uff33\057\uff33\060\uff33\067\uff33\072" +
    "\uff33\076\uff33\107\uff33\122\uff33\126\uff33\127\uff33\131\uff33" +
    "\150\uff33\151\uff33\175\uff33\206\uff33\212\uff33\216\uff33\225" +
    "\uff33\232\uff33\251\uff33\255\uff33\257\uff33\346\uff33\u014c\uff33" +
    "\u014d\uff33\u0152\uff33\u0153\uff33\u016f\uff33\u0170\uff33\001\002\000" +
    "\112\002\uff35\006\uff35\011\uff35\015\uff35\025\uff35\034\uff35" +
    "\043\uff35\056\uff35\057\uff35\060\uff35\067\uff35\072\uff35\076" +
    "\uff35\107\uff35\122\uff35\126\uff35\127\uff35\131\uff35\150\uff35" +
    "\151\uff35\175\uff35\206\uff35\212\uff35\216\uff35\225\uff35\232" +
    "\uff35\251\uff35\255\uff35\257\uff35\346\uff35\u014c\uff35\u014d\uff35" +
    "\u0152\uff35\u0153\uff35\u016f\uff35\u0170\uff35\001\002\000\112\002" +
    "\uff3e\006\uff3e\011\uff3e\015\uff3e\025\uff3e\034\uff3e\043\uff3e" +
    "\056\uff3e\057\uff3e\060\uff3e\067\uff3e\072\uff3e\076\uff3e\107" +
    "\uff3e\122\uff3e\126\uff3e\127\uff3e\131\uff3e\150\uff3e\151\uff3e" +
    "\175\uff3e\206\uff3e\212\uff3e\216\uff3e\225\uff3e\232\uff3e\251" +
    "\uff3e\255\uff3e\257\uff3e\346\uff3e\u014c\uff3e\u014d\uff3e\u0152\uff3e" +
    "\u0153\uff3e\u016f\uff3e\u0170\uff3e\001\002\000\112\002\uff3c\006" +
    "\uff3c\011\uff3c\015\uff3c\025\uff3c\034\uff3c\043\uff3c\056\uff3c" +
    "\057\uff3c\060\uff3c\067\uff3c\072\uff3c\076\uff3c\107\uff3c\122" +
    "\uff3c\126\uff3c\127\uff3c\131\uff3c\150\uff3c\151\uff3c\175\uff3c" +
    "\206\uff3c\212\uff3c\216\uff3c\225\uff3c\232\uff3c\251\uff3c\255" +
    "\uff3c\257\uff3c\346\uff3c\u014c\uff3c\u014d\uff3c\u0152\uff3c\u0153\uff3c" +
    "\u016f\uff3c\u0170\uff3c\001\002\000\112\002\uff3b\006\uff3b\011" +
    "\uff3b\015\uff3b\025\uff3b\034\uff3b\043\uff3b\056\uff3b\057\uff3b" +
    "\060\uff3b\067\uff3b\072\uff3b\076\uff3b\107\uff3b\122\uff3b\126" +
    "\uff3b\127\uff3b\131\uff3b\150\uff3b\151\uff3b\175\uff3b\206\uff3b" +
    "\212\uff3b\216\uff3b\225\uff3b\232\uff3b\251\uff3b\255\uff3b\257" +
    "\uff3b\346\uff3b\u014c\uff3b\u014d\uff3b\u0152\uff3b\u0153\uff3b\u016f\uff3b" +
    "\u0170\uff3b\001\002\000\112\002\uff37\006\uff37\011\uff37\015" +
    "\uff37\025\uff37\034\uff37\043\uff37\056\uff37\057\uff37\060\uff37" +
    "\067\uff37\072\uff37\076\uff37\107\uff37\122\uff37\126\uff37\127" +
    "\uff37\131\uff37\150\uff37\151\uff37\175\uff37\206\uff37\212\uff37" +
    "\216\uff37\225\uff37\232\uff37\251\uff37\255\uff37\257\uff37\346" +
    "\uff37\u014c\uff37\u014d\uff37\u0152\uff37\u0153\uff37\u016f\uff37\u0170\uff37" +
    "\001\002\000\112\002\uff3a\006\uff3a\011\uff3a\015\uff3a\025" +
    "\uff3a\034\uff3a\043\uff3a\056\uff3a\057\uff3a\060\uff3a\067\uff3a" +
    "\072\uff3a\076\uff3a\107\uff3a\122\uff3a\126\uff3a\127\uff3a\131" +
    "\uff3a\150\uff3a\151\uff3a\175\uff3a\206\uff3a\212\uff3a\216\uff3a" +
    "\225\uff3a\232\uff3a\251\uff3a\255\uff3a\257\uff3a\346\uff3a\u014c" +
    "\uff3a\u014d\uff3a\u0152\uff3a\u0153\uff3a\u016f\uff3a\u0170\uff3a\001\002" +
    "\000\012\126\u01bf\u0152\u01c2\u016f\u01be\u0170\u01c1\001\002\000" +
    "\114\002\uff42\006\uff42\011\uff42\015\uff42\025\uff42\034\uff42" +
    "\043\uff42\056\uff42\057\uff42\060\uff42\067\uff42\072\uff42\076" +
    "\uff42\107\uff42\122\uff42\126\uff42\127\uff42\131\uff42\150\uff42" +
    "\151\uff42\175\uff42\206\uff42\212\uff42\216\uff42\225\uff42\232" +
    "\uff42\251\uff42\255\uff42\257\uff42\264\u01bd\346\uff42\u014c\uff42" +
    "\u014d\uff42\u0152\uff42\u0153\uff42\u016f\uff42\u0170\uff42\001\002\000" +
    "\112\002\uff3d\006\uff3d\011\uff3d\015\uff3d\025\uff3d\034\uff3d" +
    "\043\uff3d\056\uff3d\057\uff3d\060\uff3d\067\uff3d\072\uff3d\076" +
    "\uff3d\107\uff3d\122\uff3d\126\uff3d\127\uff3d\131\uff3d\150\uff3d" +
    "\151\uff3d\175\uff3d\206\uff3d\212\uff3d\216\uff3d\225\uff3d\232" +
    "\uff3d\251\uff3d\255\uff3d\257\uff3d\346\uff3d\u014c\uff3d\u014d\uff3d" +
    "\u0152\uff3d\u0153\uff3d\u016f\uff3d\u0170\uff3d\001\002\000\112\002" +
    "\uff3f\006\uff3f\011\uff3f\015\uff3f\025\uff3f\034\uff3f\043\uff3f" +
    "\056\uff3f\057\uff3f\060\uff3f\067\uff3f\072\uff3f\076\uff3f\107" +
    "\uff3f\122\uff3f\126\uff3f\127\uff3f\131\uff3f\150\uff3f\151\uff3f" +
    "\175\uff3f\206\uff3f\212\uff3f\216\uff3f\225\uff3f\232\uff3f\251" +
    "\uff3f\255\uff3f\257\uff3f\346\uff3f\u014c\uff3f\u014d\uff3f\u0152\uff3f" +
    "\u0153\uff3f\u016f\uff3f\u0170\uff3f\001\002\000\014\011\uff82\015" +
    "\uff82\u014d\uff82\u0153\uff82\u016d\uff82\001\002\000\014\011\uff83" +
    "\015\uff83\u014d\uff83\u0153\uff83\u016d\uff83\001\002\000\014\011" +
    "\uff86\015\uff86\u014d\uff86\u0153\uff86\u016d\uff86\001\002\000\014" +
    "\011\uff81\015\uff81\u014d\uff81\u0153\uff81\u016d\uff81\001\002\000" +
    "\004\u013f\u01c3\001\002\000\006\u014d\u01c5\u0153\u01c4\001\002" +
    "\000\010\126\u01bf\u016f\u01be\u0170\u01c1\001\002\000\004\u013f" +
    "\u01c6\001\002\000\004\u0153\u01c7\001\002\000\010\126\u01bf" +
    "\u016f\u01be\u0170\u01c1\001\002\000\014\011\uff84\015\uff84\u014d" +
    "\uff84\u0153\uff84\u016d\uff84\001\002\000\014\011\uff85\015\uff85" +
    "\u014d\uff85\u0153\uff85\u016d\uff85\001\002\000\112\002\uff40\006" +
    "\uff40\011\uff40\015\uff40\025\uff40\034\uff40\043\uff40\056\uff40" +
    "\057\uff40\060\uff40\067\uff40\072\uff40\076\uff40\107\uff40\122" +
    "\uff40\126\uff40\127\uff40\131\uff40\150\uff40\151\uff40\175\uff40" +
    "\206\uff40\212\uff40\216\uff40\225\uff40\232\uff40\251\uff40\255" +
    "\uff40\257\uff40\346\uff40\u014c\uff40\u014d\uff40\u0152\uff40\u0153\uff40" +
    "\u016f\uff40\u0170\uff40\001\002\000\014\011\uff89\015\uff89\u0153" +
    "\uff89\u0158\u01aa\u016d\uff89\001\002\000\012\011\uff87\015\uff87" +
    "\u0153\uff87\u016d\uff87\001\002\000\004\u016d\u01ce\001\002\000" +
    "\040\066\u01b6\303\u01b4\311\u01bb\313\u01af\323\u01b1\326\u01ad" +
    "\341\u01bc\356\u01ae\357\u01b0\u0104\u01b3\u0111\u01b7\u0124\u01b2\u0125" +
    "\u01b8\u0132\u01b5\u0163\u01b9\001\002\000\006\011\u01d0\015\uff94" +
    "\001\002\000\004\015\uff95\001\002\000\004\015\u01d2\001" +
    "\002\000\002\001\002\000\040\006\020\015\013\034\012" +
    "\043\014\056\025\060\023\067\021\072\u01d5\076\004\131" +
    "\016\216\011\225\006\232\017\251\007\257\024\001\002" +
    "\000\042\006\uff93\015\uff93\034\uff93\043\uff93\056\uff93\060" +
    "\uff93\067\uff93\072\uff93\076\uff93\131\uff93\212\uff93\216\uff93" +
    "\225\uff93\232\uff93\251\uff93\257\uff93\001\002\000\054\002" +
    "\uff90\006\uff90\015\uff90\034\uff90\043\uff90\056\uff90\060\uff90" +
    "\067\uff90\072\uff90\076\uff90\131\uff90\212\uff90\216\uff90\225" +
    "\uff90\232\uff90\246\u01d7\247\u01d6\251\uff90\257\uff90\346\uff90" +
    "\u014c\uff90\001\002\000\050\002\uffe6\006\uffe6\015\uffe6\034" +
    "\uffe6\043\uffe6\056\uffe6\060\uffe6\067\uffe6\072\uffe6\076\uffe6" +
    "\131\uffe6\212\uffe6\216\uffe6\225\uffe6\232\uffe6\251\uffe6\257" +
    "\uffe6\346\uffe6\u014c\uffe6\001\002\000\050\002\uffe7\006\uffe7" +
    "\015\uffe7\034\uffe7\043\uffe7\056\uffe7\060\uffe7\067\uffe7\072" +
    "\uffe7\076\uffe7\131\uffe7\212\uffe7\216\uffe7\225\uffe7\232\uffe7" +
    "\251\uffe7\257\uffe7\346\uffe7\u014c\uffe7\001\002\000\004\u016d" +
    "\u01d9\001\002\000\040\066\u01b6\303\u01b4\311\u01bb\313\u01af" +
    "\323\u01b1\326\u01ad\341\u01bc\356\u01ae\357\u01b0\u0104\u01b3\u0111" +
    "\u01b7\u0124\u01b2\u0125\u01b8\u0132\u01b5\u0163\u01b9\001\002\000\006" +
    "\011\u01d0\015\uff94\001\002\000\004\015\u01dc\001\002\000" +
    "\002\001\002\000\042\006\020\015\013\034\012\043\014" +
    "\056\025\060\023\067\021\072\010\076\004\131\016\212" +
    "\u01de\216\011\225\006\232\017\251\007\257\024\001\002" +
    "\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155" +
    "\064\u015c\046\001\002\000\010\072\u01e0\u013a\102\u013b\101" +
    "\001\002\000\050\002\uff8f\006\uff8f\015\uff8f\034\uff8f\043" +
    "\uff8f\056\uff8f\060\uff8f\067\uff8f\072\uff8f\076\uff8f\131\uff8f" +
    "\212\uff8f\216\uff8f\225\uff8f\232\uff8f\251\uff8f\257\uff8f\346" +
    "\uff8f\u014c\uff8f\001\002\000\050\002\uffd8\006\uffd8\015\uffd8" +
    "\034\uffd8\043\uffd8\056\uffd8\060\uffd8\067\uffd8\072\uffd8\076" +
    "\uffd8\131\uffd8\212\uffd8\216\uffd8\225\uffd8\232\uffd8\251\uffd8" +
    "\257\uffd8\346\uffd8\u014c\uffd8\001\002\000\016\004\u01e6\006" +
    "\u01e4\067\u01e7\272\u01e5\u014d\127\u016a\u01e3\001\002\000\004" +
    "\033\u02b0\001\002\000\032\004\u01f5\025\u01f8\033\u02a9\036" +
    "\u01f6\107\u01fc\127\u01ff\136\u01f4\150\u01f9\175\u01fb\255\u01f3" +
    "\u013e\030\u0152\u02a7\001\002\000\006\025\u029b\146\u029c\001" +
    "\002\000\032\004\u01f5\025\u01f8\033\u01fd\036\u01f6\107\u01fc" +
    "\127\u01f2\136\u01f4\150\u01f9\175\u01fb\255\u01f3\u013e\030\u0152" +
    "\u01f1\001\002\000\012\033\u01e8\036\u01e9\127\u01ea\u013e\030" +
    "\001\002\000\004\u013e\030\001\002\000\004\u013e\030\001" +
    "\002\000\004\u013e\030\001\002\000\050\002\uffb2\006\uffb2" +
    "\015\uffb2\034\uffb2\043\uffb2\056\uffb2\060\uffb2\067\uffb2\072" +
    "\uffb2\076\uffb2\131\uffb2\212\uffb2\216\uffb2\225\uffb2\232\uffb2" +
    "\251\uffb2\257\uffb2\346\uffb2\u014c\uffb2\001\002\000\052\002" +
    "\uffb3\006\uffb3\015\uffb3\034\uffb3\043\uffb3\056\uffb3\060\uffb3" +
    "\067\uffb3\072\uffb3\076\uffb3\131\uffb3\212\uffb3\216\uffb3\225" +
    "\uffb3\232\uffb3\251\uffb3\257\uffb3\346\uffb3\u014c\uffb3\u014d\127" +
    "\001\002\000\050\002\uffb1\006\uffb1\015\uffb1\034\uffb1\043" +
    "\uffb1\056\uffb1\060\uffb1\067\uffb1\072\uffb1\076\uffb1\131\uffb1" +
    "\212\uffb1\216\uffb1\225\uffb1\232\uffb1\251\uffb1\257\uffb1\346" +
    "\uffb1\u014c\uffb1\001\002\000\050\002\uffb4\006\uffb4\015\uffb4" +
    "\034\uffb4\043\uffb4\056\uffb4\060\uffb4\067\uffb4\072\uffb4\076" +
    "\uffb4\131\uffb4\212\uffb4\216\uffb4\225\uffb4\232\uffb4\251\uffb4" +
    "\257\uffb4\346\uffb4\u014c\uffb4\001\002\000\046\011\u0262\066" +
    "\u01b6\232\u0263\303\u01b4\311\u01bb\313\u01af\323\u01b1\326\u01ad" +
    "\341\u01bc\356\u01ae\357\u01b0\u0104\u01b3\u0111\u01b7\u0124\u01b2\u0125" +
    "\u01b8\u0132\u01b5\u0163\u01b9\u0171\u0264\001\002\000\054\002\uff55" +
    "\006\uff55\015\uff55\034\uff55\043\uff55\056\uff55\060\uff55\067" +
    "\uff55\072\uff55\076\uff55\131\uff55\212\uff55\216\uff55\225\uff55" +
    "\232\uff55\251\uff55\257\uff55\346\uff55\u014c\uff55\u014d\uff55\u0153" +
    "\uff55\001\002\000\026\004\u01f5\025\u01f8\036\u01f6\107\u01fc" +
    "\127\u01ff\136\u01f4\150\u01f9\175\u01fb\255\u01f3\u013e\030\001" +
    "\002\000\006\u013e\030\u0152\u0203\001\002\000\010\127\u0249" +
    "\136\u0247\u0152\u0248\001\002\000\006\u013e\030\u0152\u023f\001" +
    "\002\000\004\036\u023c\001\002\000\004\u013e\030\001\002" +
    "\000\052\002\uffbf\006\uffbf\015\uffbf\034\uffbf\043\uffbf\056" +
    "\uffbf\060\uffbf\067\uffbf\072\uffbf\076\uffbf\131\uffbf\212\uffbf" +
    "\216\uffbf\225\uffbf\232\uffbf\251\uffbf\257\uffbf\346\uffbf\u014c" +
    "\uffbf\u014d\u0201\001\002\000\004\u0152\u0222\001\002\000\004" +
    "\151\u021e\001\002\000\054\002\uff5d\006\uff5d\015\uff5d\034" +
    "\uff5d\043\uff5d\056\uff5d\060\uff5d\067\uff5d\072\uff5d\076\uff5d" +
    "\131\uff5d\212\uff5d\216\uff5d\225\uff5d\232\uff5d\251\uff5d\257" +
    "\uff5d\346\uff5d\u014c\uff5d\u014d\uff5d\u0153\uff5d\001\002\000\006" +
    "\136\u0216\u0152\u0217\001\002\000\006\136\u0209\u0152\u020a\001" +
    "\002\000\030\004\u01f5\025\u01f8\036\u01f6\107\u01fc\127\u01ff" +
    "\136\u01f4\150\u01f9\175\u01fb\255\u01f3\u013e\030\u0152\u01fe\001" +
    "\002\000\026\004\u01f5\025\u01f8\036\u01f6\107\u01fc\127\u01ff" +
    "\136\u01f4\150\u01f9\175\u01fb\255\u01f3\u013e\030\001\002\000" +
    "\004\u0152\u0203\001\002\000\052\002\uffc2\006\uffc2\015\uffc2" +
    "\034\uffc2\043\uffc2\056\uffc2\060\uffc2\067\uffc2\072\uffc2\076" +
    "\uffc2\131\uffc2\212\uffc2\216\uffc2\225\uffc2\232\uffc2\251\uffc2" +
    "\257\uffc2\346\uffc2\u014c\uffc2\u014d\u0201\001\002\000\026\004" +
    "\u01f5\025\u01f8\036\u01f6\107\u01fc\127\u01ff\136\u01f4\150\u01f9" +
    "\175\u01fb\255\u01f3\u013e\030\001\002\000\054\002\uff5c\006" +
    "\uff5c\015\uff5c\034\uff5c\043\uff5c\056\uff5c\060\uff5c\067\uff5c" +
    "\072\uff5c\076\uff5c\131\uff5c\212\uff5c\216\uff5c\225\uff5c\232" +
    "\uff5c\251\uff5c\257\uff5c\346\uff5c\u014c\uff5c\u014d\uff5c\u0153\uff5c" +
    "\001\002\000\004\u013e\030\001\002\000\004\u0153\u0205\001" +
    "\002\000\056\002\uff52\006\uff52\015\uff52\034\uff52\043\uff52" +
    "\056\uff52\060\uff52\067\uff52\072\uff52\076\uff52\131\uff52\212" +
    "\uff52\216\uff52\225\uff52\232\uff52\251\uff52\257\uff52\346\uff52" +
    "\u013e\030\u014c\uff52\u014d\uff52\u0153\uff52\001\002\000\054\002" +
    "\uff4f\006\uff4f\015\uff4f\034\uff4f\043\uff4f\056\uff4f\060\uff4f" +
    "\067\uff4f\072\uff4f\076\uff4f\131\uff4f\212\uff4f\216\uff4f\225" +
    "\uff4f\232\uff4f\251\uff4f\257\uff4f\346\uff4f\u014c\uff4f\u014d\uff4f" +
    "\u0153\uff4f\001\002\000\006\u014d\u0201\u0153\u0208\001\002\000" +
    "\050\002\uffc0\006\uffc0\015\uffc0\034\uffc0\043\uffc0\056\uffc0" +
    "\060\uffc0\067\uffc0\072\uffc0\076\uffc0\131\uffc0\212\uffc0\216" +
    "\uffc0\225\uffc0\232\uffc0\251\uffc0\257\uffc0\346\uffc0\u014c\uffc0" +
    "\001\002\000\004\u0152\u020d\001\002\000\004\u013e\030\001" +
    "\002\000\004\u0153\u020c\001\002\000\054\002\uff4a\006\uff4a" +
    "\015\uff4a\034\uff4a\043\uff4a\056\uff4a\060\uff4a\067\uff4a\072" +
    "\uff4a\076\uff4a\131\uff4a\212\uff4a\216\uff4a\225\uff4a\232\uff4a" +
    "\251\uff4a\257\uff4a\346\uff4a\u014c\uff4a\u014d\uff4a\u0153\uff4a\001" +
    "\002\000\004\u013e\030\001\002\000\004\u0153\u020f\001\002" +
    "\000\056\002\uff49\006\uff49\015\uff49\034\uff49\043\uff49\056" +
    "\uff49\060\uff49\067\uff49\072\uff49\076\uff49\131\uff49\206\u0210" +
    "\212\uff49\216\uff49\225\uff49\232\uff49\251\uff49\257\uff49\346" +
    "\uff49\u014c\uff49\u014d\uff49\u0153\uff49\001\002\000\004\u013e\030" +
    "\001\002\000\056\002\uffaa\006\uffaa\015\uffaa\034\uffaa\043" +
    "\uffaa\056\uffaa\060\uffaa\067\uffaa\072\uffaa\076\uffaa\131\uffaa" +
    "\212\uffaa\216\uffaa\225\uffaa\232\uffaa\251\uffaa\257\uffaa\346" +
    "\uffaa\u014c\uffaa\u014d\uffaa\u0152\u0212\u0153\uffaa\001\002\000\004" +
    "\u013e\030\001\002\000\054\002\uff48\006\uff48\015\uff48\034" +
    "\uff48\043\uff48\056\uff48\060\uff48\067\uff48\072\uff48\076\uff48" +
    "\131\uff48\212\uff48\216\uff48\225\uff48\232\uff48\251\uff48\257" +
    "\uff48\346\uff48\u014c\uff48\u014d\uff48\u0153\uff48\001\002\000\004" +
    "\u0153\u0215\001\002\000\102\002\uffa9\006\uffa9\015\uffa9\025" +
    "\uffa9\034\uffa9\036\uffa9\043\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\067\uffa9\072\uffa9\076\uffa9\107\uffa9\122\uffa9\127\uffa9\131" +
    "\uffa9\150\uffa9\151\uffa9\175\uffa9\206\uffa9\212\uffa9\216\uffa9" +
    "\225\uffa9\232\uffa9\251\uffa9\255\uffa9\257\uffa9\346\uffa9\u014c" +
    "\uffa9\u014d\uffa9\u0153\uffa9\001\002\000\004\u0152\u021a\001\002" +
    "\000\004\u013e\030\001\002\000\004\u0153\u0219\001\002\000" +
    "\054\002\uff54\006\uff54\015\uff54\034\uff54\043\uff54\056\uff54" +
    "\060\uff54\067\uff54\072\uff54\076\uff54\131\uff54\212\uff54\216" +
    "\uff54\225\uff54\232\uff54\251\uff54\257\uff54\346\uff54\u014c\uff54" +
    "\u014d\uff54\u0153\uff54\001\002\000\004\u013e\030\001\002\000" +
    "\004\u0153\u021c\001\002\000\056\002\uff53\006\uff53\015\uff53" +
    "\034\uff53\043\uff53\056\uff53\060\uff53\067\uff53\072\uff53\076" +
    "\uff53\131\uff53\212\uff53\216\uff53\225\uff53\232\uff53\251\uff53" +
    "\257\uff53\346\uff53\u013e\030\u014c\uff53\u014d\uff53\u0153\uff53\001" +
    "\002\000\054\002\uff50\006\uff50\015\uff50\034\uff50\043\uff50" +
    "\056\uff50\060\uff50\067\uff50\072\uff50\076\uff50\131\uff50\212" +
    "\uff50\216\uff50\225\uff50\232\uff50\251\uff50\257\uff50\346\uff50" +
    "\u014c\uff50\u014d\uff50\u0153\uff50\001\002\000\004\u0152\u021f\001" +
    "\002\000\004\u013e\030\001\002\000\004\u0153\u0221\001\002" +
    "\000\054\002\uff44\006\uff44\015\uff44\034\uff44\043\uff44\056" +
    "\uff44\060\uff44\067\uff44\072\uff44\076\uff44\131\uff44\212\uff44" +
    "\216\uff44\225\uff44\232\uff44\251\uff44\257\uff44\346\uff44\u014c" +
    "\uff44\u014d\uff44\u0153\uff44\001\002\000\040\024\167\031\157" +
    "\042\175\100\170\150\162\152\165\307\163\u013a\060\u013b" +
    "\065\u013e\030\u013f\063\u0152\161\u0155\064\u015c\046\u0172\171" +
    "\001\002\000\004\u0153\u0224\001\002\000\054\002\uff43\006" +
    "\uff43\015\uff43\034\uff43\043\uff43\056\uff43\060\uff43\067\uff43" +
    "\072\uff43\076\uff43\131\uff43\212\uff43\216\uff43\225\uff43\232" +
    "\uff43\251\uff43\257\uff43\346\uff43\u014c\uff43\u014d\uff43\u0153\uff43" +
    "\001\002\000\010\107\u0227\175\u0228\255\u0229\001\002\000" +
    "\054\002\uffb0\006\uffb0\015\uffb0\034\uffb0\043\uffb0\056\uffb0" +
    "\060\uffb0\067\uffb0\072\uffb0\076\uffb0\131\uffb0\212\uffb0\216" +
    "\uffb0\225\uffb0\232\uffb0\251\uffb0\257\uffb0\346\uffb0\u014c\uffb0" +
    "\u014d\uffb0\u0153\uffb0\001\002\000\004\136\u0231\001\002\000" +
    "\004\136\u022d\001\002\000\004\u0152\u022a\001\002\000\004" +
    "\u013e\030\001\002\000\004\u0153\u022c\001\002\000\054\002" +
    "\uffad\006\uffad\015\uffad\034\uffad\043\uffad\056\uffad\060\uffad" +
    "\067\uffad\072\uffad\076\uffad\131\uffad\212\uffad\216\uffad\225" +
    "\uffad\232\uffad\251\uffad\257\uffad\346\uffad\u014c\uffad\u014d\uffad" +
    "\u0153\uffad\001\002\000\004\u0152\u022e\001\002\000\004\u013e" +
    "\030\001\002\000\004\u0153\u0230\001\002\000\054\002\uffae" +
    "\006\uffae\015\uffae\034\uffae\043\uffae\056\uffae\060\uffae\067" +
    "\uffae\072\uffae\076\uffae\131\uffae\212\uffae\216\uffae\225\uffae" +
    "\232\uffae\251\uffae\257\uffae\346\uffae\u014c\uffae\u014d\uffae\u0153" +
    "\uffae\001\002\000\006\u013e\030\u0152\u0232\001\002\000\004" +
    "\u013e\030\001\002\000\004\206\u0234\001\002\000\004\u013e" +
    "\030\001\002\000\056\002\uffaa\006\uffaa\015\uffaa\034\uffaa" +
    "\043\uffaa\056\uffaa\060\uffaa\067\uffaa\072\uffaa\076\uffaa\131" +
    "\uffaa\212\uffaa\216\uffaa\225\uffaa\232\uffaa\251\uffaa\257\uffaa" +
    "\346\uffaa\u014c\uffaa\u014d\uffaa\u0152\u0212\u0153\uffaa\001\002\000" +
    "\054\002\uffab\006\uffab\015\uffab\034\uffab\043\uffab\056\uffab" +
    "\060\uffab\067\uffab\072\uffab\076\uffab\131\uffab\212\uffab\216" +
    "\uffab\225\uffab\232\uffab\251\uffab\257\uffab\346\uffab\u014c\uffab" +
    "\u014d\uffab\u0153\uffab\001\002\000\004\u0153\u0238\001\002\000" +
    "\004\206\u0239\001\002\000\004\u013e\030\001\002\000\056" +
    "\002\uffaa\006\uffaa\015\uffaa\034\uffaa\043\uffaa\056\uffaa\060" +
    "\uffaa\067\uffaa\072\uffaa\076\uffaa\131\uffaa\212\uffaa\216\uffaa" +
    "\225\uffaa\232\uffaa\251\uffaa\257\uffaa\346\uffaa\u014c\uffaa\u014d" +
    "\uffaa\u0152\u0212\u0153\uffaa\001\002\000\054\002\uffac\006\uffac" +
    "\015\uffac\034\uffac\043\uffac\056\uffac\060\uffac\067\uffac\072" +
    "\uffac\076\uffac\131\uffac\212\uffac\216\uffac\225\uffac\232\uffac" +
    "\251\uffac\257\uffac\346\uffac\u014c\uffac\u014d\uffac\u0153\uffac\001" +
    "\002\000\004\u013e\030\001\002\000\010\107\u0227\175\u0228" +
    "\255\u0229\001\002\000\054\002\uffaf\006\uffaf\015\uffaf\034" +
    "\uffaf\043\uffaf\056\uffaf\060\uffaf\067\uffaf\072\uffaf\076\uffaf" +
    "\131\uffaf\212\uffaf\216\uffaf\225\uffaf\232\uffaf\251\uffaf\257" +
    "\uffaf\346\uffaf\u014c\uffaf\u014d\uffaf\u0153\uffaf\001\002\000\004" +
    "\u013e\030\001\002\000\004\u0152\u0241\001\002\000\004\u013e" +
    "\030\001\002\000\004\u0153\u0243\001\002\000\054\002\uff4d" +
    "\006\uff4d\015\uff4d\034\uff4d\043\uff4d\056\uff4d\060\uff4d\067" +
    "\uff4d\072\uff4d\076\uff4d\131\uff4d\212\uff4d\216\uff4d\225\uff4d" +
    "\232\uff4d\251\uff4d\257\uff4d\346\uff4d\u014c\uff4d\u014d\uff4d\u0153" +
    "\uff4d\001\002\000\004\u0153\u0245\001\002\000\056\002\uff51" +
    "\006\uff51\015\uff51\034\uff51\043\uff51\056\uff51\060\uff51\067" +
    "\uff51\072\uff51\076\uff51\131\uff51\212\uff51\216\uff51\225\uff51" +
    "\232\uff51\251\uff51\257\uff51\346\uff51\u013e\030\u014c\uff51\u014d" +
    "\uff51\u0153\uff51\001\002\000\054\002\uff4e\006\uff4e\015\uff4e" +
    "\034\uff4e\043\uff4e\056\uff4e\060\uff4e\067\uff4e\072\uff4e\076" +
    "\uff4e\131\uff4e\212\uff4e\216\uff4e\225\uff4e\232\uff4e\251\uff4e" +
    "\257\uff4e\346\uff4e\u014c\uff4e\u014d\uff4e\u0153\uff4e\001\002\000" +
    "\006\u013e\030\u0152\u0250\001\002\000\004\u013e\030\001\002" +
    "\000\004\u0152\u024a\001\002\000\004\u013e\030\001\002\000" +
    "\004\u0153\u024c\001\002\000\056\002\uff4b\006\uff4b\015\uff4b" +
    "\034\uff4b\043\uff4b\056\uff4b\060\uff4b\067\uff4b\072\uff4b\076" +
    "\uff4b\131\uff4b\212\uff4b\216\uff4b\225\uff4b\232\uff4b\251\uff4b" +
    "\257\uff4b\346\uff4b\u013e\030\u014c\uff4b\u014d\uff4b\u0153\uff4b\001" +
    "\002\000\054\002\uff4c\006\uff4c\015\uff4c\034\uff4c\043\uff4c" +
    "\056\uff4c\060\uff4c\067\uff4c\072\uff4c\076\uff4c\131\uff4c\212" +
    "\uff4c\216\uff4c\225\uff4c\232\uff4c\251\uff4c\257\uff4c\346\uff4c" +
    "\u014c\uff4c\u014d\uff4c\u0153\uff4c\001\002\000\004\u0153\u024f\001" +
    "\002\000\054\002\uff47\006\uff47\015\uff47\034\uff47\043\uff47" +
    "\056\uff47\060\uff47\067\uff47\072\uff47\076\uff47\131\uff47\212" +
    "\uff47\216\uff47\225\uff47\232\uff47\251\uff47\257\uff47\346\uff47" +
    "\u014c\uff47\u014d\uff47\u0153\uff47\001\002\000\004\u013e\030\001" +
    "\002\000\004\u0152\u0252\001\002\000\004\u013e\030\001\002" +
    "\000\004\u0153\u0254\001\002\000\054\002\uff45\006\uff45\015" +
    "\uff45\034\uff45\043\uff45\056\uff45\060\uff45\067\uff45\072\uff45" +
    "\076\uff45\131\uff45\212\uff45\216\uff45\225\uff45\232\uff45\251" +
    "\uff45\257\uff45\346\uff45\u014c\uff45\u014d\uff45\u0153\uff45\001\002" +
    "\000\004\u0153\u0256\001\002\000\054\002\uff46\006\uff46\015" +
    "\uff46\034\uff46\043\uff46\056\uff46\060\uff46\067\uff46\072\uff46" +
    "\076\uff46\131\uff46\212\uff46\216\uff46\225\uff46\232\uff46\251" +
    "\uff46\257\uff46\346\uff46\u014c\uff46\u014d\uff46\u0153\uff46\001\002" +
    "\000\006\u014d\127\u0152\u0258\001\002\000\004\u013e\030\001" +
    "\002\000\012\012\uff60\062\uff60\u014d\uff60\u0153\uff60\001\002" +
    "\000\006\u014d\u025e\u0153\u025d\001\002\000\012\012\u011f\062" +
    "\u0120\u014d\uff77\u0153\uff77\001\002\000\012\012\uff5e\062\uff5e" +
    "\u014d\uff5e\u0153\uff5e\001\002\000\050\002\uffc1\006\uffc1\015" +
    "\uffc1\034\uffc1\043\uffc1\056\uffc1\060\uffc1\067\uffc1\072\uffc1" +
    "\076\uffc1\131\uffc1\212\uffc1\216\uffc1\225\uffc1\232\uffc1\251" +
    "\uffc1\257\uffc1\346\uffc1\u014c\uffc1\001\002\000\004\u013e\030" +
    "\001\002\000\012\012\uff5f\062\uff5f\u014d\uff5f\u0153\uff5f\001" +
    "\002\000\006\u014d\u0201\u0153\u0261\001\002\000\050\002\uffbe" +
    "\006\uffbe\015\uffbe\034\uffbe\043\uffbe\056\uffbe\060\uffbe\067" +
    "\uffbe\072\uffbe\076\uffbe\131\uffbe\212\uffbe\216\uffbe\225\uffbe" +
    "\232\uffbe\251\uffbe\257\uffbe\346\uffbe\u014c\uffbe\001\002\000" +
    "\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064" +
    "\u015c\046\001\002\000\004\u0152\u0296\001\002\000\004\u0152" +
    "\u0292\001\002\000\102\002\uff31\006\uff31\015\uff31\025\u0270" +
    "\034\uff31\043\uff31\056\uff31\057\u026c\060\uff31\067\uff31\072" +
    "\uff31\076\uff31\107\u0274\122\u0267\127\u0269\131\uff31\150\u026f" +
    "\151\u026b\175\u0273\206\u0266\212\uff31\216\uff31\225\uff31\232" +
    "\uff31\251\uff31\255\u026a\257\uff31\346\uff31\u014c\uff31\u014d\uff31" +
    "\u0152\u0268\u0153\uff31\001\002\000\004\u013e\030\001\002\000" +
    "\076\002\uff2a\006\uff2a\015\uff2a\025\uff2a\034\uff2a\043\uff2a" +
    "\056\uff2a\060\uff2a\067\uff2a\072\uff2a\076\uff2a\107\uff2a\127" +
    "\uff2a\131\uff2a\150\uff2a\151\uff2a\175\uff2a\206\uff2a\212\uff2a" +
    "\216\uff2a\225\uff2a\232\uff2a\251\uff2a\255\uff2a\257\uff2a\346" +
    "\uff2a\u014c\uff2a\u014d\uff2a\u0152\u028b\u0153\uff2a\001\002\000\004" +
    "\u013f\u0284\001\002\000\102\002\uff21\006\uff21\015\uff21\025" +
    "\uff21\034\uff21\036\uff21\043\uff21\056\uff21\057\uff21\060\uff21" +
    "\067\uff21\072\uff21\076\uff21\107\uff21\122\uff21\127\uff21\131" +
    "\uff21\150\uff21\151\uff21\175\uff21\206\uff21\212\uff21\216\uff21" +
    "\225\uff21\232\uff21\251\uff21\255\uff21\257\uff21\346\uff21\u014c" +
    "\uff21\u014d\uff21\u0153\uff21\001\002\000\104\002\uff20\006\uff20" +
    "\015\uff20\025\uff20\034\uff20\036\uff20\043\uff20\056\uff20\057" +
    "\uff20\060\uff20\067\uff20\072\uff20\076\uff20\107\uff20\122\uff20" +
    "\127\uff20\131\uff20\136\u0283\150\uff20\151\uff20\175\uff20\206" +
    "\uff20\212\uff20\216\uff20\225\uff20\232\uff20\251\uff20\255\uff20" +
    "\257\uff20\346\uff20\u014c\uff20\u014d\uff20\u0153\uff20\001\002\000" +
    "\102\002\uff1d\006\uff1d\015\uff1d\025\uff1d\034\uff1d\036\uff1d" +
    "\043\uff1d\056\uff1d\057\uff1d\060\uff1d\067\uff1d\072\uff1d\076" +
    "\uff1d\107\uff1d\122\uff1d\127\uff1d\131\uff1d\150\uff1d\151\uff1d" +
    "\175\uff1d\206\uff1d\212\uff1d\216\uff1d\225\uff1d\232\uff1d\251" +
    "\uff1d\255\uff1d\257\uff1d\346\uff1d\u014c\uff1d\u014d\uff1d\u0153\uff1d" +
    "\001\002\000\022\151\u0281\u013a\060\u013b\065\u013e\030\u013f" +
    "\063\u0152\052\u0155\064\u015c\046\001\002\000\102\002\uff2e" +
    "\006\uff2e\015\uff2e\025\u0270\034\uff2e\036\u0278\043\uff2e\056" +
    "\uff2e\057\u026c\060\uff2e\067\uff2e\072\uff2e\076\uff2e\107\u0274" +
    "\122\u0267\127\u0269\131\uff2e\150\u026f\151\u026b\175\u0273\206" +
    "\u0266\212\uff2e\216\uff2e\225\uff2e\232\uff2e\251\uff2e\255\u026a" +
    "\257\uff2e\346\uff2e\u014c\uff2e\u014d\uff2e\u0153\uff2e\001\002\000" +
    "\054\002\uff5b\006\uff5b\015\uff5b\034\uff5b\043\uff5b\056\uff5b" +
    "\060\uff5b\067\uff5b\072\uff5b\076\uff5b\131\uff5b\212\uff5b\216" +
    "\uff5b\225\uff5b\232\uff5b\251\uff5b\257\uff5b\346\uff5b\u014c\uff5b" +
    "\u014d\uff5b\u0153\uff5b\001\002\000\004\151\u027f\001\002\000" +
    "\004\u0152\u027c\001\002\000\074\002\uff2d\006\uff2d\015\uff2d" +
    "\025\u0270\034\uff2d\043\uff2d\056\uff2d\060\uff2d\067\uff2d\072" +
    "\uff2d\076\uff2d\107\u0274\127\u0269\131\uff2d\150\u026f\151\u026b" +
    "\175\u0273\206\u0266\212\uff2d\216\uff2d\225\uff2d\232\uff2d\251" +
    "\uff2d\255\u026a\257\uff2d\346\uff2d\u014c\uff2d\u014d\uff2d\u0153\uff2d" +
    "\001\002\000\102\002\uff28\006\uff28\015\uff28\025\uff28\034" +
    "\uff28\036\uff28\043\uff28\056\uff28\057\uff28\060\uff28\067\uff28" +
    "\072\uff28\076\uff28\107\uff28\122\uff28\127\uff28\131\uff28\150" +
    "\uff28\151\uff28\175\uff28\206\uff28\212\uff28\216\uff28\225\uff28" +
    "\232\uff28\251\uff28\255\uff28\257\uff28\346\uff28\u014c\uff28\u014d" +
    "\uff28\u0153\uff28\001\002\000\104\002\uff25\006\uff25\015\uff25" +
    "\025\uff25\034\uff25\036\uff25\043\uff25\056\uff25\057\uff25\060" +
    "\uff25\067\uff25\072\uff25\076\uff25\107\uff25\122\uff25\127\uff25" +
    "\131\uff25\136\u0276\150\uff25\151\uff25\175\uff25\206\uff25\212" +
    "\uff25\216\uff25\225\uff25\232\uff25\251\uff25\255\uff25\257\uff25" +
    "\346\uff25\u014c\uff25\u014d\uff25\u0153\uff25\001\002\000\104\002" +
    "\uff23\006\uff23\015\uff23\025\uff23\034\uff23\036\uff23\043\uff23" +
    "\056\uff23\057\uff23\060\uff23\067\uff23\072\uff23\076\uff23\107" +
    "\uff23\122\uff23\127\uff23\131\uff23\136\u0275\150\uff23\151\uff23" +
    "\175\uff23\206\uff23\212\uff23\216\uff23\225\uff23\232\uff23\251" +
    "\uff23\255\uff23\257\uff23\346\uff23\u014c\uff23\u014d\uff23\u0153\uff23" +
    "\001\002\000\102\002\uff22\006\uff22\015\uff22\025\uff22\034" +
    "\uff22\036\uff22\043\uff22\056\uff22\057\uff22\060\uff22\067\uff22" +
    "\072\uff22\076\uff22\107\uff22\122\uff22\127\uff22\131\uff22\150" +
    "\uff22\151\uff22\175\uff22\206\uff22\212\uff22\216\uff22\225\uff22" +
    "\232\uff22\251\uff22\255\uff22\257\uff22\346\uff22\u014c\uff22\u014d" +
    "\uff22\u0153\uff22\001\002\000\102\002\uff24\006\uff24\015\uff24" +
    "\025\uff24\034\uff24\036\uff24\043\uff24\056\uff24\057\uff24\060" +
    "\uff24\067\uff24\072\uff24\076\uff24\107\uff24\122\uff24\127\uff24" +
    "\131\uff24\150\uff24\151\uff24\175\uff24\206\uff24\212\uff24\216" +
    "\uff24\225\uff24\232\uff24\251\uff24\255\uff24\257\uff24\346\uff24" +
    "\u014c\uff24\u014d\uff24\u0153\uff24\001\002\000\076\002\uff30\006" +
    "\uff30\015\uff30\025\u0270\034\uff30\036\u0278\043\uff30\056\uff30" +
    "\060\uff30\067\uff30\072\uff30\076\uff30\107\u0274\127\u0269\131" +
    "\uff30\150\u026f\151\u026b\175\u0273\206\u0266\212\uff30\216\uff30" +
    "\225\uff30\232\uff30\251\uff30\255\u026a\257\uff30\346\uff30\u014c" +
    "\uff30\u014d\uff30\u0153\uff30\001\002\000\004\u013e\030\001\002" +
    "\000\102\002\uff27\006\uff27\015\uff27\025\uff27\034\uff27\036" +
    "\uff27\043\uff27\056\uff27\057\uff27\060\uff27\067\uff27\072\uff27" +
    "\076\uff27\107\uff27\122\uff27\127\uff27\131\uff27\150\uff27\151" +
    "\uff27\175\uff27\206\uff27\212\uff27\216\uff27\225\uff27\232\uff27" +
    "\251\uff27\255\uff27\257\uff27\346\uff27\u014c\uff27\u014d\uff27\u0153" +
    "\uff27\001\002\000\022\025\u0270\107\u0274\127\u0269\150\u026f" +
    "\151\u026b\175\u0273\206\u0266\255\u026a\001\002\000\102\002" +
    "\uff26\006\uff26\015\uff26\025\uff26\034\uff26\036\uff26\043\uff26" +
    "\056\uff26\057\uff26\060\uff26\067\uff26\072\uff26\076\uff26\107" +
    "\uff26\122\uff26\127\uff26\131\uff26\150\uff26\151\uff26\175\uff26" +
    "\206\uff26\212\uff26\216\uff26\225\uff26\232\uff26\251\uff26\255" +
    "\uff26\257\uff26\346\uff26\u014c\uff26\u014d\uff26\u0153\uff26\001\002" +
    "\000\040\024\167\031\157\042\175\100\170\150\162\152" +
    "\165\307\163\u013a\060\u013b\065\u013e\030\u013f\063\u0152\161" +
    "\u0155\064\u015c\046\u0172\171\001\002\000\004\u0153\u027e\001" +
    "\002\000\102\002\uff1c\006\uff1c\015\uff1c\025\uff1c\034\uff1c" +
    "\036\uff1c\043\uff1c\056\uff1c\057\uff1c\060\uff1c\067\uff1c\072" +
    "\uff1c\076\uff1c\107\uff1c\122\uff1c\127\uff1c\131\uff1c\150\uff1c" +
    "\151\uff1c\175\uff1c\206\uff1c\212\uff1c\216\uff1c\225\uff1c\232" +
    "\uff1c\251\uff1c\255\uff1c\257\uff1c\346\uff1c\u014c\uff1c\u014d\uff1c" +
    "\u0153\uff1c\001\002\000\102\002\uff1e\006\uff1e\015\uff1e\025" +
    "\uff1e\034\uff1e\036\uff1e\043\uff1e\056\uff1e\057\uff1e\060\uff1e" +
    "\067\uff1e\072\uff1e\076\uff1e\107\uff1e\122\uff1e\127\uff1e\131" +
    "\uff1e\150\uff1e\151\uff1e\175\uff1e\206\uff1e\212\uff1e\216\uff1e" +
    "\225\uff1e\232\uff1e\251\uff1e\255\uff1e\257\uff1e\346\uff1e\u014c" +
    "\uff1e\u014d\uff1e\u0153\uff1e\001\002\000\054\002\uff2f\006\uff2f" +
    "\015\uff2f\034\uff2f\043\uff2f\056\uff2f\060\uff2f\067\uff2f\072" +
    "\uff2f\076\uff2f\131\uff2f\212\uff2f\216\uff2f\225\uff2f\232\uff2f" +
    "\251\uff2f\257\uff2f\346\uff2f\u014c\uff2f\u014d\uff2f\u0153\uff2f\001" +
    "\002\000\074\002\uff2c\006\uff2c\015\uff2c\025\uff2c\034\uff2c" +
    "\043\uff2c\056\uff2c\060\uff2c\067\uff2c\072\uff2c\076\uff2c\107" +
    "\uff2c\127\uff2c\131\uff2c\150\uff2c\151\uff2c\175\uff2c\206\uff2c" +
    "\212\uff2c\216\uff2c\225\uff2c\232\uff2c\251\uff2c\255\uff2c\257" +
    "\uff2c\346\uff2c\u014c\uff2c\u014d\uff2c\u0153\uff2c\001\002\000\100" +
    "\002\uff2b\006\uff2b\015\uff2b\025\uff2b\034\uff2b\043\uff2b\056" +
    "\uff2b\060\uff2b\067\uff2b\072\uff2b\076\uff2b\107\uff2b\127\uff2b" +
    "\131\uff2b\150\uff2b\151\uff2b\175\uff2b\206\uff2b\212\uff2b\216" +
    "\uff2b\225\uff2b\232\uff2b\251\uff2b\255\uff2b\257\uff2b\346\uff2b" +
    "\u013a\102\u013b\101\u014c\uff2b\u014d\uff2b\u0153\uff2b\001\002\000" +
    "\102\002\uff1f\006\uff1f\015\uff1f\025\uff1f\034\uff1f\036\uff1f" +
    "\043\uff1f\056\uff1f\057\uff1f\060\uff1f\067\uff1f\072\uff1f\076" +
    "\uff1f\107\uff1f\122\uff1f\127\uff1f\131\uff1f\150\uff1f\151\uff1f" +
    "\175\uff1f\206\uff1f\212\uff1f\216\uff1f\225\uff1f\232\uff1f\251" +
    "\uff1f\255\uff1f\257\uff1f\346\uff1f\u014c\uff1f\u014d\uff1f\u0153\uff1f" +
    "\001\002\000\006\u014d\u0286\u0153\u0285\001\002\000\100\002" +
    "\uff31\006\uff31\015\uff31\025\u0270\034\uff31\043\uff31\056\uff31" +
    "\057\u026c\060\uff31\067\uff31\072\uff31\076\uff31\107\u0274\122" +
    "\u0267\127\u0269\131\uff31\150\u026f\151\u026b\175\u0273\206\u0266" +
    "\212\uff31\216\uff31\225\uff31\232\uff31\251\uff31\255\u026a\257" +
    "\uff31\346\uff31\u014c\uff31\u014d\uff31\u0153\uff31\001\002\000\004" +
    "\u013f\u0287\001\002\000\004\u0153\u0288\001\002\000\100\002" +
    "\uff31\006\uff31\015\uff31\025\u0270\034\uff31\043\uff31\056\uff31" +
    "\057\u026c\060\uff31\067\uff31\072\uff31\076\uff31\107\u0274\122" +
    "\u0267\127\u0269\131\uff31\150\u026f\151\u026b\175\u0273\206\u0266" +
    "\212\uff31\216\uff31\225\uff31\232\uff31\251\uff31\255\u026a\257" +
    "\uff31\346\uff31\u014c\uff31\u014d\uff31\u0153\uff31\001\002\000\054" +
    "\002\uff57\006\uff57\015\uff57\034\uff57\043\uff57\056\uff57\060" +
    "\uff57\067\uff57\072\uff57\076\uff57\131\uff57\212\uff57\216\uff57" +
    "\225\uff57\232\uff57\251\uff57\257\uff57\346\uff57\u014c\uff57\u014d" +
    "\uff57\u0153\uff57\001\002\000\054\002\uff58\006\uff58\015\uff58" +
    "\034\uff58\043\uff58\056\uff58\060\uff58\067\uff58\072\uff58\076" +
    "\uff58\131\uff58\212\uff58\216\uff58\225\uff58\232\uff58\251\uff58" +
    "\257\uff58\346\uff58\u014c\uff58\u014d\uff58\u0153\uff58\001\002\000" +
    "\004\u013f\u028c\001\002\000\004\u014d\u028d\001\002\000\004" +
    "\u013f\u028e\001\002\000\004\u0153\u028f\001\002\000\074\002" +
    "\uff29\006\uff29\015\uff29\025\uff29\034\uff29\043\uff29\056\uff29" +
    "\060\uff29\067\uff29\072\uff29\076\uff29\107\uff29\127\uff29\131" +
    "\uff29\150\uff29\151\uff29\175\uff29\206\uff29\212\uff29\216\uff29" +
    "\225\uff29\232\uff29\251\uff29\255\uff29\257\uff29\346\uff29\u014c" +
    "\uff29\u014d\uff29\u0153\uff29\001\002\000\104\002\uffaa\006\uffaa" +
    "\015\uffaa\025\uffaa\034\uffaa\036\uffaa\043\uffaa\056\uffaa\057" +
    "\uffaa\060\uffaa\067\uffaa\072\uffaa\076\uffaa\107\uffaa\122\uffaa" +
    "\127\uffaa\131\uffaa\150\uffaa\151\uffaa\175\uffaa\206\uffaa\212" +
    "\uffaa\216\uffaa\225\uffaa\232\uffaa\251\uffaa\255\uffaa\257\uffaa" +
    "\346\uffaa\u014c\uffaa\u014d\uffaa\u0152\u0212\u0153\uffaa\001\002\000" +
    "\102\002\uff1b\006\uff1b\015\uff1b\025\uff1b\034\uff1b\036\uff1b" +
    "\043\uff1b\056\uff1b\057\uff1b\060\uff1b\067\uff1b\072\uff1b\076" +
    "\uff1b\107\uff1b\122\uff1b\127\uff1b\131\uff1b\150\uff1b\151\uff1b" +
    "\175\uff1b\206\uff1b\212\uff1b\216\uff1b\225\uff1b\232\uff1b\251" +
    "\uff1b\255\uff1b\257\uff1b\346\uff1b\u014c\uff1b\u014d\uff1b\u0153\uff1b" +
    "\001\002\000\022\151\306\u013a\060\u013b\065\u013e\030\u013f" +
    "\063\u0152\052\u0155\064\u015c\046\001\002\000\006\u014d\310" +
    "\u0153\u0294\001\002\000\100\002\uff31\006\uff31\015\uff31\025" +
    "\u0270\034\uff31\043\uff31\056\uff31\057\u026c\060\uff31\067\uff31" +
    "\072\uff31\076\uff31\107\u0274\122\u0267\127\u0269\131\uff31\150" +
    "\u026f\151\u026b\175\u0273\206\u0266\212\uff31\216\uff31\225\uff31" +
    "\232\uff31\251\uff31\255\u026a\257\uff31\346\uff31\u014c\uff31\u014d" +
    "\uff31\u0153\uff31\001\002\000\054\002\uff5a\006\uff5a\015\uff5a" +
    "\034\uff5a\043\uff5a\056\uff5a\060\uff5a\067\uff5a\072\uff5a\076" +
    "\uff5a\131\uff5a\212\uff5a\216\uff5a\225\uff5a\232\uff5a\251\uff5a" +
    "\257\uff5a\346\uff5a\u014c\uff5a\u014d\uff5a\u0153\uff5a\001\002\000" +
    "\022\151\306\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052" +
    "\u0155\064\u015c\046\001\002\000\006\u014d\310\u0153\u0298\001" +
    "\002\000\100\002\uff31\006\uff31\015\uff31\025\u0270\034\uff31" +
    "\043\uff31\056\uff31\057\u026c\060\uff31\067\uff31\072\uff31\076" +
    "\uff31\107\u0274\122\u0267\127\u0269\131\uff31\150\u026f\151\u026b" +
    "\175\u0273\206\u0266\212\uff31\216\uff31\225\uff31\232\uff31\251" +
    "\uff31\255\u026a\257\uff31\346\uff31\u014c\uff31\u014d\uff31\u0153\uff31" +
    "\001\002\000\054\002\uff59\006\uff59\015\uff59\034\uff59\043" +
    "\uff59\056\uff59\060\uff59\067\uff59\072\uff59\076\uff59\131\uff59" +
    "\212\uff59\216\uff59\225\uff59\232\uff59\251\uff59\257\uff59\346" +
    "\uff59\u014c\uff59\u014d\uff59\u0153\uff59\001\002\000\060\002\uff56" +
    "\006\uff56\015\uff56\034\uff56\043\uff56\056\uff56\060\uff56\067" +
    "\uff56\072\uff56\076\uff56\131\uff56\212\uff56\216\uff56\225\uff56" +
    "\232\uff56\251\uff56\257\uff56\346\uff56\u013a\102\u013b\101\u014c" +
    "\uff56\u014d\uff56\u0153\uff56\001\002\000\004\004\u02a2\001\002" +
    "\000\004\004\u029d\001\002\000\030\004\u01f5\025\u01f8\036" +
    "\u01f6\107\u01fc\127\u01ff\136\u01f4\150\u01f9\175\u01fb\255\u01f3" +
    "\u013e\030\u0152\u029e\001\002\000\026\004\u01f5\025\u01f8\036" +
    "\u01f6\107\u01fc\127\u01ff\136\u01f4\150\u01f9\175\u01fb\255\u01f3" +
    "\u013e\030\001\002\000\052\002\uffbd\006\uffbd\015\uffbd\034" +
    "\uffbd\043\uffbd\056\uffbd\060\uffbd\067\uffbd\072\uffbd\076\uffbd" +
    "\131\uffbd\212\uffbd\216\uffbd\225\uffbd\232\uffbd\251\uffbd\257" +
    "\uffbd\346\uffbd\u014c\uffbd\u014d\u0201\001\002\000\006\u014d\u0201" +
    "\u0153\u02a1\001\002\000\050\002\uffbc\006\uffbc\015\uffbc\034" +
    "\uffbc\043\uffbc\056\uffbc\060\uffbc\067\uffbc\072\uffbc\076\uffbc" +
    "\131\uffbc\212\uffbc\216\uffbc\225\uffbc\232\uffbc\251\uffbc\257" +
    "\uffbc\346\uffbc\u014c\uffbc\001\002\000\030\004\u01f5\025\u01f8" +
    "\036\u01f6\107\u01fc\127\u01ff\136\u01f4\150\u01f9\175\u01fb\255" +
    "\u01f3\u013e\030\u0152\u02a3\001\002\000\026\004\u01f5\025\u01f8" +
    "\036\u01f6\107\u01fc\127\u01ff\136\u01f4\150\u01f9\175\u01fb\255" +
    "\u01f3\u013e\030\001\002\000\052\002\uffbb\006\uffbb\015\uffbb" +
    "\034\uffbb\043\uffbb\056\uffbb\060\uffbb\067\uffbb\072\uffbb\076" +
    "\uffbb\131\uffbb\212\uffbb\216\uffbb\225\uffbb\232\uffbb\251\uffbb" +
    "\257\uffbb\346\uffbb\u014c\uffbb\u014d\u0201\001\002\000\006\u014d" +
    "\u0201\u0153\u02a6\001\002\000\050\002\uffba\006\uffba\015\uffba" +
    "\034\uffba\043\uffba\056\uffba\060\uffba\067\uffba\072\uffba\076" +
    "\uffba\131\uffba\212\uffba\216\uffba\225\uffba\232\uffba\251\uffba" +
    "\257\uffba\346\uffba\u014c\uffba\001\002\000\026\004\u01f5\025" +
    "\u01f8\036\u01f6\107\u01fc\127\u01ff\136\u01f4\150\u01f9\175\u01fb" +
    "\255\u01f3\u013e\030\001\002\000\052\002\uffb6\006\uffb6\015" +
    "\uffb6\034\uffb6\043\uffb6\056\uffb6\060\uffb6\067\uffb6\072\uffb6" +
    "\076\uffb6\131\uffb6\212\uffb6\216\uffb6\225\uffb6\232\uffb6\251" +
    "\uffb6\257\uffb6\346\uffb6\u014c\uffb6\u014d\u0201\001\002\000\030" +
    "\004\u01f5\025\u01f8\036\u01f6\107\u01fc\127\u01ff\136\u01f4\150" +
    "\u01f9\175\u01fb\255\u01f3\u013e\030\u0152\u02aa\001\002\000\026" +
    "\004\u01f5\025\u01f8\036\u01f6\107\u01fc\127\u01ff\136\u01f4\150" +
    "\u01f9\175\u01fb\255\u01f3\u013e\030\001\002\000\052\002\uffb8" +
    "\006\uffb8\015\uffb8\034\uffb8\043\uffb8\056\uffb8\060\uffb8\067" +
    "\uffb8\072\uffb8\076\uffb8\131\uffb8\212\uffb8\216\uffb8\225\uffb8" +
    "\232\uffb8\251\uffb8\257\uffb8\346\uffb8\u014c\uffb8\u014d\u0201\001" +
    "\002\000\006\u014d\u0201\u0153\u02ad\001\002\000\050\002\uffb7" +
    "\006\uffb7\015\uffb7\034\uffb7\043\uffb7\056\uffb7\060\uffb7\067" +
    "\uffb7\072\uffb7\076\uffb7\131\uffb7\212\uffb7\216\uffb7\225\uffb7" +
    "\232\uffb7\251\uffb7\257\uffb7\346\uffb7\u014c\uffb7\001\002\000" +
    "\006\u014d\u0201\u0153\u02af\001\002\000\050\002\uffb5\006\uffb5" +
    "\015\uffb5\034\uffb5\043\uffb5\056\uffb5\060\uffb5\067\uffb5\072" +
    "\uffb5\076\uffb5\131\uffb5\212\uffb5\216\uffb5\225\uffb5\232\uffb5" +
    "\251\uffb5\257\uffb5\346\uffb5\u014c\uffb5\001\002\000\004\u013e" +
    "\030\001\002\000\004\244\u02b2\001\002\000\004\u013e\030" +
    "\001\002\000\050\002\uffb9\006\uffb9\015\uffb9\034\uffb9\043" +
    "\uffb9\056\uffb9\060\uffb9\067\uffb9\072\uffb9\076\uffb9\131\uffb9" +
    "\212\uffb9\216\uffb9\225\uffb9\232\uffb9\251\uffb9\257\uffb9\346" +
    "\uffb9\u014c\uffb9\001\002\000\012\011\uff89\015\uff89\u014d\127" +
    "\u0158\u01aa\001\002\000\050\002\uffda\006\uffda\015\uffda\034" +
    "\uffda\043\uffda\056\uffda\060\uffda\067\uffda\072\uffda\076\uffda" +
    "\131\uffda\212\uffda\216\uffda\225\uffda\232\uffda\251\uffda\257" +
    "\uffda\346\uffda\u014c\uffda\001\002\000\004\u0152\u02b7\001\002" +
    "\000\006\u0153\uff89\u0158\u01aa\001\002\000\004\u0153\u02b9\001" +
    "\002\000\006\011\u01d0\015\uff94\001\002\000\004\015\u02bb" +
    "\001\002\000\002\001\002\000\040\006\020\015\013\034" +
    "\012\043\014\056\025\060\023\067\021\072\u02bd\076\004" +
    "\131\016\216\011\225\006\232\017\251\007\257\024\001" +
    "\002\000\054\002\uff92\006\uff92\015\uff92\034\uff92\043\uff92" +
    "\056\uff92\060\uff92\067\uff92\072\uff92\076\uff92\131\uff92\212" +
    "\uff92\216\uff92\225\uff92\232\uff92\246\u01d7\247\u01d6\251\uff92" +
    "\257\uff92\346\uff92\u014c\uff92\001\002\000\006\011\u01d0\015" +
    "\uff94\001\002\000\004\015\u02c0\001\002\000\002\001\002" +
    "\000\040\006\020\015\013\034\012\043\014\056\025\060" +
    "\023\067\021\072\u02c2\076\004\131\016\216\011\225\006" +
    "\232\017\251\007\257\024\001\002\000\054\002\uff91\006" +
    "\uff91\015\uff91\034\uff91\043\uff91\056\uff91\060\uff91\067\uff91" +
    "\072\uff91\076\uff91\131\uff91\212\uff91\216\uff91\225\uff91\232" +
    "\uff91\246\u01d7\247\u01d6\251\uff91\257\uff91\346\uff91\u014c\uff91" +
    "\001\002\000\006\u0167\u02c9\u0168\u02c8\001\002\000\006\337" +
    "\u02c7\u012c\u02c6\001\002\000\050\002\uffe9\006\uffe9\015\uffe9" +
    "\034\uffe9\043\uffe9\056\uffe9\060\uffe9\067\uffe9\072\uffe9\076" +
    "\uffe9\131\uffe9\212\uffe9\216\uffe9\225\uffe9\232\uffe9\251\uffe9" +
    "\257\uffe9\346\uffe9\u014c\uffe9\001\002\000\050\002\uffcc\006" +
    "\uffcc\015\uffcc\034\uffcc\043\uffcc\056\uffcc\060\uffcc\067\uffcc" +
    "\072\uffcc\076\uffcc\131\uffcc\212\uffcc\216\uffcc\225\uffcc\232" +
    "\uffcc\251\uffcc\257\uffcc\346\uffcc\u014c\uffcc\001\002\000\050" +
    "\002\uffcb\006\uffcb\015\uffcb\034\uffcb\043\uffcb\056\uffcb\060" +
    "\uffcb\067\uffcb\072\uffcb\076\uffcb\131\uffcb\212\uffcb\216\uffcb" +
    "\225\uffcb\232\uffcb\251\uffcb\257\uffcb\346\uffcb\u014c\uffcb\001" +
    "\002\000\050\002\uffc9\006\uffc9\015\uffc9\034\uffc9\043\uffc9" +
    "\056\uffc9\060\uffc9\067\uffc9\072\uffc9\076\uffc9\131\uffc9\212" +
    "\uffc9\216\uffc9\225\uffc9\232\uffc9\251\uffc9\257\uffc9\346\uffc9" +
    "\u014c\uffc9\001\002\000\050\002\uffca\006\uffca\015\uffca\034" +
    "\uffca\043\uffca\056\uffca\060\uffca\067\uffca\072\uffca\076\uffca" +
    "\131\uffca\212\uffca\216\uffca\225\uffca\232\uffca\251\uffca\257" +
    "\uffca\346\uffca\u014c\uffca\001\002\000\050\002\uffe8\006\uffe8" +
    "\015\uffe8\034\uffe8\043\uffe8\056\uffe8\060\uffe8\067\uffe8\072" +
    "\uffe8\076\uffe8\131\uffe8\212\uffe8\216\uffe8\225\uffe8\232\uffe8" +
    "\251\uffe8\257\uffe8\346\uffe8\u014c\uffe8\001\002\000\050\002" +
    "\ufff8\006\ufff8\015\ufff8\034\ufff8\043\ufff8\056\ufff8\060\ufff8" +
    "\067\ufff8\072\ufff8\076\ufff8\131\ufff8\212\ufff8\216\ufff8\225" +
    "\ufff8\232\ufff8\251\ufff8\257\ufff8\346\ufff8\u014c\ufff8\001\002" +
    "\000\006\263\u02cf\u0152\u02d0\001\002\000\004\u013e\030\001" +
    "\002\000\050\002\ufff7\006\ufff7\015\ufff7\034\ufff7\043\ufff7" +
    "\056\ufff7\060\ufff7\067\ufff7\072\ufff7\076\ufff7\131\ufff7\212" +
    "\ufff7\216\ufff7\225\ufff7\232\ufff7\251\ufff7\257\ufff7\346\ufff7" +
    "\u014c\ufff7\001\002\000\004\u0152\u02d4\001\002\000\004\u013e" +
    "\030\001\002\000\006\u014d\127\u0153\u02d2\001\002\000\004" +
    "\263\u02d3\001\002\000\004\u0152\u02d4\001\002\000\022\151" +
    "\306\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052\u0155\064" +
    "\u015c\046\001\002\000\052\002\uff9f\006\uff9f\015\uff9f\034" +
    "\uff9f\043\uff9f\056\uff9f\060\uff9f\067\uff9f\072\uff9f\076\uff9f" +
    "\131\uff9f\212\uff9f\216\uff9f\225\uff9f\232\uff9f\251\uff9f\257" +
    "\uff9f\346\uff9f\u014c\uff9f\u014d\u02d6\001\002\000\004\u0152\u02d7" +
    "\001\002\000\022\151\306\u013a\060\u013b\065\u013e\030\u013f" +
    "\063\u0152\052\u0155\064\u015c\046\001\002\000\006\u014d\310" +
    "\u0153\u02d9\001\002\000\052\002\uff9c\006\uff9c\015\uff9c\034" +
    "\uff9c\043\uff9c\056\uff9c\060\uff9c\067\uff9c\072\uff9c\076\uff9c" +
    "\131\uff9c\212\uff9c\216\uff9c\225\uff9c\232\uff9c\251\uff9c\257" +
    "\uff9c\346\uff9c\u014c\uff9c\u014d\uff9c\001\002\000\006\u014d\310" +
    "\u0153\u02db\001\002\000\052\002\uff9d\006\uff9d\015\uff9d\034" +
    "\uff9d\043\uff9d\056\uff9d\060\uff9d\067\uff9d\072\uff9d\076\uff9d" +
    "\131\uff9d\212\uff9d\216\uff9d\225\uff9d\232\uff9d\251\uff9d\257" +
    "\uff9d\346\uff9d\u014c\uff9d\u014d\uff9d\001\002\000\052\002\uff9e" +
    "\006\uff9e\015\uff9e\034\uff9e\043\uff9e\056\uff9e\060\uff9e\067" +
    "\uff9e\072\uff9e\076\uff9e\131\uff9e\212\uff9e\216\uff9e\225\uff9e" +
    "\232\uff9e\251\uff9e\257\uff9e\346\uff9e\u014c\uff9e\u014d\u02d6\001" +
    "\002\000\004\002\001\001\002\000\004\u013e\u0324\001\002" +
    "\000\010\030\u02e1\127\uffcd\147\u02e8\001\002\000\004\u013e" +
    "\030\001\002\000\004\127\uffcf\001\002\000\004\u013e\030" +
    "\001\002\000\004\u013e\030\001\002\000\002\001\002\000" +
    "\004\u013e\030\001\002\000\004\127\u02e9\001\002\000\050" +
    "\002\ufff6\006\ufff6\015\ufff6\034\ufff6\043\ufff6\056\ufff6\060" +
    "\ufff6\067\ufff6\072\ufff6\076\ufff6\131\ufff6\212\ufff6\216\ufff6" +
    "\225\ufff6\232\ufff6\251\ufff6\257\ufff6\346\ufff6\u014c\ufff6\001" +
    "\002\000\004\127\uffce\001\002\000\004\u013e\030\001\002" +
    "\000\004\156\u02ec\001\002\000\050\002\uffdf\006\uffdf\015" +
    "\uffdf\034\uffdf\043\uffdf\056\uffdf\060\uffdf\067\uffdf\072\uffdf" +
    "\076\uffdf\131\uffdf\212\uffdf\216\uffdf\225\uffdf\232\uffdf\251" +
    "\uffdf\257\uffdf\346\uffdf\u014c\uffdf\001\002\000\004\u013e\030" +
    "\001\002\000\004\u0152\u02ee\001\002\000\004\u013e\030\001" +
    "\002\000\012\012\u011f\062\u0120\u014d\u025e\u0153\uff77\001\002" +
    "\000\004\u0153\u02f1\001\002\000\050\002\uff7a\006\uff7a\015" +
    "\uff7a\034\uff7a\043\uff7a\056\uff7a\060\uff7a\067\uff7a\072\uff7a" +
    "\076\uff7a\131\uff7a\212\uff7a\216\uff7a\225\uff7a\232\uff7a\251" +
    "\uff7a\257\uff7a\346\uff7a\u014c\uff7a\001\002\000\010\u014d\127" +
    "\u0158\u01aa\u016d\uff89\001\002\000\004\u0152\u02f5\001\002\000" +
    "\050\002\uffdb\006\uffdb\015\uffdb\034\uffdb\043\uffdb\056\uffdb" +
    "\060\uffdb\067\uffdb\072\uffdb\076\uffdb\131\uffdb\212\uffdb\216" +
    "\uffdb\225\uffdb\232\uffdb\251\uffdb\257\uffdb\346\uffdb\u014c\uffdb" +
    "\001\002\000\006\u0153\uff89\u0158\u01aa\001\002\000\004\u0153" +
    "\u02f7\001\002\000\004\u016d\u02f8\001\002\000\040\066\u01b6" +
    "\303\u01b4\311\u01bb\313\u01af\323\u01b1\326\u01ad\341\u01bc\356" +
    "\u01ae\357\u01b0\u0104\u01b3\u0111\u01b7\u0124\u01b2\u0125\u01b8\u0132\u01b5" +
    "\u0163\u01b9\001\002\000\006\011\u01d0\015\uff94\001\002\000" +
    "\004\015\u02fb\001\002\000\002\001\002\000\040\006\020" +
    "\015\013\034\012\043\014\056\025\060\023\067\021\072" +
    "\u02fd\076\004\131\016\216\011\225\006\232\017\251\007" +
    "\257\024\001\002\000\054\002\uff97\006\uff97\015\uff97\034" +
    "\uff97\043\uff97\056\uff97\060\uff97\067\uff97\072\uff97\076\uff97" +
    "\131\uff97\212\uff97\216\uff97\225\uff97\232\uff97\246\u01d7\247" +
    "\u01d6\251\uff97\257\uff97\346\uff97\u014c\uff97\001\002\000\004" +
    "\u016d\u02ff\001\002\000\040\066\u01b6\303\u01b4\311\u01bb\313" +
    "\u01af\323\u01b1\326\u01ad\341\u01bc\356\u01ae\357\u01b0\u0104\u01b3" +
    "\u0111\u01b7\u0124\u01b2\u0125\u01b8\u0132\u01b5\u0163\u01b9\001\002\000" +
    "\006\011\u01d0\015\uff94\001\002\000\004\015\u0302\001\002" +
    "\000\002\001\002\000\042\006\020\015\013\034\012\043" +
    "\014\056\025\060\023\067\021\072\010\076\004\131\016" +
    "\212\u0304\216\011\225\006\232\017\251\007\257\024\001" +
    "\002\000\020\u013a\060\u013b\065\u013e\030\u013f\063\u0152\052" +
    "\u0155\064\u015c\046\001\002\000\010\072\u0306\u013a\102\u013b" +
    "\101\001\002\000\050\002\uff96\006\uff96\015\uff96\034\uff96" +
    "\043\uff96\056\uff96\060\uff96\067\uff96\072\uff96\076\uff96\131" +
    "\uff96\212\uff96\216\uff96\225\uff96\232\uff96\251\uff96\257\uff96" +
    "\346\uff96\u014c\uff96\001\002\000\050\002\uffe0\006\uffe0\015" +
    "\uffe0\034\uffe0\043\uffe0\056\uffe0\060\uffe0\067\uffe0\072\uffe0" +
    "\076\uffe0\131\uffe0\212\uffe0\216\uffe0\225\uffe0\232\uffe0\251" +
    "\uffe0\257\uffe0\346\uffe0\u014c\uffe0\001\002\000\050\002\uffe1" +
    "\006\uffe1\015\uffe1\034\uffe1\043\uffe1\056\uffe1\060\uffe1\067" +
    "\uffe1\072\uffe1\076\uffe1\131\uffe1\212\uffe1\216\uffe1\225\uffe1" +
    "\232\uffe1\251\uffe1\257\uffe1\346\uffe1\u014c\uffe1\001\002\000" +
    "\006\u0152\u030a\u015d\u030b\001\002\000\026\004\u01f5\025\u01f8" +
    "\036\u01f6\107\u01fc\127\u01ff\136\u01f4\150\u01f9\175\u01fb\255" +
    "\u01f3\u013e\030\001\002\000\004\u0152\u030c\001\002\000\026" +
    "\004\u01f5\025\u01f8\036\u01f6\107\u01fc\127\u01ff\136\u01f4\150" +
    "\u01f9\175\u01fb\255\u01f3\u013e\030\001\002\000\006\u014d\u0201" +
    "\u0153\u030e\001\002\000\050\002\uff9a\006\uff9a\015\uff9a\034" +
    "\uff9a\043\uff9a\056\uff9a\060\uff9a\067\uff9a\072\uff9a\076\uff9a" +
    "\131\uff9a\212\uff9a\216\uff9a\225\uff9a\232\uff9a\251\uff9a\257" +
    "\uff9a\346\uff9a\u014c\uff9a\001\002\000\006\u014d\u0201\u0153\u0310" +
    "\001\002\000\050\002\uff9b\006\uff9b\015\uff9b\034\uff9b\043" +
    "\uff9b\056\uff9b\060\uff9b\067\uff9b\072\uff9b\076\uff9b\131\uff9b" +
    "\212\uff9b\216\uff9b\225\uff9b\232\uff9b\251\uff9b\257\uff9b\346" +
    "\uff9b\u014c\uff9b\001\002\000\050\002\uffdc\006\uffdc\015\uffdc" +
    "\034\uffdc\043\uffdc\056\uffdc\060\uffdc\067\uffdc\072\uffdc\076" +
    "\uffdc\131\uffdc\212\uffdc\216\uffdc\225\uffdc\232\uffdc\251\uffdc" +
    "\257\uffdc\346\uffdc\u014c\uffdc\001\002\000\050\002\uffdd\006" +
    "\uffdd\015\uffdd\034\uffdd\043\uffdd\056\uffdd\060\uffdd\067\uffdd" +
    "\072\uffdd\076\uffdd\131\uffdd\212\uffdd\216\uffdd\225\uffdd\232" +
    "\uffdd\251\uffdd\257\uffdd\346\uffdd\u014c\uffdd\001\002\000\012" +
    "\011\uff89\015\uff89\u014d\127\u0158\u01aa\001\002\000\004\u0152" +
    "\u0315\001\002\000\006\u0153\uff89\u0158\u01aa\001\002\000\004" +
    "\u0153\u0317\001\002\000\006\011\u01d0\015\uff94\001\002\000" +
    "\004\015\u0319\001\002\000\002\001\002\000\040\006\020" +
    "\015\013\034\012\043\014\056\025\060\023\067\021\072" +
    "\u031b\076\004\131\016\216\011\225\006\232\017\251\007" +
    "\257\024\001\002\000\054\002\uff99\006\uff99\015\uff99\034" +
    "\uff99\043\uff99\056\uff99\060\uff99\067\uff99\072\uff99\076\uff99" +
    "\131\uff99\212\uff99\216\uff99\225\uff99\232\uff99\246\u01d7\247" +
    "\u01d6\251\uff99\257\uff99\346\uff99\u014c\uff99\001\002\000\006" +
    "\011\u01d0\015\uff94\001\002\000\004\015\u031e\001\002\000" +
    "\002\001\002\000\040\006\020\015\013\034\012\043\014" +
    "\056\025\060\023\067\021\072\u0320\076\004\131\016\216" +
    "\011\225\006\232\017\251\007\257\024\001\002\000\054" +
    "\002\uff98\006\uff98\015\uff98\034\uff98\043\uff98\056\uff98\060" +
    "\uff98\067\uff98\072\uff98\076\uff98\131\uff98\212\uff98\216\uff98" +
    "\225\uff98\232\uff98\246\u01d7\247\u01d6\251\uff98\257\uff98\346" +
    "\uff98\u014c\uff98\001\002\000\004\127\u0322\001\002\000\004" +
    "\u013e\030\001\002\000\050\002\uffde\006\uffde\015\uffde\034" +
    "\uffde\043\uffde\056\uffde\060\uffde\067\uffde\072\uffde\076\uffde" +
    "\131\uffde\212\uffde\216\uffde\225\uffde\232\uffde\251\uffde\257" +
    "\uffde\346\uffde\u014c\uffde\001\002\000\010\032\uff6b\156\u0327" +
    "\u0161\u0326\001\002\000\050\002\uffe2\006\uffe2\015\uffe2\034" +
    "\uffe2\043\uffe2\056\uffe2\060\uffe2\067\uffe2\072\uffe2\076\uffe2" +
    "\131\uffe2\212\uffe2\216\uffe2\225\uffe2\232\uffe2\251\uffe2\257" +
    "\uffe2\346\uffe2\u014c\uffe2\001\002\000\004\156\u033e\001\002" +
    "\000\006\175\u032d\u0152\u032c\001\002\000\004\032\u0329\001" +
    "\002\000\004\u013e\u032b\001\002\000\050\002\uff6f\006\uff6f" +
    "\015\uff6f\034\uff6f\043\uff6f\056\uff6f\060\uff6f\067\uff6f\072" +
    "\uff6f\076\uff6f\131\uff6f\212\uff6f\216\uff6f\225\uff6f\232\uff6f" +
    "\251\uff6f\257\uff6f\346\uff6f\u014c\uff6f\001\002\000\050\002" +
    "\uff65\006\uff65\015\uff65\034\uff65\043\uff65\056\uff65\060\uff65" +
    "\067\uff65\072\uff65\076\uff65\131\uff65\212\uff65\216\uff65\225" +
    "\uff65\232\uff65\251\uff65\257\uff65\346\uff65\u014c\uff65\001\002" +
    "\000\004\376\u0333\001\002\000\004\u0152\u032c\001\002\000" +
    "\006\032\uff6e\u014d\u0330\001\002\000\006\032\uff6a\u014d\uff6a" +
    "\001\002\000\004\u0152\u032c\001\002\000\006\032\uff69\u014d" +
    "\uff69\001\002\000\006\032\uff6d\u014d\u0330\001\002\000\004" +
    "\u0139\u0334\001\002\000\004\u015d\u0335\001\002\000\004\u0162" +
    "\u0336\001\002\000\004\u0139\u0337\001\002\000\004\u015d\u0338" +
    "\001\002\000\006\u0118\u033a\u0153\uff66\001\002\000\004\u0153" +
    "\u033d\001\002\000\004\u0139\u033b\001\002\000\004\u013f\u033c" +
    "\001\002\000\004\u0153\uff67\001\002\000\006\032\uff68\u014d" +
    "\uff68\001\002\000\004\u0152\u032c\001\002\000\006\032\uff6c" +
    "\u014d\u0330\001\002\000\050\002\ufff2\006\ufff2\015\ufff2\034" +
    "\ufff2\043\ufff2\056\ufff2\060\ufff2\067\ufff2\072\ufff2\076\ufff2" +
    "\131\ufff2\212\ufff2\216\ufff2\225\ufff2\232\ufff2\251\ufff2\257" +
    "\ufff2\346\ufff2\u014c\ufff2\001\002\000\050\002\ufff1\006\ufff1" +
    "\015\ufff1\034\ufff1\043\ufff1\056\ufff1\060\ufff1\067\ufff1\072" +
    "\ufff1\076\ufff1\131\ufff1\212\ufff1\216\ufff1\225\ufff1\232\ufff1" +
    "\251\ufff1\257\ufff1\346\ufff1\u014c\ufff1\001\002\000\050\002" +
    "\uffea\006\uffea\015\uffea\034\uffea\043\uffea\056\uffea\060\uffea" +
    "\067\uffea\072\uffea\076\uffea\131\uffea\212\uffea\216\uffea\225" +
    "\uffea\232\uffea\251\uffea\257\uffea\346\uffea\u014c\uffea\001\002" +
    "\000\050\002\uffeb\006\uffeb\015\uffeb\034\uffeb\043\uffeb\056" +
    "\uffeb\060\uffeb\067\uffeb\072\uffeb\076\uffeb\131\uffeb\212\uffeb" +
    "\216\uffeb\225\uffeb\232\uffeb\251\uffeb\257\uffeb\346\uffeb\u014c" +
    "\uffeb\001\002\000\050\002\uffed\006\uffed\015\uffed\034\uffed" +
    "\043\uffed\056\uffed\060\uffed\067\uffed\072\uffed\076\uffed\131" +
    "\uffed\212\uffed\216\uffed\225\uffed\232\uffed\251\uffed\257\uffed" +
    "\346\uffed\u014c\uffed\001\002\000\050\002\uffee\006\uffee\015" +
    "\uffee\034\uffee\043\uffee\056\uffee\060\uffee\067\uffee\072\uffee" +
    "\076\uffee\131\uffee\212\uffee\216\uffee\225\uffee\232\uffee\251" +
    "\uffee\257\uffee\346\uffee\u014c\uffee\001\002\000\050\002\ufff0" +
    "\006\ufff0\015\ufff0\034\ufff0\043\ufff0\056\ufff0\060\ufff0\067" +
    "\ufff0\072\ufff0\076\ufff0\131\ufff0\212\ufff0\216\ufff0\225\ufff0" +
    "\232\ufff0\251\ufff0\257\ufff0\346\ufff0\u014c\ufff0\001\002\000" +
    "\004\u013e\030\001\002\000\050\002\uffe5\006\uffe5\015\uffe5" +
    "\034\uffe5\043\uffe5\056\uffe5\060\uffe5\067\uffe5\072\uffe5\076" +
    "\uffe5\131\uffe5\212\uffe5\216\uffe5\225\uffe5\232\uffe5\251\uffe5" +
    "\257\uffe5\346\uffe5\u014c\uffe5\001\002\000\050\002\ufffa\006" +
    "\ufffa\015\ufffa\034\ufffa\043\ufffa\056\ufffa\060\ufffa\067\ufffa" +
    "\072\ufffa\076\ufffa\131\ufffa\212\ufffa\216\ufffa\225\ufffa\232" +
    "\ufffa\251\ufffa\257\ufffa\346\ufffa\u014c\ufffa\001\002\000\006" +
    "\002\ufffe\346\u034d\001\002\000\004\002\000\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffc\001\002\000\050" +
    "\002\uffe3\006\uffe3\015\uffe3\034\uffe3\043\uffe3\056\uffe3\060" +
    "\uffe3\067\uffe3\072\uffe3\076\uffe3\131\uffe3\212\uffe3\216\uffe3" +
    "\225\uffe3\232\uffe3\251\uffe3\257\uffe3\346\uffe3\u014c\uffe3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u034c\000\006\002\014\003\004\001\001\000\006\077" +
    "\u034d\152\037\001\001\000\004\150\u034a\001\001\000\012" +
    "\017\u0348\021\115\122\121\126\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\152\u0345\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u02e5\156\u02e6\001" +
    "\001\000\002\001\001\000\010\023\u02ca\077\u02cb\152\037" +
    "\001\001\000\002\001\001\000\004\157\u01a0\001\001\000" +
    "\004\160\u018e\001\001\000\002\001\001\000\006\011\u0186" +
    "\053\u0185\001\001\000\010\011\030\022\031\152\032\001" +
    "\001\000\004\153\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\152\u017a\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\077\035\127\036" +
    "\130\034\152\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\152\041" +
    "\001\001\000\002\001\001\000\004\152\043\001\001\000" +
    "\002\001\001\000\024\061\056\103\054\120\061\121\050" +
    "\131\060\141\053\142\046\152\047\154\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\061\112\103\054\120\061\121\050\131" +
    "\060\141\053\142\046\152\047\154\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\120\061\121\050\131\060" +
    "\141\111\152\047\154\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\064\066\152\067" +
    "\001\001\000\016\120\061\121\050\131\060\141\065\152" +
    "\047\154\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\061\071\067\074\070\072\103" +
    "\054\120\061\121\050\131\060\141\053\142\046\152\047" +
    "\154\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\061\077\103\054\120\061\121\050\131\060\141\053\142" +
    "\046\152\047\154\052\001\001\000\002\001\001\000\022" +
    "\103\054\120\061\121\050\131\060\141\053\142\107\152" +
    "\047\154\052\001\001\000\022\103\054\120\061\121\050" +
    "\131\060\141\053\142\102\152\047\154\052\001\001\000" +
    "\002\001\001\000\020\103\106\120\061\121\050\131\060" +
    "\141\053\152\047\154\052\001\001\000\020\103\105\120" +
    "\061\121\050\131\060\141\053\152\047\154\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\116\021\115\122\121\126\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u014c\001\001\000\002\001\001\000\020\077" +
    "\130\105\133\113\136\136\u013d\137\132\140\134\152\037" +
    "\001\001\000\006\076\124\152\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\152\u013c\001\001\000\020" +
    "\077\130\105\133\113\136\136\137\137\132\140\134\152" +
    "\037\001\001\000\004\152\u0135\001\001\000\020\077\130" +
    "\105\133\113\136\136\u0126\137\132\140\134\152\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\146\140\001" +
    "\001\000\004\072\u010c\001\001\000\036\031\u010b\040\173" +
    "\052\155\061\163\103\054\104\157\120\061\121\050\131" +
    "\060\141\053\142\046\152\165\154\052\155\172\001\001" +
    "\000\016\077\130\105\133\113\136\137\143\140\134\152" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\077" +
    "\130\105\133\113\136\137\362\140\134\152\037\001\001" +
    "\000\002\001\001\000\016\077\130\105\133\113\136\137" +
    "\153\140\134\152\037\001\001\000\002\001\001\000\036" +
    "\031\171\040\173\052\155\061\163\103\054\104\157\120" +
    "\061\121\050\131\060\141\053\142\046\152\165\154\052" +
    "\155\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\031\342\040\173\052\155\061\322" +
    "\103\054\104\157\120\061\121\050\131\060\141\053\142" +
    "\046\152\165\154\052\155\172\001\001\000\030\040\341" +
    "\052\155\061\163\103\054\120\061\121\050\131\060\141" +
    "\053\142\046\152\165\154\052\001\001\000\002\001\001" +
    "\000\004\107\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\061\220\103\054\120\061\121\050\131\060" +
    "\141\053\142\046\145\217\152\047\154\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\061" +
    "\176\103\054\120\061\121\050\131\060\141\053\142\046" +
    "\152\047\154\052\001\001\000\002\001\001\000\004\152" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\031\203\040\173\052\155\061\163\103\054\104\157\120" +
    "\061\121\050\131\060\141\053\142\046\152\165\154\052" +
    "\155\172\001\001\000\002\001\001\000\036\031\205\040" +
    "\173\052\155\061\163\103\054\104\157\120\061\121\050" +
    "\131\060\141\053\142\046\152\165\154\052\155\172\001" +
    "\001\000\002\001\001\000\024\061\207\103\054\120\061" +
    "\121\050\131\060\141\053\142\046\152\047\154\052\001" +
    "\001\000\002\001\001\000\024\061\211\103\054\120\061" +
    "\121\050\131\060\141\053\142\046\152\047\154\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\215\021\115\122\121\126\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\144\226\001\001\000\036\031\222\040\173\052\155\061" +
    "\163\103\054\104\157\120\061\121\050\131\060\141\053" +
    "\142\046\152\165\154\052\155\172\001\001\000\002\001" +
    "\001\000\024\061\224\103\054\120\061\121\050\131\060" +
    "\141\053\142\046\152\047\154\052\001\001\000\002\001" +
    "\001\000\024\061\237\103\054\120\061\121\050\131\060" +
    "\141\053\142\046\152\047\154\052\001\001\000\002\001" +
    "\001\000\024\061\235\103\054\120\061\121\050\131\060" +
    "\141\053\142\046\152\047\154\052\001\001\000\024\061" +
    "\232\103\054\120\061\121\050\131\060\141\053\142\046" +
    "\152\047\154\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\061\234\103\054\120\061\121\050\131\060" +
    "\141\053\142\046\152\047\154\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\061\241\103\054\120\061\121\050\131\060\141" +
    "\053\142\046\152\047\154\052\001\001\000\002\001\001" +
    "\000\024\061\250\103\054\120\061\121\050\131\060\141" +
    "\053\142\046\152\047\154\052\001\001\000\036\031\245" +
    "\040\173\052\155\061\163\103\054\104\157\120\061\121" +
    "\050\131\060\141\053\142\046\152\165\154\052\155\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\061" +
    "\247\103\054\120\061\121\050\131\060\141\053\142\046" +
    "\152\047\154\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\061\253\103\054\120\061" +
    "\121\050\131\060\141\053\142\046\152\047\154\052\001" +
    "\001\000\002\001\001\000\024\061\255\103\054\120\061" +
    "\121\050\131\060\141\053\142\046\152\047\154\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\061\321\103\054\120\061\121\050\131\060\141\053" +
    "\142\046\152\047\154\052\001\001\000\024\061\315\103" +
    "\054\120\061\121\050\131\060\141\053\142\046\152\047" +
    "\154\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\061\272\103\054" +
    "\120\061\121\050\131\060\141\053\142\046\152\047\154" +
    "\052\001\001\000\002\001\001\000\024\061\314\103\054" +
    "\120\061\121\050\131\060\141\053\142\046\152\047\154" +
    "\052\001\001\000\002\001\001\000\024\061\276\103\054" +
    "\120\061\121\050\131\060\141\053\142\046\152\047\154" +
    "\052\001\001\000\002\001\001\000\024\061\300\103\054" +
    "\120\061\121\050\131\060\141\053\142\046\152\047\154" +
    "\052\001\001\000\002\001\001\000\026\061\304\103\054" +
    "\120\061\121\050\131\060\141\053\142\046\143\303\152" +
    "\047\154\052\001\001\000\012\017\312\021\115\122\121" +
    "\126\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\061\311\103\054" +
    "\120\061\121\050\131\060\141\053\142\046\152\047\154" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\061\317\103\054\120\061\121\050\131\060" +
    "\141\053\142\046\152\047\154\052\001\001\000\002\001" +
    "\001\000\036\031\323\040\173\052\155\061\322\103\054" +
    "\104\157\120\061\121\050\131\060\141\053\142\046\152" +
    "\165\154\052\155\172\001\001\000\002\001\001\000\004" +
    "\107\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\061\304\103\054\120\061\121\050" +
    "\131\060\141\053\142\046\143\330\152\047\154\052\001" +
    "\001\000\012\017\332\021\115\122\121\126\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\061\335\103\054\120\061\121\050" +
    "\131\060\141\053\142\046\152\047\154\052\001\001\000" +
    "\002\001\001\000\004\152\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\344\001\001\000\024\061\346\103\054\120\061" +
    "\121\050\131\060\141\053\142\046\152\047\154\052\001" +
    "\001\000\036\031\347\040\173\052\155\061\322\103\054" +
    "\104\157\120\061\121\050\131\060\141\053\142\046\152" +
    "\165\154\052\155\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\040\173\052\155\061" +
    "\163\103\054\104\157\120\061\121\050\131\060\141\053" +
    "\142\046\152\165\154\052\155\352\001\001\000\002\001" +
    "\001\000\030\061\071\067\354\070\072\103\054\120\061" +
    "\121\050\131\060\141\053\142\046\152\047\154\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\031\364\040\173\052\155\061\163" +
    "\103\054\104\157\120\061\121\050\131\060\141\053\142" +
    "\046\152\165\154\052\155\172\001\001\000\002\001\001" +
    "\000\016\077\130\105\133\113\136\137\373\140\134\152" +
    "\037\001\001\000\002\001\001\000\016\077\130\105\133" +
    "\113\136\137\370\140\134\152\037\001\001\000\002\001" +
    "\001\000\036\031\372\040\173\052\155\061\163\103\054" +
    "\104\157\120\061\121\050\131\060\141\053\142\046\152" +
    "\165\154\052\155\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\031\375\040\173\052\155\061\163\103" +
    "\054\104\157\120\061\121\050\131\060\141\053\142\046" +
    "\152\165\154\052\155\172\001\001\000\002\001\001\000" +
    "\016\077\130\105\133\113\136\137\377\140\134\152\037" +
    "\001\001\000\002\001\001\000\036\031\u0101\040\173\052" +
    "\155\061\163\103\054\104\157\120\061\121\050\131\060" +
    "\141\053\142\046\152\165\154\052\155\172\001\001\000" +
    "\002\001\001\000\016\077\130\105\133\113\136\137\u0108" +
    "\140\134\152\037\001\001\000\002\001\001\000\016\077" +
    "\130\105\133\113\136\137\u0105\140\134\152\037\001\001" +
    "\000\002\001\001\000\036\031\u0107\040\173\052\155\061" +
    "\163\103\054\104\157\120\061\121\050\131\060\141\053" +
    "\142\046\152\165\154\052\155\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\031\u010a\040\173\052\155" +
    "\061\163\103\054\104\157\120\061\121\050\131\060\141" +
    "\053\142\046\152\165\154\052\155\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\u0114\001\001\000" +
    "\002\001\001\000\026\061\u0110\073\u010f\103\054\120\061" +
    "\121\050\131\060\141\053\142\046\152\047\154\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\061\u0112" +
    "\103\054\120\061\121\050\131\060\141\053\142\046\152" +
    "\047\154\052\001\001\000\002\001\001\000\036\031\u0120" +
    "\040\173\052\155\061\163\103\054\104\157\120\061\121" +
    "\050\131\060\141\053\142\046\152\165\154\052\155\172" +
    "\001\001\000\004\110\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\061\u0118\103\054\111\u011a\112\u0119" +
    "\120\061\121\050\131\060\141\053\142\046\152\047\154" +
    "\052\001\001\000\004\030\u011d\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\061\u0118\103\054\111\u011c\120" +
    "\061\121\050\131\060\141\053\142\046\152\047\154\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\077\130" +
    "\105\u0123\113\136\137\u0122\140\134\152\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\u0128\021\115\122\121\126\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\152\u012c" +
    "\001\001\000\004\152\u0130\001\001\000\004\152\u012d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\152\u0131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\152\u0139\001\001\000\004" +
    "\152\u0136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\152\u013a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\146\u013e\001\001\000\004\072\u013f\001\001\000\004" +
    "\074\u0140\001\001\000\004\110\u0141\001\001\000\004\065" +
    "\u0142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\066\u0148\077\u0147\152" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\077\u014a\152\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\061\u014f\103\054\120\061\121\050\123\u0150" +
    "\124\u014e\131\060\141\053\142\046\152\047\154\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\152\u0164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\061\u0157\103\054\120\061\121\050\131\060\141" +
    "\053\142\046\152\047\154\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\061\u015a\103\054\120\061\121" +
    "\050\131\060\141\053\142\046\152\047\154\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\061\u015d\103" +
    "\054\120\061\121\050\131\060\141\053\142\046\152\047" +
    "\154\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\061\u0160\103\054\120\061\121\050\131\060\141\053" +
    "\142\046\152\047\154\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\152\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\152\u0168\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\061\u014f\103\054\120\061\121\050\123\u016b\131" +
    "\060\141\053\142\046\152\047\154\052\001\001\000\002" +
    "\001\001\000\024\061\u016d\103\054\120\061\121\050\131" +
    "\060\141\053\142\046\152\047\154\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0172\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\u0174\021\115\122\121\126\120\001\001\000\002\001" +
    "\001\000\010\077\035\127\u0179\152\037\001\001\000\020" +
    "\077\130\105\133\113\136\136\u0177\137\132\140\134\152" +
    "\037\001\001\000\004\146\u0178\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\077\035\127" +
    "\036\130\u017c\152\037\001\001\000\004\146\u017d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\061\u0183\103\054" +
    "\120\061\121\050\131\060\141\053\142\046\152\047\154" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\077\u0188\152\037\001" +
    "\001\000\004\146\u0189\001\001\000\002\001\001\000\010" +
    "\056\u019d\077\u019e\152\037\001\001\000\010\055\u019b\077" +
    "\u019c\152\037\001\001\000\010\054\u0196\077\u0197\152\037" +
    "\001\001\000\010\060\u0194\077\u0195\152\037\001\001\000" +
    "\002\001\001\000\010\057\u0190\077\u0191\152\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\077" +
    "\u019a\152\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\u02b4\076\u02b3\077\u02b5\152\u01a6\001\001\000\002" +
    "\001\001\000\010\013\u01e0\076\u01e1\152\125\001\001\000" +
    "\012\025\u01a4\076\u01a3\077\u01a5\152\u01a6\001\001\000\004" +
    "\116\u01d7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\u01a8\001\001\000\002\001\001" +
    "\000\006\115\u01aa\152\u01ab\001\001\000\002\001\001\000" +
    "\004\035\u01b9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\114\u01bf\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\114\u01c8\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\114\u01c7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\116\u01cb\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u01ce\001\001\000\004\027\u01d0\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\u01d2" +
    "\001\001\000\004\003\u01d3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u01d9\001\001\000\004\027\u01da\001" +
    "\001\000\002\001\001\000\004\102\u01dc\001\001\000\004" +
    "\003\u01d3\001\001\000\024\061\u01de\103\054\120\061\121" +
    "\050\131\060\141\053\142\046\152\047\154\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\u01ef\134\u01f9" +
    "\135\u02a7\152\u01ee\001\001\000\002\001\001\000\012\014" +
    "\u01ef\134\u01f9\135\u01f6\152\u01ee\001\001\000\004\152\u01ea" +
    "\001\001\000\004\152\u01ed\001\001\000\004\152\u01ec\001" +
    "\001\000\006\076\u01eb\152\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u0264\001\001\000\002\001\001\000\012\014\u01ef" +
    "\134\u01f9\135\u025f\152\u01ee\001\001\000\006\076\u0256\152" +
    "\125\001\001\000\002\001\001\000\006\077\u023f\152\037" +
    "\001\001\000\002\001\001\000\004\152\u0224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\u01ef\134\u01f9\135\u01ff\152\u01ee\001\001\000\012\014\u01ef" +
    "\134\u01f9\135\u0206\152\u01ee\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\u01ef\134\u0201\152\u01ee\001\001" +
    "\000\002\001\001\000\004\152\u0203\001\001\000\002\001" +
    "\001\000\006\077\u0205\152\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\152\u020a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\152\u020d\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\077\u0210\152\037\001\001\000\004\016\u0212" +
    "\001\001\000\004\152\u0213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\152\u0217\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\152\u021a\001\001\000\002\001\001\000\006\077\u021c" +
    "\152\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\152\u021f\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\031\u0222\040\173\052\155\061\163\103\054\104" +
    "\157\120\061\121\050\131\060\141\053\142\046\152\165" +
    "\154\052\155\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\152" +
    "\u022a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\152\u022e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\152\u0232\001\001\000\004\152\u0236" +
    "\001\001\000\002\001\001\000\006\077\u0234\152\037\001" +
    "\001\000\004\016\u0235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\077\u0239\152\037\001" +
    "\001\000\004\016\u023a\001\001\000\002\001\001\000\004" +
    "\152\u023c\001\001\000\004\015\u023d\001\001\000\002\001" +
    "\001\000\004\152\u0243\001\001\000\002\001\001\000\004" +
    "\152\u0241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\077\u0245\152\037\001\001\000\002" +
    "\001\001\000\006\077\u0250\152\037\001\001\000\004\152" +
    "\u024d\001\001\000\002\001\001\000\004\152\u024a\001\001" +
    "\000\002\001\001\000\006\077\u024c\152\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\152\u0254\001\001\000\002\001\001\000\004\152\u0252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\077\u025a\100" +
    "\u0258\101\u0259\152\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\u025b\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\077\u025a\100\u025e\152\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\061\u0299\103\054\120\061\121\050\131\060\141\053" +
    "\142\046\152\047\154\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\032\u0271\033\u026c\034\u026d\036\u0270" +
    "\001\001\000\006\077\u028f\152\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\061\u0281\103\054\120\061\121" +
    "\050\131\060\141\053\142\046\152\047\154\052\001\001" +
    "\000\006\032\u0278\036\u027f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\u0271\033\u0276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u0278" +
    "\001\001\000\004\152\u0279\001\001\000\002\001\001\000" +
    "\004\032\u027a\001\001\000\002\001\001\000\036\031\u027c" +
    "\040\173\052\155\061\163\103\054\104\157\120\061\121" +
    "\050\131\060\141\053\142\046\152\165\154\052\155\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\u0271\033" +
    "\u026c\034\u0289\036\u0270\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\032\u0271\033\u026c\034\u0288\036\u0270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u0290\001\001\000\002\001\001" +
    "\000\026\061\304\103\054\120\061\121\050\131\060\141" +
    "\053\142\046\143\u0292\152\047\154\052\001\001\000\002" +
    "\001\001\000\012\032\u0271\033\u026c\034\u0294\036\u0270\001" +
    "\001\000\002\001\001\000\026\061\304\103\054\120\061" +
    "\121\050\131\060\141\053\142\046\143\u0296\152\047\154" +
    "\052\001\001\000\002\001\001\000\012\032\u0271\033\u026c" +
    "\034\u0298\036\u0270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\u01ef" +
    "\134\u01f9\135\u029e\152\u01ee\001\001\000\012\014\u01ef\134" +
    "\u01f9\135\u029f\152\u01ee\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\u01ef\134\u01f9\135" +
    "\u02a3\152\u01ee\001\001\000\012\014\u01ef\134\u01f9\135\u02a4" +
    "\152\u01ee\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\u01ef\134\u01f9\135\u02ad\152\u01ee" +
    "\001\001\000\002\001\001\000\012\014\u01ef\134\u01f9\135" +
    "\u02aa\152\u01ee\001\001\000\012\014\u01ef\134\u01f9\135\u02ab" +
    "\152\u01ee\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\152\u02b0\001\001\000\002\001\001\000\004\152\u02b2\001" +
    "\001\000\002\001\001\000\004\116\u02bd\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\116\u02b7\001\001\000" +
    "\002\001\001\000\004\027\u02b9\001\001\000\002\001\001" +
    "\000\004\102\u02bb\001\001\000\004\003\u01d3\001\001\000" +
    "\002\001\001\000\004\027\u02be\001\001\000\002\001\001" +
    "\000\004\102\u02c0\001\001\000\004\003\u01d3\001\001\000" +
    "\002\001\001\000\004\007\u02c9\001\001\000\004\006\u02c4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\u02cd\077" +
    "\u02cb\152\037\001\001\000\002\001\001\000\004\024\u02db" +
    "\001\001\000\006\076\u02d0\152\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u02d4\001\001\000\026" +
    "\061\304\103\054\120\061\121\050\131\060\141\053\142" +
    "\046\143\u02d9\152\047\154\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\061\304\103\054\120\061\121" +
    "\050\131\060\141\053\142\046\143\u02d7\152\047\154\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u0324\001\001\000\004\005\u0320\001\001\000" +
    "\012\045\u0311\076\u0312\077\u0313\152\u01a6\001\001\000\002" +
    "\001\001\000\004\152\u0310\001\001\000\010\046\u0307\077" +
    "\u0308\152\037\001\001\000\004\151\u0306\001\001\000\012" +
    "\043\u02f3\076\u02f1\077\u02f2\152\u01a6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\044\u02ea" +
    "\077\u02e9\152\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\077\u02ec\152\037\001\001\000\002\001\001" +
    "\000\012\077\u025a\100\u0258\101\u02ee\152\037\001\001\000" +
    "\004\030\u02ef\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\116\u02fd\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\116\u02f5\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u02f8\001\001\000\004\027\u02f9\001" +
    "\001\000\002\001\001\000\004\102\u02fb\001\001\000\004" +
    "\003\u01d3\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u02ff\001\001\000\004\027\u0300\001\001\000\002" +
    "\001\001\000\004\102\u0302\001\001\000\004\003\u01d3\001" +
    "\001\000\024\061\u0304\103\054\120\061\121\050\131\060" +
    "\141\053\142\046\152\047\154\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\u01ef\134\u01f9\135\u030e\152" +
    "\u01ee\001\001\000\002\001\001\000\012\014\u01ef\134\u01f9" +
    "\135\u030c\152\u01ee\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\116\u031b\001\001\000\002\001" +
    "\001\000\004\116\u0315\001\001\000\002\001\001\000\004" +
    "\027\u0317\001\001\000\002\001\001\000\004\102\u0319\001" +
    "\001\000\004\003\u01d3\001\001\000\002\001\001\000\004" +
    "\027\u031c\001\001\000\002\001\001\000\004\102\u031e\001" +
    "\001\000\004\003\u01d3\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\044\u0322\077\u02e9\152\037\001\001\000" +
    "\002\001\001\000\004\106\u0327\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\062\u032d\063\u032e\001\001\000" +
    "\004\037\u0329\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\062\u0331\063" +
    "\u032e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u0330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\132\u0338\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\062\u033e\063\u032e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\077\u0347\152\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintaxis$actions {
  private final sintaxis parser;

  /** Constructor */
  CUP$sintaxis$actions(sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintaxis$do_action(
    int                        CUP$sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$sintaxis$parser,
    java.util.Stack            CUP$sintaxis$stack,
    int                        CUP$sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // id_puntos ::= id Punto id Punto id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("id_puntos",61, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // id_puntos ::= id Punto id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("id_puntos",61, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // id_puntos ::= id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("id_puntos",61, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // id_list ::= id_list Coma id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("id_list",60, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // id_list ::= id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("id_list",60, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // id ::= Identificador Punto Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("id",104, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // id ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("id",104, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // id ::= Identificador 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("id",104, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // value_list ::= value_list Coma expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("value_list",97, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // value_list ::= value_list Coma NULL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("value_list",97, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // value_list ::= expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("value_list",97, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // value_list ::= NULL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("value_list",97, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // op ::= NoIgual 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("op",69, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // op ::= Igual 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("op",69, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // op ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("op",69, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // op ::= Menor 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("op",69, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // op ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("op",69, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // op ::= Mayor 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("op",69, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // select_op ::= ANY 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_op",83, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // select_op ::= SOME 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_op",83, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // select_op ::= ALL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_op",83, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // comparison ::= expression NOT BETWEEN expression AND expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // comparison ::= expression BETWEEN expression AND expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // comparison ::= expression NOT IN ParentesisAbierto SELECT select_union ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // comparison ::= expression IN ParentesisAbierto SELECT select_union ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // comparison ::= EXISTS ParentesisAbierto SELECT select_union ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // comparison ::= ParentesisAbierto boolean_exp ParentesisCerrado op ParentesisAbierto boolean_exp ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // comparison ::= ParentesisAbierto boolean_exp ParentesisCerrado op expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // comparison ::= expression op ParentesisAbierto boolean_exp ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // comparison ::= expression op expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // comparison ::= expression NOT IN ParentesisAbierto value_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // comparison ::= expression IN ParentesisAbierto value_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // comparison ::= expression NOT LIKE expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // comparison ::= expression LIKE expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // comparison ::= db_item_ref IS NOT NULL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // comparison ::= db_item_ref IS NULL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // comparison ::= ParentesisAbierto boolean_exp ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comparison",30, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // not ::= NOT comparison 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("not",66, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // not ::= comparison 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("not",66, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // and ::= not AND and 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("and",107, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // and ::= not 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("and",107, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // boolean_exp ::= and OR boolean_exp 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("boolean_exp",23, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // boolean_exp ::= and 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("boolean_exp",23, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // order_by_item ::= expression ascdesc_state 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("order_by_item",71, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // order_by_list ::= order_by_list Coma order_by_item 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("order_by_list",72, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // order_by_list ::= order_by_item 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("order_by_list",72, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // order_by ::= ORDER BY order_by_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("order_by",70, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // order_by ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("order_by",70, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // having ::= HAVING boolean_exp 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("having",58, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // having ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("having",58, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // group_by_list ::= group_by_list Coma expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("group_by_list",57, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // group_by_list ::= expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("group_by_list",57, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // group_by ::= GROUP BY group_by_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("group_by",56, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // group_by ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("group_by",56, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // where ::= WHERE boolean_exp 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("where",100, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // where ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("where",100, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // oj ::= table_list_item INNER JOIN table_list_item ON boolean_exp 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("oj",67, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // oj ::= table_list_item FULL JOIN table_list_item ON boolean_exp 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("oj",67, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // oj ::= table_list_item FULL OUTER JOIN table_list_item ON boolean_exp 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("oj",67, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // oj ::= table_list_item RIGHT JOIN table_list_item ON boolean_exp 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("oj",67, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // oj ::= table_list_item LEFT JOIN table_list_item ON boolean_exp 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("oj",67, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // oj ::= table_list_item RIGHT OUTER JOIN table_list_item ON boolean_exp 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("oj",67, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // oj ::= table_list_item LEFT OUTER JOIN table_list_item ON boolean_exp 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("oj",67, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // outer_join ::= LlaveAbierta OJ oj LlaveCerrada 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("outer_join",73, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // table_ref ::= id_puntos AS CorcheteAbierto id CorcheteCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_ref",94, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // table_ref ::= id_puntos AS id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_ref",94, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // table_ref ::= id_puntos CorcheteAbierto id CorcheteCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_ref",94, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // table_ref ::= id_puntos id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_ref",94, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // table_ref ::= id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_ref",94, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // table_list_item ::= ParentesisAbierto SELECT select_union ParentesisCerrado AS CorcheteAbierto id CorcheteCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list_item",93, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // table_list_item ::= ParentesisAbierto SELECT select_union ParentesisCerrado AS id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list_item",93, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // table_list_item ::= ParentesisAbierto SELECT select_union ParentesisCerrado CorcheteAbierto id CorcheteCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list_item",93, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // table_list_item ::= ParentesisAbierto SELECT select_union ParentesisCerrado id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list_item",93, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // table_list_item ::= ParentesisAbierto SELECT select_union ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list_item",93, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // table_list_item ::= ParentesisAbierto table_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list_item",93, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // table_list_item ::= oj 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list_item",93, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // table_list_item ::= outer_join 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list_item",93, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // table_list_item ::= table_ref 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list_item",93, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // table_list ::= table_list Coma table_list_item 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list",92, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // table_list ::= table_list_item 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_list",92, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // for_update_column_list ::= for_update_column_list Coma id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("for_update_column_list",52, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // for_update_column_list ::= id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("for_update_column_list",52, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // for_update ::= FOR READ ONLY 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("for_update",51, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // for_update ::= FOR UPDATE OF for_update_column_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("for_update",51, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // for_update ::= FOR UPDATE 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("for_update",51, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // for_update ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("for_update",51, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // func_args ::= func_args Coma expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("func_args",54, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // func_args ::= expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("func_args",54, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // func_arg ::= func_args 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("func_arg",53, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // func_arg ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("func_arg",53, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // func_arg ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("func_arg",53, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // fn ::= id ParentesisAbierto func_arg ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("fn",50, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // func ::= LlaveAbierta fn LlaveCerrada 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("func",106, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // scalar ::= func 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("scalar",79, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // real ::= Float 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("real",78, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // real ::= Numero 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("real",78, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // simple_term ::= id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("simple_term",87, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // simple_term ::= real 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("simple_term",87, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // func_qual ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("func_qual",55, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // func_qual ::= ALL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("func_qual",55, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // func_qual ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("func_qual",55, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // when_expression_list ::= when_expression_list WHEN expression THEN expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("when_expression_list",98, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // when_expression_list ::= WHEN expression THEN expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("when_expression_list",98, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // when_list ::= when_list WHEN boolean_exp THEN expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("when_list",99, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // when_list ::= WHEN boolean_exp THEN expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("when_list",99, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // db_item_ref ::= CASE expression when_expression_list ELSE expression END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("db_item_ref",40, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // db_item_ref ::= CASE expression when_expression_list END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("db_item_ref",40, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // db_item_ref ::= CASE when_list ELSE expression END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("db_item_ref",40, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // db_item_ref ::= CASE when_list END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("db_item_ref",40, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // db_item_ref ::= COALESCE ParentesisAbierto func_arg ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("db_item_ref",40, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // db_item_ref ::= NULLIF ParentesisAbierto expression Coma expression ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("db_item_ref",40, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // db_item_ref ::= CONVERT ParentesisAbierto expression Coma id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("db_item_ref",40, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // db_item_ref ::= CAST ParentesisAbierto expression AS id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("db_item_ref",40, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // db_item_ref ::= IFF ParentesisAbierto boolean_exp Coma expression Coma expression ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("db_item_ref",40, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // db_item_ref ::= id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("db_item_ref",40, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // term ::= scalar 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("term",95, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // term ::= simple_term 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("term",95, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // term ::= ParentesisAbierto SELECT select_union ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("term",95, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // term ::= ParentesisAbierto expression ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("term",95, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // neg ::= Resta term 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("neg",65, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // neg ::= Suma term 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("neg",65, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // neg ::= term 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("neg",65, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // times ::= neg 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("times",96, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // times ::= times Division neg 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("times",96, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // times ::= times Multiplicacion neg 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("times",96, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expression ::= times 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expression ::= expression Resta times 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expression ::= expression Suma times 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // select_item ::= SUM ParentesisAbierto expression ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // select_item ::= AVG ParentesisAbierto expression ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // select_item ::= MIN ParentesisAbierto expression ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // select_item ::= MAX ParentesisAbierto expression ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // select_item ::= COUNT ParentesisAbierto expression ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // select_item ::= expression String 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // select_item ::= expression AS String 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // select_item ::= expression AS CorcheteAbierto id CorcheteCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // select_item ::= expression AS id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // select_item ::= expression id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // select_item ::= expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_item",81, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // select_list ::= select_list Coma select_item 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_list",82, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // select_list ::= select_item 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_list",82, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // select_qual ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_qual",84, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // select_qual ::= ALL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_qual",84, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // select_qual ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_qual",84, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // select_cols ::= select_qual top Multiplicacion 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_cols",80, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // select_cols ::= select_qual top select_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_cols",80, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // set ::= id_puntos Igual expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("set",85, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // set ::= id_puntos Igual NULL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("set",85, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // set_list ::= set_list Coma set 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("set_list",86, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // set_list ::= set 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("set_list",86, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // col_const ::= REFERENCES id_puntos references_col_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // col_const ::= CHECK ParentesisAbierto boolean_exp ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // col_const ::= NULL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // col_const ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // col_const ::= UNIQUE KEY 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // col_const ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // col_const ::= INDEX 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // col_const ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // col_const ::= FOREIGN 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // col_const ::= PRIMARY KEY 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // col_const ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const",24, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // col_const_list ::= col_const_list CONSTRAINT id col_const 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const_list",25, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // col_const_list ::= col_const_list col_const 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const_list",25, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // col_const_list ::= col_const 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_const_list",25, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // col_val ::= IDENTITY ParentesisAbierto Numero Coma Numero ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_val",28, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // col_val ::= IDENTITY 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_val",28, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // col_val ::= DEFAULT expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_val",28, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // col_val ::= DEFAULT NULL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_val",28, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // col_qual ::= col_val 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_qual",26, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // col_qual ::= col_const_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_qual",26, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // col_qual ::= col_const_list col_val 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_qual",26, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // col_qual ::= col_val col_const_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_qual",26, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // col_qual ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_qual",26, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // col_type ::= DATE 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // col_type ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // col_type ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // col_type ::= BIT 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // col_type ::= TIME 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // col_type ::= TIMESTAMP 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // col_type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // col_type ::= INT 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // col_type ::= BYTE 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // col_type ::= REAL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // col_type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // col_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // col_type ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // col_type ::= CHAR VARYING 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // col_type ::= CHARACTER VARYING 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // col_type ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // col_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("col_type",27, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // table_col ::= CHECK ParentesisAbierto boolean_exp ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // table_col ::= NOT NULL ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // table_col ::= UNIQUE KEY id_puntos ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // table_col ::= UNIQUE KEY ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // table_col ::= UNIQUE ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // table_col ::= FOREIGN KEY ParentesisAbierto id ParentesisCerrado REFERENCES id_puntos references_col_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // table_col ::= FOREIGN KEY ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // table_col ::= FOREIGN ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // table_col ::= UNIQUE INDEX ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // table_col ::= UNIQUE INDEX ParentesisAbierto id ParentesisCerrado id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // table_col ::= KEY id_puntos ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // table_col ::= KEY ParentesisAbierto id ParentesisCerrado id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // table_col ::= INDEX ParentesisAbierto id ParentesisCerrado id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // table_col ::= PRIMARY KEY ParentesisAbierto id ParentesisCerrado id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // table_col ::= KEY ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // table_col ::= INDEX ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // table_col ::= PRIMARY KEY ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // table_col ::= PRIMARY ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // table_col ::= alter_table_constraint 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // table_col ::= id AS expression 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // table_col ::= id col_type ParentesisAbierto Numero Coma Numero ParentesisCerrado col_qual 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // table_col ::= id col_type ParentesisAbierto Numero ParentesisCerrado col_qual 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // table_col ::= id SET ParentesisAbierto value_list ParentesisCerrado col_qual 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // table_col ::= id ENUM ParentesisAbierto value_list ParentesisCerrado col_qual 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // table_col ::= id col_type col_qual 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col",90, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // table_col_list ::= table_col_list Coma table_col 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col_list",91, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // table_col_list ::= table_col 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("table_col_list",91, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // index_col ::= id_puntos ascdesc_state 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("index_col",62, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // index_col_list ::= index_col_list Coma index_col 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("index_col_list",63, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // index_col_list ::= index_col 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("index_col_list",63, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // drop_index ::= id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("drop_index",43, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // drop_view ::= id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("drop_view",46, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // create_database_enhanced ::= String String String String String 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_database_enhanced",31, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // create_database_enhanced ::= String String String 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_database_enhanced",31, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // collate_state ::= COLLATE Identificador 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("collate_state",29, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // size_status ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("size_status",88, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // size_status ::= SIZE Igual Numero 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("size_status",88, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // file_spec ::= ParentesisAbierto NAMES Igual String FILENAME Igual String size_status ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("file_spec",49, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // file_group ::= file_group Coma file_spec 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("file_group",48, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // file_group ::= file_spec 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("file_group",48, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // on_state ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("on_state",68, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // on_state ::= LOG ON file_group 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("on_state",68, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // on_state ::= ON PRIMARY file_group 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("on_state",68, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // on_state ::= ON file_group 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("on_state",68, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // create_database_legacy ::= Identificador on_state collate_state 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_database_legacy",32, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // drop_database ::= IF EXISTS id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("drop_database",42, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // drop_database ::= id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("drop_database",42, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // drop_procedure ::= id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("drop_procedure",44, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // drop_table ::= id_puntos CASCADE CONSTRAINTS 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("drop_table",45, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // drop_table ::= id_puntos CASCADE 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("drop_table",45, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // drop_table ::= id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("drop_table",45, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // del ::= top FROM id_puntos where 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("del",41, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ascdesc_state ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("ascdesc_state",22, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ascdesc_state ::= DESC 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("ascdesc_state",22, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ascdesc_state ::= ASC 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("ascdesc_state",22, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // create_index ::= id_puntos ON id_puntos ParentesisAbierto index_col_list ascdesc_state ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_index",34, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // with_check_option ::= WITH CASCADE CHECK OPTION 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("with_check_option",101, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // with_check_option ::= WITH LOCAL CHECK OPTION 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("with_check_option",101, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // with_check_option ::= WITH CHECK OPTION 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("with_check_option",101, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // with_check_option ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("with_check_option",101, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // create_view ::= id_puntos AS SELECT select_union 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_view",37, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // create_view ::= id_puntos ParentesisAbierto id ParentesisCerrado AS SELECT select_union 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_view",37, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // param_dir ::= IN_OUT 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("param_dir",74, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // param_dir ::= OUT 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("param_dir",74, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // param_dir ::= IN 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("param_dir",74, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // proc_param ::= id col_type ParentesisAbierto Numero Coma Numero ParentesisCerrado param_dir 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_param",75, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // proc_param ::= id col_type ParentesisAbierto Numero ParentesisCerrado param_dir 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_param",75, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // proc_param ::= id col_type param_dir 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_param",75, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // proc_param_list ::= Arroba proc_param Coma proc_param_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_param_list",76, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // proc_param_list ::= Arroba proc_param 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_param_list",76, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // proc_param_list ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_param_list",76, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // proc_return_type ::= col_type ParentesisAbierto Numero Coma Numero ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_return_type",77, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // proc_return_type ::= col_type ParentesisAbierto Numero ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_return_type",77, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // proc_return_type ::= col_type 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_return_type",77, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // proc_return_type ::= RESULT_SET 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_return_type",77, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // proc_return_type ::= NONE 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("proc_return_type",77, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // alter_function ::= id_list proc_param_list RETURNS col_type as_opt BEGIN muchos_statement RETURN expression END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_function",19, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // alter_function ::= id_puntos ParentesisAbierto proc_param_list ParentesisCerrado RETURNS col_type as_opt BEGIN muchos_statement END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_function",19, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // alter_procedure ::= id_list proc_param_list as_opt BEGIN muchos_statement END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_procedure",20, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // alter_procedure ::= id_puntos ParentesisAbierto proc_param_list ParentesisCerrado as_opt BEGIN muchos_statement END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_procedure",20, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // muchos_statement ::= muchos_statement statement 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("muchos_statement",64, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // as_opt ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("as_opt",21, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // as_opt ::= AS 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("as_opt",21, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // create_func ::= id_list proc_param_list RETURNS col_type as_opt BEGIN muchos_statement RETURN expression END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_func",33, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // create_func ::= id_puntos ParentesisAbierto proc_param_list ParentesisCerrado RETURNS col_type as_opt BEGIN muchos_statement END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_func",33, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // create_procedure ::= id_list proc_param_list as_opt BEGIN muchos_statement END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_procedure",35, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // create_procedure ::= id_puntos ParentesisAbierto proc_param_list ParentesisCerrado as_opt BEGIN muchos_statement END 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_procedure",35, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // create_table ::= id_puntos String ParentesisAbierto table_col_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_table",36, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // create_table ::= id_puntos ParentesisAbierto table_col_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("create_table",36, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // insert_values_list ::= insert_values_list Coma ParentesisAbierto value_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("insert_values_list",18, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // insert_values_list ::= ParentesisAbierto value_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("insert_values_list",18, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // insert ::= id_puntos VALUES insert_values_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("insert",17, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // insert ::= id_puntos ParentesisAbierto id_list ParentesisCerrado VALUES insert_values_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("insert",17, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // update ::= id SET set_list FROM table_list where 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("update",16, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // update ::= top id SET set_list where 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("update",16, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // select ::= select_cols INTO id_list FROM table_list where group_by having order_by 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select",15, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // select ::= select_cols FROM table_list where group_by having order_by for_update 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select",15, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // select ::= select_cols 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select",15, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // union_qual ::= ALL 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("union_qual",14, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // union_qual ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("union_qual",14, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // select_union ::= select UNION union_qual SELECT select_union 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_union",13, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // select_union ::= select 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("select_union",13, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // references_col_list ::= ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("references_col_list",12, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // references_col_list ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("references_col_list",12, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // alter_table_constraint_type ::= FOREIGN KEY id REFERENCES id_puntos references_col_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table_constraint_type",11, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // alter_table_constraint_type ::= FOREIGN KEY ParentesisAbierto id ParentesisCerrado REFERENCES id_puntos references_col_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table_constraint_type",11, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // alter_table_constraint_type ::= UNIQUE ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table_constraint_type",11, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // alter_table_constraint_type ::= PRIMARY KEY ParentesisAbierto id ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table_constraint_type",11, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // alter_table_constraint ::= ADD CONSTRAINT id alter_table_constraint_type 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table_constraint",10, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // alter_table_constraint ::= CONSTRAINT id alter_table_constraint_type 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table_constraint",10, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // alter_table ::= id_list DROP CONSTRAINT id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // alter_table ::= id_list DROP id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // alter_table ::= id_list DROP INDEX id_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // alter_table ::= id_list DROP COLUMN id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // alter_table ::= id_list ALTER ParentesisAbierto table_col_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // alter_table ::= id_list ALTER table_col_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // alter_table ::= id_list ALTER COLUMN ParentesisAbierto table_col_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // alter_table ::= id_list ALTER COLUMN table_col_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // alter_table ::= id_list RENAME COLUMN id TO id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // alter_table ::= id_list WITH CHECK ADD ParentesisAbierto table_col_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // alter_table ::= id_list WITH CHECK ADD table_col_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // alter_table ::= id_list WITH NOCHECK ADD ParentesisAbierto table_col_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // alter_table ::= id_list WITH NOCHECK ADD table_col_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // alter_table ::= id_list ADD ParentesisAbierto table_col_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // alter_table ::= id_list ADD table_col_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // alter_table ::= id_list ADD COLUMN ParentesisAbierto table_col_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // alter_table ::= id_list ADD INDEX id_list ParentesisAbierto index_col_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // alter_table ::= id_list ADD COLUMN table_col_list 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alter_table",9, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // limit_select ::= LIMIT Numero Coma Numero 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("limit_select",8, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // limit_select ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("limit_select",8, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // top ::= TOP ParentesisAbierto expression ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("top",7, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // top ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("top",7, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // call_params ::= ParentesisAbierto value_list ParentesisCerrado 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("call_params",6, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // call_params ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("call_params",6, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // isolation ::= READ_UNCOMMITTED 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("isolation",5, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // isolation ::= READ_COMMITTED 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("isolation",5, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // boolean_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("boolean_value",4, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // boolean_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("boolean_value",4, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cluster ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("cluster",3, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cluster ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("cluster",3, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cluster ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("cluster",3, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cursor_state ::= CURSOR FOR SELECT select_union OPEN id FETCH NEXT FROM id INTO proc_param 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("cursor_state",2, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cursor_state ::= CURSOR FOR SELECT select_union OPEN id FETCH NEXT FROM id INTO proc_param WHILE Arroba Arroba FETCH_STATUS Igual Numero BEGIN muchos_statement END CLOSE DEALLOCATE id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("cursor_state",2, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-23)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cursor_state ::= CURSOR FOR SELECT select_union OPEN id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("cursor_state",2, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dropState ::= INDEX drop_index 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("dropState",110, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dropState ::= VIEW drop_view 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("dropState",110, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dropState ::= PROCEDURE drop_procedure 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("dropState",110, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dropState ::= TABLE drop_table 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("dropState",110, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dropState ::= DATABASE drop_database 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("dropState",110, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // alterState ::= TABLE alter_table 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alterState",109, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // alterState ::= FUNCTION alter_function 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alterState",109, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // alterState ::= PROCEDURE alter_procedure 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("alterState",109, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // createState ::= FUNCTION create_func 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("createState",108, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // createState ::= SAVEPOINT id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("createState",108, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // createState ::= PROCEDURE create_procedure 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("createState",108, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // createState ::= UNIQUE cluster INDEX create_index 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("createState",108, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // createState ::= cluster INDEX create_index 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("createState",108, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // createState ::= VIEW create_viewwith_check_option 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("createState",108, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // createState ::= TABLE create_table 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("createState",108, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // createState ::= DATABASE create_database_legacy 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("createState",108, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= EXEC id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= DECLARE idcursor_state 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= TRUNCATE TABLE id_puntos 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= END TRANSACTION 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= END TRAN 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= SET TRANSACTION_ISOLATION isolation 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= SET READ_ONLY boolean_value 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= COMMIT TRANSACTION 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= COMMIT TRAN 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= COMMIT 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= ROLLBACK TRANSACTION 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= ROLLBACK TRAN 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= ROLLBACK 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= ROLLBACK id 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= BEGIN TRAN 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= BEGIN TRANSACTION 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= DELETE del 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= ALTER alterState 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= DROP dropState 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= CREATE createState 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= INSERT INTO insert 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= INSERT insert 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= UPDATE update 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= SELECT select_union 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fin_state ::= 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("fin_state",102, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fin_state ::= PuntoyComa GO 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("fin_state",102, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fin_state ::= GO 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("fin_state",102, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fin_state ::= PuntoyComa 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("fin_state",102, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= error 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement_list",0, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statement_list ::= statement fin_state 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("statement_list",0, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintaxis$parser.done_parsing();
          return CUP$sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

