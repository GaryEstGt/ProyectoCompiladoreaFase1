/* The following code was generated by JFlex 1.4.3 on 27/08/19 03:16 PM */

package analizadorlexico;
import static analizadorlexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/08/19 03:16 PM from the specification file
 * <tt>C:/Users/garya/ProyectoCompiladoreaFase1/analizadorLexico/src/analizadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\4\2\0\1\10\22\0\1\11\1\53\1\0\1\67"+
    "\1\0\1\50\1\54\1\6\1\62\1\63\1\47\1\46\1\11\1\44"+
    "\1\57\1\5\1\71\1\70\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\0\1\56\1\51\1\45\1\52\1\0\1\66\1\12"+
    "\1\31\1\23\1\13\1\16\1\41\1\34\1\25\1\27\1\43\1\32"+
    "\1\14\1\36\1\20\1\26\1\33\1\2\1\17\1\22\1\15\1\24"+
    "\1\37\1\35\1\42\1\21\1\30\1\60\1\0\1\61\1\0\1\40"+
    "\1\0\4\1\1\72\25\1\1\64\1\55\1\65\1\7\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\26\2"+
    "\1\7\2\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\1\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\0\2\2\1\37\2\2\1\37\24\2"+
    "\1\37\17\2\1\37\30\2\2\37\4\2\1\37\1\2"+
    "\2\37\24\2\1\37\22\2\1\4\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\2\0\1\47\1\0\1\50"+
    "\1\51\1\52\1\0\1\35\5\0\1\53\1\37\11\2"+
    "\1\37\30\2\1\37\30\2\1\37\2\2\1\37\34\2"+
    "\1\37\10\2\1\37\2\2\1\37\14\2\1\37\22\2"+
    "\1\37\7\2\1\37\2\2\2\4\1\0\1\54\1\0"+
    "\1\55\1\56\4\0\1\4\10\2\1\37\13\2\1\37"+
    "\4\2\1\37\1\2\1\0\6\2\1\37\16\2\1\37"+
    "\27\2\1\37\17\2\2\37\20\2\1\37\5\2\1\37"+
    "\5\2\1\46\1\3\1\34\1\0\1\4\3\0\13\2"+
    "\1\37\6\2\1\0\36\2\1\37\35\2\1\37\3\2"+
    "\1\0\1\4\10\2\1\0\1\37\40\2\2\0\5\2"+
    "\1\0\4\2\1\37\3\2\1\37\1\2\1\37\13\2"+
    "\1\57\3\2\1\37\7\2\1\37\3\2\1\37\32\2"+
    "\1\37\21\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[700];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\166\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\73\0\73\0\73\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\73\0\u08c2\0\u08fd\0\73\0\u0938\0\73"+
    "\0\u0973\0\73\0\73\0\u09ae\0\261\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\166\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c"+
    "\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4"+
    "\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044"+
    "\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c"+
    "\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\u08c2\0\u2591\0\u25cc\0\73"+
    "\0\u2607\0\73\0\73\0\73\0\u2642\0\u267d\0\u26b8\0\u26f3"+
    "\0\u272e\0\u2769\0\u0a5f\0\u0a5f\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u1098\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca"+
    "\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a"+
    "\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152"+
    "\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a"+
    "\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502"+
    "\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2"+
    "\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a"+
    "\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62"+
    "\0\u3502\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff"+
    "\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7"+
    "\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af"+
    "\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387"+
    "\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f"+
    "\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737"+
    "\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4\0\73"+
    "\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac"+
    "\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84"+
    "\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c"+
    "\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034"+
    "\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c"+
    "\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4"+
    "\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581\0\u55bc"+
    "\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759\0\u5794"+
    "\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931\0\u596c"+
    "\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09\0\u5b44"+
    "\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c"+
    "\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e\0\u4686\0\u5eb9"+
    "\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b\0\u6056\0\u6091"+
    "\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3\0\u622e\0\u6269"+
    "\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb\0\u6406\0\u6441"+
    "\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568\0\u65a3\0\u65de\0\u6619"+
    "\0\u6654\0\u668f\0\u66ca\0\73\0\u6705\0\u6740\0\u677b\0\u67b6"+
    "\0\u4b5d\0\u677b\0\u67f1\0\u682c\0\u27a4\0\u6867\0\u68a2\0\u68dd"+
    "\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5"+
    "\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d"+
    "\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u6db4\0\u6def\0\u6e2a\0\u6e65"+
    "\0\u6ea0\0\u6edb\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7\0\u7002\0\u703d"+
    "\0\u7078\0\u70b3\0\u70ee\0\u7129\0\u7164\0\u719f\0\u71da\0\u7215"+
    "\0\u7250\0\u728b\0\u72c6\0\u7301\0\u733c\0\u7377\0\u73b2\0\u73ed"+
    "\0\u7428\0\u7463\0\u749e\0\u74d9\0\u7514\0\u4225\0\u754f\0\u758a"+
    "\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1\0\u76ec\0\u7727\0\u7762"+
    "\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889\0\u78c4\0\u78ff\0\u793a"+
    "\0\u7975\0\u56a8\0\u79b0\0\u79eb\0\u7a26\0\u7a61\0\u7a9c\0\u7ad7"+
    "\0\u7b12\0\u7b4d\0\u7b88\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74\0\u7caf"+
    "\0\u2855\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c"+
    "\0\u7e87\0\u7ec2\0\u7efd\0\u7f38\0\u7f73\0\u7fae\0\u7fe9\0\u8024"+
    "\0\u805f\0\u809a\0\u80d5\0\u8110\0\u814b\0\u8186\0\u81c1\0\u81fc"+
    "\0\u8237\0\u8272\0\u82ad\0\u82e8\0\u8323\0\u835e\0\u8399\0\u83d4"+
    "\0\u840f\0\u7a9c\0\u844a\0\u8485\0\u84c0\0\u84fb\0\u8536\0\u8571"+
    "\0\u85ac\0\u85e7\0\u8622\0\u865d\0\u8698\0\u7efd\0\u86d3\0\u870e"+
    "\0\u35ee\0\u2c40\0\u8749\0\u8784\0\u87bf\0\u87fa\0\u8835\0\u8870"+
    "\0\u88ab\0\u88e6\0\u8921\0\u1a46\0\u895c\0\u8997\0\u89d2\0\u7a9c"+
    "\0\u8a0d\0\u8a48\0\u8a83\0\73\0\u8abe\0\u8af9\0\u8b34\0\u8b6f"+
    "\0\u8baa\0\u8be5\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47"+
    "\0\u8d82\0\u8dbd\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f"+
    "\0\u8f5a\0\u8f95\0\u8fd0\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7"+
    "\0\u9132\0\u916d\0\u91a8\0\u91e3\0\u921e\0\u9259\0\u9294\0\u92cf"+
    "\0\u930a\0\u9345\0\u9380\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7"+
    "\0\u94e2\0\u951d\0\u9558\0\u9593\0\u8c5b\0\u95ce\0\u9609\0\u9644"+
    "\0\u967f\0\u96ba\0\u96f5\0\u9730";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[700];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\2\5"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\3\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\2\65\1\3"+
    "\74\0\3\3\6\0\32\3\24\0\3\3\3\0\1\4"+
    "\53\0\1\66\10\0\2\4\5\0\1\5\3\0\2\5"+
    "\130\0\1\67\23\0\4\7\1\0\1\7\1\70\2\71"+
    "\62\7\1\0\3\3\6\0\1\3\1\72\1\73\1\74"+
    "\1\3\1\75\1\76\1\3\1\77\1\100\1\101\4\3"+
    "\1\102\5\3\1\103\4\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\104\3\3\1\105\1\106\4\3\1\107\1\3"+
    "\1\110\1\111\1\3\1\112\12\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\113\3\3\1\114\7\3\1\115\1\116"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\1\117\3\3"+
    "\1\120\1\121\2\3\1\122\2\3\1\123\1\124\1\125"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\2\3\1\126"+
    "\2\3\1\127\1\130\1\3\1\131\17\3\1\132\1\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\133\3\3\1\134"+
    "\5\3\1\135\1\3\1\136\1\137\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\140\3\3\1\141\4\3\1\142"+
    "\1\143\1\3\1\144\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\145\25\3\24\0\3\3\1\0\1\3"+
    "\1\146\1\3\6\0\1\147\2\3\1\150\1\151\2\3"+
    "\1\152\1\3\1\153\1\154\1\155\1\156\1\157\3\3"+
    "\1\160\2\3\1\161\5\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\162\1\3\1\163\2\3\1\164\4\3\1\165"+
    "\1\166\1\167\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\170\1\3\1\171\10\3\1\172\10\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\173\13\3\1\174\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\175\1\176"+
    "\2\3\1\177\1\200\6\3\1\201\3\3\1\202\1\3"+
    "\1\203\2\3\24\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\204\4\3\1\205\1\3\1\206\13\3\1\207\2\3"+
    "\1\74\2\3\24\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\210\15\3\24\0\3\3\1\0\3\3\6\0\1\211"+
    "\3\3\1\212\1\213\1\3\1\74\2\3\1\214\1\3"+
    "\1\215\1\216\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\217\10\3\1\220\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\221\1\3\1\222\1\3\1\223\1\224"+
    "\4\3\1\225\1\3\1\226\1\227\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\230\1\3\1\231\1\232"+
    "\6\3\1\233\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\234\4\3\1\235\5\3\1\236\1\237\1\215\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\240\3\3\1\241"+
    "\7\3\1\242\1\243\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\244\14\3\1\245\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\246\1\3\1\247\1\3\1\250\1\251"+
    "\4\3\1\252\1\3\1\253\1\254\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\255\15\3\24\0\3\3"+
    "\44\0\1\256\73\0\1\257\72\0\1\260\72\0\1\261"+
    "\72\0\1\262\101\0\1\263\73\0\1\264\20\0\1\265"+
    "\12\0\1\266\25\0\1\267\1\0\1\267\21\0\2\265"+
    "\1\266\61\0\1\270\55\0\1\271\16\0\1\272\74\0"+
    "\1\273\74\0\1\274\6\0\1\66\12\0\1\275\51\0"+
    "\2\66\1\275\4\276\1\277\1\300\1\276\2\301\36\276"+
    "\1\302\23\276\4\303\1\0\1\303\1\304\64\303\4\71"+
    "\1\0\1\71\1\70\64\71\1\0\3\3\6\0\2\74"+
    "\30\3\24\0\3\3\1\0\3\3\6\0\2\3\1\305"+
    "\1\306\26\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\74\25\3\24\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\74\5\3\1\74\22\3\24\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\307\1\74\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\310\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\311\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\312\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\74\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\313\3\3\1\74\22\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\314\1\3\1\315\3\3"+
    "\1\217\1\3\1\316\1\317\15\3\1\320\2\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\321\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\24\3\1\321\5\3\24\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\322\11\3\1\323"+
    "\5\3\24\0\3\3\1\0\3\3\6\0\1\324\7\3"+
    "\1\325\21\3\24\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\326\20\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\231\21\3\24\0\3\3\1\0\3\3\6\0\1\327"+
    "\5\3\1\330\16\3\1\331\1\3\1\231\2\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\332\10\3\1\333\11\3"+
    "\1\306\6\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\334\11\3\1\75\11\3\24\0\3\3\1\0\3\3"+
    "\6\0\17\3\1\335\12\3\24\0\3\3\1\0\3\3"+
    "\6\0\24\3\1\336\3\3\1\337\1\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\340\6\3\1\341\2\3\1\342"+
    "\2\3\1\343\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\344\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\345\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\21\3\1\74\10\3\24\0\3\3\1\0\3\3\6\0"+
    "\24\3\1\346\5\3\24\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\75\21\3\24\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\347\24\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\3\1\350\30\3\24\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\351\20\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\352\1\353\4\3\1\354\3\3\1\355\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\356\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\357\1\3\1\360"+
    "\1\361\4\3\1\362\1\363\7\3\1\364\3\3\1\365"+
    "\1\3\1\366\2\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\75\27\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\367\20\3\1\370\6\3\24\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\371\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\372\20\3\1\373\5\3\24\0"+
    "\3\3\1\0\3\3\6\0\30\3\1\231\1\3\24\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\145\16\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\374\21\3\1\375"+
    "\5\3\24\0\3\3\1\0\3\3\6\0\3\3\1\74"+
    "\2\3\1\376\2\3\1\377\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0100\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0101\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\25\3\1\75\4\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0102\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0103\1\u0104\4\3\1\u0105\1\u0106\12\3\1\u0107"+
    "\5\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u0108"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u0109"+
    "\5\3\1\u010a\16\3\24\0\3\3\1\0\3\3\6\0"+
    "\17\3\1\u010b\4\3\1\74\5\3\24\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\u010c\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\24\3\1\75\5\3\24\0\3\3\1\0"+
    "\3\3\6\0\16\3\1\75\13\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u010d\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u010e\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u010f\4\3\1\u0110\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\u0111\1\3\1\126\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0112\7\3\1\u0113"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u0114"+
    "\24\3\24\0\3\3\1\0\3\3\6\0\1\u0115\3\3"+
    "\1\u0116\25\3\24\0\3\3\1\0\3\3\6\0\1\u0117"+
    "\1\3\1\u0118\2\3\1\u0119\1\u011a\3\3\1\u011b\11\3"+
    "\1\u011c\5\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u011d\2\3\1\u011e\1\u011f\10\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0120\3\3\1\u0121\10\3\1\u0122\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\3\1\u0123\17\3"+
    "\1\306\10\3\24\0\3\3\1\0\3\3\6\0\25\3"+
    "\1\u0124\4\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0125\7\3\1\u0100\17\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\3\1\306\30\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\217\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0126\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0127\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\310\1\u0128\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0129\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\27\3\1\u012a\2\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u012b\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\3\1\u012c\1\3\1\u012d\2\3\1\306"+
    "\1\3\1\u012e\1\u012f\3\3\1\u0130\3\3\1\u0131\10\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u0132\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\24\3\1\u0133\5\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\75\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u0134\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u0135\16\3"+
    "\1\255\7\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0136\7\3\1\u0137\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0138\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0139\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u013a\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\7\3\1\74\22\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u013b\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\3\1\74\3\3\1\u013c\2\3\1\u013d\21\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\345\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u013e\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u013f\7\3\1\u0140"+
    "\1\u0141\14\3\24\0\3\3\1\0\3\3\6\0\17\3"+
    "\1\u0142\12\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u0143\21\3\24\0\3\3\1\0\3\3\6\0\25\3"+
    "\1\u0144\4\3\24\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u0145\15\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\74\26\3\24\0\3\3\1\0\3\3\6\0\1\u011b"+
    "\13\3\1\u0146\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0147\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u0148\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u0149\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u014a\10\3\1\135\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0138\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u014b\24\3\1\74\1\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0120\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\3\1\u014c\4\3\1\215"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u014d"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u014e"+
    "\2\3\1\u014f\24\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0150\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\126\27\3\24\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u0151\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u014b\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0152\7\3\1\u0153\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u013b\3\3\1\u0154\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0155\4\3\1\u0156"+
    "\17\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u0157"+
    "\2\3\1\113\24\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\345\14\3\24\0\3\3\4\256\1\u0158\3\256"+
    "\1\u0159\62\256\44\0\1\u015a\1\0\1\u015a\27\0\1\u015b"+
    "\64\0\1\u015b\5\0\1\u015c\64\0\2\u015c\4\0\1\u015d"+
    "\40\0\1\u015e\1\0\1\u015e\21\0\1\u015d\2\0\4\276"+
    "\1\277\1\300\1\276\2\301\36\276\1\u015f\23\276\47\277"+
    "\1\u0160\23\277\4\301\1\277\1\300\41\301\1\u0161\27\301"+
    "\1\277\1\300\41\301\1\u015f\23\301\4\u0162\1\0\1\u0163"+
    "\41\u0162\1\302\23\u0162\1\0\3\3\6\0\14\3\1\u0164"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u0100"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u0165"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\15\3\1\u0166"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\13\3\1\u0167"+
    "\16\3\24\0\3\3\1\0\3\3\6\0\14\3\1\u0168"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\1\u0169\3\3"+
    "\1\74\25\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u016a\27\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u016b\25\3\24\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u016c\20\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u016d\12\3\1\u016e\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u016f\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\17\3\1\135\12\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\255\31\3\24\0\3\3\1\0\3\3\6\0\22\3"+
    "\1\u0170\7\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0171\5\3\1\u0172\6\3\1\74\11\3\24\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\74\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u0124\30\3\24\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\u0173\7\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u013b\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\74\30\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u013b\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0174\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0175\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\21\3\1\u0176\10\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0177\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u0178\6\3\1\u0179\14\3\24\0"+
    "\3\3\1\0\3\3\6\0\26\3\1\u017a\3\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\74\1\3\1\u0164"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\22\3\1\u017b"+
    "\1\3\1\74\5\3\24\0\3\3\1\0\1\3\1\u017c"+
    "\1\3\6\0\32\3\24\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\74\23\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u017d\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u017e\27\3\24\0\3\3\1\0\3\3\6\0"+
    "\32\3\1\u017f\23\0\3\3\1\0\3\3\6\0\1\u0180"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u0181"+
    "\1\u0182\24\3\24\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u014d\20\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0183\25\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\74\4\3\1\u0184\21\3\24\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u0185\21\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\3\1\u0186\1\74\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0187\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\12\3\1\u0188\17\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0189\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u018a\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u018b\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u018c\7\3\1\u018d\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u018e\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u018f\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\74\1\u0190\10\3\1\u0191"+
    "\7\3\24\0\3\3\1\0\3\3\6\0\13\3\1\231"+
    "\16\3\24\0\3\3\1\0\3\3\6\0\12\3\1\u0192"+
    "\2\3\1\u0193\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0194\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0195\27\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0196\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\74\4\3\1\u0197\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\13\3\1\u0198\16\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\74\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0199\3\3\1\u019a\1\u019b\11\3"+
    "\1\u019c\6\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u019d\26\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u019e\25\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u019f\17\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u01a0\21\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\310\6\3\1\u01a1\1\3\1\u0156\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u01a2\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u01a3\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\220\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u01a4\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u01a5\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u01a6\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\75\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u01a7\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u01a8\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\2\74\4\3\1\u01a9\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u01aa\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u016b\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u0194\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u01ab\2\3\1\u01ac\21\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u01ad\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\11\3\1\u01ae\20\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u01af\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u01b0\7\3\1\u01b1"+
    "\17\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u01b2"+
    "\24\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u01b3"+
    "\2\3\1\u01b4\1\3\1\u01b5\14\3\1\u01b6\4\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\231\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\21\3\1\u01b7\2\3\1\u01b8"+
    "\5\3\24\0\3\3\1\0\1\3\1\u01b9\1\3\6\0"+
    "\14\3\1\345\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u01ba\23\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\227\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\22\3\1\75\7\3\24\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\103\23\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u0149\31\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u0122\14\3\24\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u01bb\30\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u01bc\25\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0100\14\3\1\u0131\10\3\24\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u01bd\23\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u01be\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u01bf\21\3\24\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u01c0\23\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u01c1\10\3\1\u01c2\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u01c3\7\3\1\74\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u01c4\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\2\3\1\u01c5\27\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u01c6\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\231\17\3"+
    "\24\0\3\3\1\0\3\3\6\0\2\3\1\u01c7\27\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u01c8\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\20\3\1\u0146\11\3"+
    "\24\0\3\3\1\0\3\3\6\0\23\3\1\u01c9\6\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\u0138\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\23\3\1\126\6\3\24\0"+
    "\3\3\1\0\3\3\6\0\20\3\1\74\11\3\24\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\74\16\3\24\0"+
    "\3\3\1\0\3\3\6\0\26\3\1\u01ca\3\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\74\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u01cb\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\11\3\1\333\20\3\24\0"+
    "\3\3\1\0\3\3\6\0\11\3\1\u01cc\20\3\24\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u01cd\1\u01ce\7\3"+
    "\1\u016d\10\3\24\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u01cf\20\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\231\5\3\1\u0100\7\3\1\u01d0\1\u01d1\4\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u01d2\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\100\14\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\231\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\17\3\1\333\12\3\24\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\321\17\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\74\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u01d3\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u01d4\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\75\1\u01d5\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u0139\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\135\17\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\u016b\17\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\u01d6\17\3"+
    "\24\0\3\3\1\0\3\3\6\0\7\3\1\u0124\1\3"+
    "\1\142\20\3\24\0\3\3\1\0\3\3\6\0\23\3"+
    "\1\74\6\3\24\0\3\3\1\0\3\3\6\0\1\231"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u01d7"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\24\3\1\74"+
    "\5\3\24\0\3\3\1\0\3\3\6\0\11\3\1\100"+
    "\20\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u01d8"+
    "\1\u01d9\25\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\332\23\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u01da\1\3\1\74\25\3\24\0\3\3\4\0\1\u0158"+
    "\71\0\1\u01db\64\0\1\u01db\5\0\1\u015b\64\0\2\u015b"+
    "\4\0\1\u015c\57\0\1\u01dc\4\0\2\u015c\4\0\1\u015d"+
    "\64\0\2\u015d\4\0\1\u01dd\64\0\1\u01dd\2\0\4\301"+
    "\1\277\1\u0163\41\301\1\u015f\23\301\5\277\1\u0158\41\277"+
    "\1\u0160\23\277\4\u01de\1\277\1\u01df\41\u01de\1\u01e0\23\u01de"+
    "\4\u0162\1\0\1\u01e1\71\u0162\1\0\1\u01e1\41\u0162\1\u01e2"+
    "\23\u0162\1\0\3\3\6\0\11\3\1\u0112\20\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\100\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\345\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u01e3\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u01b7\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\17\3\1\u01e4\12\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u01e5\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\75\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u01e6\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u01e7\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\24\3\1\333\5\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u01e8\17\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u01e9\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u01ea\7\3\1\u01eb\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u01ec\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\u01ed\17\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\u0147\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u01ee\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u01ef\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\10\3\1\u01f0\21\3"+
    "\24\0\3\3\1\0\3\3\6\0\10\3\1\u01f1\21\3"+
    "\24\0\3\3\1\0\3\3\6\0\2\3\1\u0124\27\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u01f2\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\22\3\1\306\7\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\333\17\3"+
    "\24\0\3\3\1\0\3\3\6\0\10\3\1\u01f3\5\3"+
    "\1\u01f4\13\3\24\0\3\3\1\0\3\3\6\0\25\3"+
    "\1\u013b\4\3\24\0\3\3\16\0\1\u01f5\55\0\3\3"+
    "\6\0\21\3\1\75\10\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u01f6\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u019e\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\21\3\1\u01f7\10\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0194\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0199\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u01f8\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u01f9\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\345\24\3\24\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u01fa\6\3\1\u01e7\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u01fb\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u01fc\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\231\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\20\3\1\75\11\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u01fd\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\17\3\1\u01fe\12\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u01ff\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\u0200\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\333\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u01f6\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\74\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0201\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u01d2\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0202\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0203\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0204\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0112\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\74\13\3\1\u0205\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u0206\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0207\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\231\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\306\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0208\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0209\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u020a\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u020b\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\24\3\1\u020c\5\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u020d\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\3\1\u01ba\30\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u020e\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u020f\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0210\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0211\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0212\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u0100\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0213\25\3\1\u01ca\3\3\24\0\3\3\1\0"+
    "\3\3\6\0\20\3\1\u0214\11\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0215\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0216\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\24\3\1\345\5\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0217\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0218\14\3\1\u0219\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u021a\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u021b\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u018c\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\231\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\75\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u021c\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u021d\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u021e\26\3\24\0\3\3\1\0"+
    "\1\3\1\u021f\1\3\6\0\1\3\1\u0220\3\3\1\u0221"+
    "\22\3\1\u0222\1\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0223\27\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0184\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0224\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\30\3\1\74\1\3\24\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\u0225\20\3\24\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u0226\14\3\1\306\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\231\1\u0227\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u0205\17\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0228\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u0229\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\3\1\u022a\30\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\123\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u022b\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\333\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u011b\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u022c\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u022d\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u022e\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u022f\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u0230\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\326\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\27\3\1\u01ac\2\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0186\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0231\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0232\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0233\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\222\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u0234\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\27\3\1\u0235\2\3\24\0\3\3\3\0\1\u01db"+
    "\64\0\2\u01db\4\0\1\u01dd\64\0\2\u01dd\1\0\4\u01de"+
    "\1\277\42\u01de\1\u01e0\23\u01de\4\u01e2\1\0\42\u01e2\1\u0236"+
    "\23\u01e2\4\u01de\1\277\1\u0237\41\u01de\1\u01e0\23\u01de\1\0"+
    "\3\3\6\0\5\3\1\u0238\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\126\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u0239\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\75\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\231\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u0207\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u023a\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u019e\23\3\24\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u023b\23\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0120\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u023c\21\3\24\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u01d0\24\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\157\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u0154\1\3\1\u01b0\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u023d\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u023e\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u023f\15\3\24\0\3\3\42\0\1\u0240"+
    "\31\0\3\3\6\0\6\3\1\333\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0241\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\141\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\147\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u019e\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\27\3\1\u0242\2\3\24\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u0243\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0244\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u0203\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\u011b\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0245\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\27\3\1\74\2\3\24\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\u0111\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u0138\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u01ac\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\3\1\75\30\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0246\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u0247\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u0248\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0249\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u024a\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\24\3\1\u024b\5\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\74\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u0124\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u011b\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\103\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\3\1\u024c\30\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u024d\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u024e\23\3\24\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\u024f\20\3\24\0\3\3\1\0\3\3"+
    "\6\0\21\3\1\u0250\10\3\24\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u010d\21\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0251\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u0252\21\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u0253\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u01b9\23\3\24\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\u01f7\20\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u0254\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\23\3\1\345\6\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u0203\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\12\3\1\u0255\17\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0256\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u0257\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\24\3\1\u013b\5\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u0258\31\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u0259\14\3\24\0\3\3\1\0\3\3\6\0\1\u025a"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u0103"+
    "\14\3\1\333\4\3\24\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u025b\21\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u025c\31\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\310\24\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u0112\14\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u025d\25\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\147\24\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\310\21\3\24\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u025e\30\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\217\24\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u025f\27\3\24\0\3\3\1\0\3\3\6\0\25\3"+
    "\1\306\4\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0260\25\3\24\0\3\3\1\0\3\3\6\0\22\3"+
    "\1\345\7\3\24\0\3\3\1\0\3\3\6\0\1\u0261"+
    "\31\3\24\0\3\3\4\u01e2\1\0\1\u0262\41\u01e2\1\u0236"+
    "\23\u01e2\4\u0262\1\0\42\u0262\1\u0263\23\u0262\1\0\3\3"+
    "\6\0\15\3\1\u0264\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\17\3\1\75\1\3\1\u025a\10\3\24\0\3\3"+
    "\1\0\3\3\6\0\17\3\1\u0265\12\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0103\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u0266\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u0267\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\107\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u0268\23\3\24\0\3\3\16\0\1\u0269"+
    "\55\0\3\3\6\0\15\3\1\u026a\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\100\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u026b\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\3\1\u026c\30\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u0124\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u026d\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u026e\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u026f\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0270\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\26\3\1\u0271\3\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0272\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0273\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0274\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0275\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u020e\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\74\10\3\1\u0166\14\3\24\0"+
    "\3\3\1\0\3\3\6\0\21\3\1\u0276\10\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0277\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u0278\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u022f\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0279\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\23\3\1\u027a\6\3\24\0\3\3"+
    "\1\0\3\3\6\0\21\3\1\u0194\10\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u027b\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u01ac\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0187\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u027c\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u027d\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u01e7\17\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u027e\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\30\3\1\u027f\1\3\24\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u025a\20\3\24\0\3\3"+
    "\4\u0262\1\0\1\u0280\41\u0262\1\u0263\23\u0262\1\0\3\3"+
    "\6\0\16\3\1\u0243\13\3\24\0\3\3\1\0\3\3"+
    "\6\0\12\3\1\u0281\17\3\24\0\3\3\1\0\3\3"+
    "\6\0\24\3\1\u0282\5\3\24\0\3\3\1\0\3\3"+
    "\6\0\25\3\1\u01b6\4\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0283\25\3\24\0\3\3\23\0\1\u0284"+
    "\50\0\3\3\6\0\22\3\1\u025e\7\3\24\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\373\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u0285\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0286\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\7\3\1\u0287\22\3\24\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u0288\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\332\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\26\3\1\u0289\3\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u028a\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u028b\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u028c\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u028d\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u028e\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u028f\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\7\3\1\u0290\22\3\24\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\215\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\373\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u028c\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0273\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\21\3\1\135\10\3\24\0\3\3\1\0"+
    "\3\3\6\0\26\3\1\u0291\3\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u013b\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u0194\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0292\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u0293\7\3\1\u0294\11\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u0112\1\3\1\u0295\6\3"+
    "\1\u019f\17\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u013a\24\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\327\23\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0296\26\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u0297\23\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u0298\21\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\231\25\3\24\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u0285\14\3\1\u0299\3\3\24\0\3\3\1\0\3\3"+
    "\6\0\13\3\1\u029a\10\3\1\u029b\5\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u029c\17\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u029d\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u029e\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u029f\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\322\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0232\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u02a0\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u02a1\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u02a2\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u02a3\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\3\1\u01b8\30\3\24\0\3\3\1\0"+
    "\3\3\6\0\24\3\1\u02a4\5\3\24\0\3\3\1\0"+
    "\3\3\6\0\7\3\1\u02a5\22\3\24\0\3\3\1\0"+
    "\3\3\6\0\24\3\1\u02a6\5\3\24\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\u02a7\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u02a8\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\u0100\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u01b7\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u02a9\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\21\3\1\u02aa\10\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u02ab\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u010d\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u01b6\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u02ac\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\13\3\1\u02ad\16\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u01f3\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u02ae\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u02af\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u02b0\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u02b1\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u02b2\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u02b3\21\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u02b4\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u02b5\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\7\3\1\u02b6\22\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\3\1\u02b7\1\3\1\u0296\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u02b8\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u02b9\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u02ba\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u02bb\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u02bc\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u02b5\21\3\24\0\3\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38763];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\40\1\3\11\5\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\2\11\5\1\1\0\165\1\6\11"+
    "\1\1\2\0\1\11\1\0\3\11\1\0\1\1\5\0"+
    "\224\1\1\11\1\1\1\0\1\1\1\0\2\1\4\0"+
    "\34\1\1\0\134\1\1\11\1\1\1\0\1\1\3\0"+
    "\22\1\1\0\100\1\1\0\11\1\1\0\41\1\2\0"+
    "\5\1\1\0\32\1\1\11\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[700];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int line;
    int column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { lexeme=yytext(); column=yycolumn; line=yyline; return ERRORFloatNumero;
          }
        case 48: break;
        case 44: 
          { lexeme=yytext(); column=yycolumn; line=yyline; return ERRORFloate;
          }
        case 49: break;
        case 34: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MayorIgual;
          }
        case 50: break;
        case 21: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ParentesisAbierto;
          }
        case 51: break;
        case 39: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Corchetes;
          }
        case 52: break;
        case 38: 
          { line=yyline; column=yycolumn; lexeme=yytext(); return ERRORDecimal;
          }
        case 53: break;
        case 11: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Multiplicacion;
          }
        case 54: break;
        case 6: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ERRORString;
          }
        case 55: break;
        case 22: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ParentesisCerrado;
          }
        case 56: break;
        case 33: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MenorIgual;
          }
        case 57: break;
        case 5: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Division;
          }
        case 58: break;
        case 28: 
          { lexeme=yytext(); column=yycolumn; line=yyline; return Float;
          }
        case 59: break;
        case 47: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ERRORComentarioAnidado;
          }
        case 60: break;
        case 2: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Identificador;
          }
        case 61: break;
        case 40: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Parentesis;
          }
        case 62: break;
        case 31: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Reservadas;
          }
        case 63: break;
        case 1: 
          { line=yyline; column=yycolumn; return ERROR;
          }
        case 64: break;
        case 25: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Arroba;
          }
        case 65: break;
        case 27: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Bit;
          }
        case 66: break;
        case 10: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Suma;
          }
        case 67: break;
        case 45: 
          { lexeme=yytext(); column=yycolumn; line=yyline; return ERRORFloatSigno;
          }
        case 68: break;
        case 18: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Punto;
          }
        case 69: break;
        case 26: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Numeral;
          }
        case 70: break;
        case 8: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Resta;
          }
        case 71: break;
        case 14: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Mayor;
          }
        case 72: break;
        case 17: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PuntoyComa;
          }
        case 73: break;
        case 35: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NoIgual;
          }
        case 74: break;
        case 43: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ERRORComilla;
          }
        case 75: break;
        case 7: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Guionbajo;
          }
        case 76: break;
        case 23: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LlaveAbierta;
          }
        case 77: break;
        case 19: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CorcheteAbierto;
          }
        case 78: break;
        case 41: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Llaves;
          }
        case 79: break;
        case 30: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return String;
          }
        case 80: break;
        case 12: 
          { lexeme=yytext();line=yyline; column=yycolumn; return Porcentaje;
          }
        case 81: break;
        case 42: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DobleNumeral;
          }
        case 82: break;
        case 37: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return or;
          }
        case 83: break;
        case 16: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return y;
          }
        case 84: break;
        case 32: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IgualIgual;
          }
        case 85: break;
        case 24: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LlaveCerrada;
          }
        case 86: break;
        case 20: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CorcheteCerrado;
          }
        case 87: break;
        case 9: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Igual;
          }
        case 88: break;
        case 36: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return and;
          }
        case 89: break;
        case 15: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SignoExclamacion;
          }
        case 90: break;
        case 3: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Numero;
          }
        case 91: break;
        case 29: 
          { line=yyline; column=yycolumn; return ERRORComentario;
          }
        case 92: break;
        case 4: 
          { /*Ignore*/
          }
        case 93: break;
        case 13: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Menor;
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
