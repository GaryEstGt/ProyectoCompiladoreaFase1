/* The following code was generated by JFlex 1.4.3 on 22/09/19 10:51 AM */

package analizadorlexico;
import static analizadorlexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/09/19 10:51 AM from the specification file
 * <tt>C:/Users/garya/ProyectoCompiladoreaFase1/analizadorLexico/src/analizadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\4\2\0\1\7\22\0\1\10\1\52\1\0\1\66"+
    "\1\0\1\47\1\53\1\6\1\61\1\62\1\46\1\45\1\10\1\43"+
    "\1\56\1\5\1\70\1\67\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\0\1\55\1\50\1\44\1\51\1\0\1\65\1\11"+
    "\1\30\1\22\1\12\1\15\1\40\1\33\1\24\1\26\1\42\1\31"+
    "\1\13\1\35\1\17\1\25\1\32\1\2\1\16\1\21\1\14\1\23"+
    "\1\36\1\34\1\41\1\20\1\27\1\57\1\0\1\60\1\0\1\37"+
    "\1\0\4\1\1\71\25\1\1\63\1\54\1\64\1\0\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\26\2"+
    "\1\6\2\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\1\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\0\1\34\2\2\1\35\2\2\1\36\24\2\1\37"+
    "\17\2\1\40\30\2\1\41\1\42\4\2\1\43\1\2"+
    "\1\44\1\45\1\2\1\46\4\2\1\47\17\2\1\50"+
    "\23\2\1\3\1\4\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\3\0\1\63\1\64"+
    "\1\65\1\2\1\66\1\67\1\70\1\2\1\71\3\2"+
    "\1\72\1\2\1\73\4\2\1\74\33\2\1\75\3\2"+
    "\1\76\30\2\1\77\3\2\1\100\3\2\1\101\7\2"+
    "\1\102\30\2\1\103\15\2\1\104\2\2\1\105\17\2"+
    "\1\106\1\107\1\2\1\110\13\2\1\111\12\2\1\112"+
    "\3\2\1\113\12\2\1\114\4\2\2\4\2\0\7\2"+
    "\1\115\2\2\1\116\1\117\3\2\1\120\1\121\5\2"+
    "\1\122\1\123\1\124\3\2\1\125\1\126\3\2\1\127"+
    "\3\2\1\130\2\2\1\131\2\2\1\132\1\2\1\133"+
    "\1\134\1\135\1\2\1\0\3\2\1\136\1\2\1\137"+
    "\2\2\1\140\1\141\10\2\1\142\1\2\1\143\6\2"+
    "\1\144\1\2\1\145\1\2\1\146\2\2\1\147\4\2"+
    "\1\150\15\2\1\151\1\152\3\2\1\153\1\154\7\2"+
    "\1\155\21\2\1\156\5\2\1\157\1\2\1\160\4\2"+
    "\1\161\1\162\5\2\1\163\7\2\1\164\5\2\1\165"+
    "\1\166\1\2\1\167\2\2\1\170\4\2\1\171\12\2"+
    "\1\172\3\2\1\173\1\2\1\174\1\175\10\2\1\176"+
    "\4\2\1\177\1\200\5\2\1\201\1\2\1\202\1\33"+
    "\1\2\1\203\23\2\1\204\1\205\1\206\1\2\1\207"+
    "\13\2\1\0\24\2\1\210\2\2\1\211\1\212\6\2"+
    "\1\213\17\2\1\214\4\2\1\215\1\2\1\216\4\2"+
    "\1\217\11\2\1\220\3\2\1\221\2\2\1\222\1\223"+
    "\1\2\1\224\2\2\1\225\1\2\1\226\11\2\1\227"+
    "\3\2\1\230\4\2\1\231\4\2\1\232\1\233\11\2"+
    "\1\234\1\235\4\2\1\236\1\2\1\237\1\240\1\2"+
    "\1\241\1\242\1\2\1\243\1\244\1\245\1\2\1\246"+
    "\1\2\1\247\2\2\1\250\1\251\1\252\4\2\1\253"+
    "\1\2\1\254\2\2\1\255\4\2\1\256\4\2\1\257"+
    "\1\260\6\2\1\261\14\2\1\262\1\0\1\263\3\2"+
    "\1\264\1\265\3\2\1\266\4\2\1\267\1\270\6\2"+
    "\1\271\10\2\1\272\4\2\1\273\2\2\1\274\1\275"+
    "\6\2\1\276\1\2\1\277\5\2\1\300\7\2\1\301"+
    "\1\302\2\2\1\303\1\304\2\2\1\305\1\306\13\2"+
    "\1\307\5\2\1\310\1\2\1\311\2\2\1\312\7\2"+
    "\1\313\1\2\1\314\3\2\1\315\1\316\1\317\17\2"+
    "\1\320\1\321\1\322\4\2\1\323\11\2\1\324\1\325"+
    "\2\2\1\0\1\2\1\326\1\327\5\2\1\330\6\2"+
    "\1\331\1\2\1\332\1\2\1\333\2\2\1\334\2\2"+
    "\1\335\1\336\1\337\6\2\1\340\1\341\1\2\1\342"+
    "\4\2\1\343\4\2\1\344\1\2\1\345\1\346\1\347"+
    "\1\350\6\2\1\351\1\2\1\352\4\2\1\353\1\2"+
    "\1\354\3\2\1\355\1\2\1\356\1\357\2\2\1\360"+
    "\1\2\1\361\2\2\1\362\2\2\1\363\1\364\2\2"+
    "\1\365\1\366\1\2\1\367\2\2\1\370\1\371\1\2"+
    "\1\372\3\2\1\373\1\2\1\374\2\2\1\375\2\2"+
    "\1\376\1\2\1\377\2\2\1\u0100\1\u0101\2\2\1\u0102"+
    "\1\u0103\1\u0104\3\2\1\u0105\1\u0106\1\2\1\u0107\1\2"+
    "\1\u0108\1\u0109\7\2\1\u010a\1\u010b\1\u010c\5\2\1\u010d"+
    "\2\2\1\u010e\1\u010f\3\2\1\u0110\4\2\1\u0111\1\u0112"+
    "\2\2\1\u0113\5\2\1\u0114\3\2\1\u0115\1\2\1\u0116"+
    "\1\u0117\1\u0118\1\2\1\u0119\7\2\1\u011a\1\2\1\u011b"+
    "\2\2\1\u011c\1\2\1\u011d\1\u011e\14\2\1\u011f\1\u0120"+
    "\3\2\1\u0121\2\2\1\u0122\6\2\1\u0123\4\2\1\u0124"+
    "\1\u0125\1\2\1\u0126\1\u0127\1\u0128\1\2\1\u0129\1\u012a"+
    "\1\2\1\u012b\3\2\1\u012c\1\u012d\2\2\1\u012e\10\2"+
    "\1\u012f\1\u0130\1\2\1\u0131\1\u0132\12\2\1\u0133\2\2"+
    "\1\u0134\1\u0135\1\u0136\2\2\1\u0137\3\2\1\u0138\1\u0139"+
    "\1\2\1\u013a\1\2\1\u013b\1\u013c\1\u013d\1\u013e\1\u013f"+
    "\1\u0140\2\2\1\u0141\1\u0142\5\2\1\u0143\4\2\1\u0144"+
    "\2\2\1\u0145\2\2\1\u0146\1\2\1\u0147\4\2\1\u0148"+
    "\1\u0149\3\2\1\u014a\1\u014b\1\u014c\3\2\1\u014d\3\2"+
    "\1\u014e\1\u014f\1\2\1\u0150\4\2\1\u0151\1\u0152\2\2"+
    "\1\u0153\5\2\1\u0154\1\2\1\u0155\4\2\1\u0156\3\2"+
    "\1\u0157\2\2\1\u0158\15\2\1\u0159\1\2\1\u015a\6\2"+
    "\1\u015b";

  private static int [] zzUnpackAction() {
    int [] result = new int[1381];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\164\0\u0692\0\u06cc"+
    "\0\u0706\0\u0740\0\72\0\72\0\72\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\72\0\72\0\u089c\0\72\0\u08d6\0\72"+
    "\0\u0910\0\72\0\72\0\u094a\0\256\0\u0984\0\u09be\0\u015c"+
    "\0\u015c\0\u09f8\0\u0a32\0\164\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\164"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\164\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066"+
    "\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236"+
    "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u247a\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\u24b4\0\u24ee\0\u2528\0\164"+
    "\0\164\0\u2562\0\u259c\0\164\0\164\0\164\0\u25d6\0\164"+
    "\0\u2610\0\u264a\0\u2684\0\164\0\u26be\0\164\0\u26f8\0\u2732"+
    "\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902"+
    "\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2"+
    "\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2"+
    "\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\164\0\u2e38"+
    "\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008"+
    "\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8"+
    "\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8"+
    "\0\u33e2\0\u341c\0\u3456\0\164\0\u3490\0\u34ca\0\u3504\0\u353e"+
    "\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e"+
    "\0\u3748\0\u3782\0\u37bc\0\164\0\u37f6\0\u3830\0\u386a\0\u38a4"+
    "\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74"+
    "\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44"+
    "\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14"+
    "\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4"+
    "\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4"+
    "\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384"+
    "\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\164\0\u451a"+
    "\0\164\0\u4554\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0"+
    "\0\u46ea\0\u4724\0\u475e\0\u4798\0\164\0\u47d2\0\u480c\0\u4846"+
    "\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2\0\u49dc\0\164"+
    "\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72\0\u4bac"+
    "\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\u4d7c"+
    "\0\u4db6\0\u4df0\0\u4e2a\0\72\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12"+
    "\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e\0\164\0\u50a8"+
    "\0\u50e2\0\164\0\u511c\0\u5156\0\u5190\0\u51ca\0\164\0\164"+
    "\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec\0\164\0\164\0\164"+
    "\0\u5326\0\u5360\0\u539a\0\164\0\164\0\u53d4\0\u540e\0\u5448"+
    "\0\164\0\u5482\0\u54bc\0\u54f6\0\u5530\0\u556a\0\u55a4\0\164"+
    "\0\u55de\0\u5618\0\164\0\u5652\0\164\0\u568c\0\164\0\u56c6"+
    "\0\u5700\0\u573a\0\u5774\0\u57ae\0\u57e8\0\u5822\0\164\0\u585c"+
    "\0\u5896\0\u58d0\0\164\0\u590a\0\u5944\0\u597e\0\u59b8\0\u59f2"+
    "\0\u5a2c\0\u5a66\0\u5aa0\0\164\0\u5ada\0\164\0\u5b14\0\u5b4e"+
    "\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36\0\164\0\u5c70\0\u5caa\0\u5ce4"+
    "\0\164\0\u5d1e\0\u5d58\0\164\0\u5d92\0\u5dcc\0\u5e06\0\u5e40"+
    "\0\164\0\u5e7a\0\u5eb4\0\u5eee\0\u5f28\0\u5f62\0\u5f9c\0\u5fd6"+
    "\0\u6010\0\u604a\0\u6084\0\u60be\0\u60f8\0\u6132\0\164\0\164"+
    "\0\u616c\0\u61a6\0\u61e0\0\164\0\164\0\u621a\0\u6254\0\u628e"+
    "\0\u62c8\0\u6302\0\u633c\0\u6376\0\u63b0\0\u63ea\0\u6424\0\u645e"+
    "\0\u6498\0\u64d2\0\u650c\0\u6546\0\u6580\0\u65ba\0\u65f4\0\u662e"+
    "\0\u6668\0\u66a2\0\u66dc\0\u6716\0\u6750\0\u678a\0\164\0\u67c4"+
    "\0\u67fe\0\u6838\0\u6872\0\u68ac\0\164\0\u68e6\0\164\0\u6920"+
    "\0\u695a\0\u6994\0\u69ce\0\u6a08\0\u6a42\0\u6a7c\0\u6ab6\0\u6af0"+
    "\0\u6b2a\0\u6b64\0\164\0\u6b9e\0\u6bd8\0\u6c12\0\u6c4c\0\u6c86"+
    "\0\u6cc0\0\u6cfa\0\164\0\u6d34\0\u6d6e\0\u6da8\0\u6de2\0\u6e1c"+
    "\0\164\0\164\0\u6e56\0\164\0\u6e90\0\u6eca\0\164\0\u6f04"+
    "\0\u6f3e\0\u6f78\0\u6fb2\0\u6fec\0\u7026\0\u7060\0\u709a\0\u70d4"+
    "\0\u710e\0\u7148\0\u7182\0\u71bc\0\u71f6\0\u7230\0\164\0\u726a"+
    "\0\u72a4\0\u72de\0\u7318\0\u7352\0\164\0\164\0\u738c\0\u73c6"+
    "\0\u7400\0\u743a\0\u7474\0\u74ae\0\u74e8\0\u7522\0\164\0\u755c"+
    "\0\u7596\0\u75d0\0\u760a\0\164\0\164\0\u7644\0\u767e\0\u76b8"+
    "\0\u76f2\0\u772c\0\164\0\u7766\0\164\0\u77a0\0\u77da\0\164"+
    "\0\u7814\0\u784e\0\u7888\0\u78c2\0\u78fc\0\u7936\0\u7970\0\u79aa"+
    "\0\u79e4\0\u7a1e\0\u7a58\0\u7a92\0\u7acc\0\u7b06\0\u7b40\0\u7b7a"+
    "\0\u7bb4\0\u7bee\0\u7c28\0\164\0\164\0\164\0\u7c62\0\u7c9c"+
    "\0\u7cd6\0\u7d10\0\u7d4a\0\u7d84\0\u7dbe\0\u7df8\0\u7e32\0\u7e6c"+
    "\0\u7ea6\0\u7ee0\0\u7f1a\0\u7f54\0\u7f8e\0\u7fc8\0\u8002\0\u803c"+
    "\0\u8076\0\u80b0\0\u80ea\0\u8124\0\u815e\0\u8198\0\u81d2\0\u820c"+
    "\0\u8246\0\u8280\0\u82ba\0\u82f4\0\u832e\0\u8368\0\u83a2\0\u83dc"+
    "\0\164\0\u8416\0\u8450\0\164\0\164\0\u848a\0\u84c4\0\u84fe"+
    "\0\u8538\0\u8572\0\u85ac\0\164\0\u85e6\0\u8620\0\u865a\0\u8694"+
    "\0\u86ce\0\u8708\0\u8742\0\u877c\0\u87b6\0\u87f0\0\u882a\0\u8864"+
    "\0\u889e\0\u88d8\0\u8912\0\164\0\u894c\0\u8986\0\u89c0\0\u89fa"+
    "\0\164\0\u8a34\0\164\0\u8a6e\0\u8aa8\0\u8ae2\0\u8b1c\0\u8b56"+
    "\0\u8b90\0\u8bca\0\u8c04\0\u8c3e\0\u8c78\0\u8cb2\0\u8cec\0\u8d26"+
    "\0\u8d60\0\164\0\u8d9a\0\u8dd4\0\u8e0e\0\164\0\u8e48\0\u8e82"+
    "\0\164\0\164\0\u8ebc\0\164\0\u8ef6\0\u8f30\0\164\0\u8f6a"+
    "\0\164\0\u8fa4\0\u8fde\0\u9018\0\u9052\0\u908c\0\u90c6\0\u9100"+
    "\0\u913a\0\u9174\0\164\0\u91ae\0\u91e8\0\u9222\0\164\0\u925c"+
    "\0\u9296\0\u92d0\0\u930a\0\164\0\u9344\0\u937e\0\u93b8\0\u93f2"+
    "\0\164\0\164\0\u942c\0\u9466\0\u94a0\0\u94da\0\u9514\0\u954e"+
    "\0\u9588\0\u95c2\0\u95fc\0\164\0\164\0\u9636\0\u9670\0\u96aa"+
    "\0\u96e4\0\164\0\u971e\0\164\0\164\0\u9758\0\u9792\0\164"+
    "\0\u97cc\0\164\0\164\0\164\0\u9806\0\164\0\u9840\0\u987a"+
    "\0\u98b4\0\u98ee\0\164\0\164\0\164\0\u9928\0\u9962\0\u999c"+
    "\0\u99d6\0\164\0\u9a10\0\164\0\u9a4a\0\u9a84\0\164\0\u9abe"+
    "\0\u9af8\0\u9b32\0\u9b6c\0\164\0\u9ba6\0\u9be0\0\u9c1a\0\u9c54"+
    "\0\164\0\164\0\u9c8e\0\u9cc8\0\u9d02\0\u9d3c\0\u9d76\0\u9db0"+
    "\0\164\0\u9dea\0\u9e24\0\u9e5e\0\u9e98\0\u9ed2\0\u9f0c\0\u9f46"+
    "\0\u9f80\0\u9fba\0\u9ff4\0\ua02e\0\ua068\0\164\0\ua0a2\0\164"+
    "\0\ua0dc\0\ua116\0\ua150\0\ua18a\0\164\0\ua1c4\0\ua1fe\0\ua238"+
    "\0\164\0\ua272\0\ua2ac\0\ua2e6\0\ua320\0\164\0\164\0\ua35a"+
    "\0\ua394\0\ua3ce\0\ua408\0\ua442\0\ua47c\0\164\0\ua4b6\0\ua4f0"+
    "\0\ua52a\0\ua564\0\ua59e\0\ua5d8\0\ua612\0\ua64c\0\164\0\ua686"+
    "\0\ua6c0\0\ua6fa\0\ua734\0\164\0\ua76e\0\ua7a8\0\164\0\164"+
    "\0\ua7e2\0\ua81c\0\ua856\0\ua890\0\ua8ca\0\ua904\0\164\0\ua93e"+
    "\0\164\0\ua978\0\ua9b2\0\ua9ec\0\uaa26\0\uaa60\0\164\0\uaa9a"+
    "\0\uaad4\0\uab0e\0\uab48\0\uab82\0\uabbc\0\uabf6\0\164\0\164"+
    "\0\uac30\0\uac6a\0\uaca4\0\164\0\uacde\0\uad18\0\164\0\164"+
    "\0\uad52\0\uad8c\0\uadc6\0\uae00\0\uae3a\0\uae74\0\uaeae\0\uaee8"+
    "\0\uaf22\0\uaf5c\0\uaf96\0\164\0\uafd0\0\ub00a\0\ub044\0\ub07e"+
    "\0\ub0b8\0\164\0\ub0f2\0\164\0\ub12c\0\ub166\0\164\0\ub1a0"+
    "\0\ub1da\0\ub214\0\ub24e\0\ub288\0\ub2c2\0\ub2fc\0\164\0\ub336"+
    "\0\164\0\ub370\0\ub3aa\0\ub3e4\0\164\0\164\0\164\0\ub41e"+
    "\0\ub458\0\ub492\0\ub4cc\0\ub506\0\ub540\0\ub57a\0\ub5b4\0\ub5ee"+
    "\0\ub628\0\ub662\0\ub69c\0\ub6d6\0\ub710\0\ub74a\0\164\0\164"+
    "\0\164\0\ub784\0\ub7be\0\ub7f8\0\ub832\0\164\0\ub86c\0\ub8a6"+
    "\0\ub8e0\0\ub91a\0\ub954\0\ub98e\0\ub9c8\0\uba02\0\uba3c\0\164"+
    "\0\164\0\uba76\0\ubab0\0\ubaea\0\ubb24\0\164\0\164\0\ubb5e"+
    "\0\ubb98\0\ubbd2\0\ubc0c\0\ubc46\0\164\0\ubc80\0\ubcba\0\ubcf4"+
    "\0\ubd2e\0\ubd68\0\ubda2\0\164\0\ubddc\0\164\0\ube16\0\164"+
    "\0\ube50\0\ube8a\0\164\0\ubec4\0\ubefe\0\164\0\ubf38\0\164"+
    "\0\ubf72\0\ubfac\0\ubfe6\0\uc020\0\uc05a\0\uc094\0\164\0\uc0ce"+
    "\0\uc108\0\uc142\0\uc17c\0\uc1b6\0\uc1f0\0\uc22a\0\164\0\uc264"+
    "\0\uc29e\0\uc2d8\0\uc312\0\uc34c\0\uc386\0\164\0\164\0\164"+
    "\0\164\0\uc3c0\0\uc3fa\0\uc434\0\uc46e\0\uc4a8\0\uc4e2\0\164"+
    "\0\uc51c\0\164\0\uc556\0\uc590\0\uc5ca\0\uc604\0\164\0\uc63e"+
    "\0\164\0\uc678\0\uc6b2\0\uc6ec\0\164\0\uc726\0\164\0\164"+
    "\0\uc760\0\uc79a\0\164\0\uc7d4\0\164\0\uc80e\0\uc848\0\164"+
    "\0\uc882\0\uc8bc\0\164\0\164\0\uc8f6\0\uc930\0\164\0\164"+
    "\0\uc96a\0\164\0\uc9a4\0\uc9de\0\164\0\164\0\uca18\0\164"+
    "\0\uca52\0\uca8c\0\ucac6\0\164\0\ucb00\0\164\0\ucb3a\0\ucb74"+
    "\0\164\0\ucbae\0\ucbe8\0\164\0\ucc22\0\164\0\ucc5c\0\ucc96"+
    "\0\72\0\164\0\uccd0\0\ucd0a\0\164\0\164\0\164\0\ucd44"+
    "\0\ucd7e\0\ucdb8\0\164\0\164\0\ucdf2\0\164\0\uce2c\0\164"+
    "\0\164\0\uce66\0\ucea0\0\uceda\0\ucf14\0\ucf4e\0\ucf88\0\ucfc2"+
    "\0\164\0\164\0\164\0\ucffc\0\ud036\0\ud070\0\ud0aa\0\ud0e4"+
    "\0\164\0\ud11e\0\ud158\0\ud192\0\164\0\ud1cc\0\ud206\0\ud240"+
    "\0\164\0\ud27a\0\ud2b4\0\ud2ee\0\ud328\0\164\0\ud362\0\ud39c"+
    "\0\ud3d6\0\164\0\ud410\0\ud44a\0\ud484\0\ud4be\0\ud4f8\0\164"+
    "\0\ud532\0\ud56c\0\ud5a6\0\164\0\ud5e0\0\164\0\ud61a\0\164"+
    "\0\ud654\0\164\0\ud68e\0\ud6c8\0\ud702\0\ud73c\0\ud776\0\ud7b0"+
    "\0\ud7ea\0\164\0\ud824\0\164\0\ud85e\0\ud898\0\164\0\ud8d2"+
    "\0\164\0\164\0\ud90c\0\ud946\0\ud980\0\ud9ba\0\ud9f4\0\uda2e"+
    "\0\uda68\0\udaa2\0\udadc\0\udb16\0\udb50\0\udb8a\0\164\0\164"+
    "\0\udbc4\0\udbfe\0\udc38\0\udc72\0\udcac\0\udce6\0\164\0\udd20"+
    "\0\udd5a\0\udd94\0\uddce\0\ude08\0\ude42\0\164\0\ude7c\0\udeb6"+
    "\0\udef0\0\udf2a\0\164\0\164\0\udf64\0\164\0\164\0\164"+
    "\0\udf9e\0\164\0\164\0\udfd8\0\164\0\ue012\0\ue04c\0\ue086"+
    "\0\164\0\164\0\ue0c0\0\ue0fa\0\164\0\ue134\0\ue16e\0\ue1a8"+
    "\0\ue1e2\0\ue21c\0\ue256\0\ue290\0\ue2ca\0\164\0\164\0\ue304"+
    "\0\164\0\164\0\ue33e\0\ue378\0\ue3b2\0\ue3ec\0\ue426\0\ue460"+
    "\0\ue49a\0\ue4d4\0\ue50e\0\ue548\0\164\0\ue582\0\ue5bc\0\164"+
    "\0\ue5f6\0\164\0\ue630\0\ue66a\0\164\0\ue6a4\0\ue6de\0\ue718"+
    "\0\164\0\164\0\ue752\0\164\0\ue78c\0\164\0\164\0\164"+
    "\0\164\0\164\0\164\0\ue7c6\0\ue800\0\164\0\164\0\ue83a"+
    "\0\ue874\0\ue8ae\0\ue8e8\0\ue922\0\164\0\ue95c\0\ue996\0\ue9d0"+
    "\0\uea0a\0\164\0\uea44\0\uea7e\0\164\0\ueab8\0\ueaf2\0\164"+
    "\0\ueb2c\0\164\0\ueb66\0\ueba0\0\uebda\0\uec14\0\164\0\164"+
    "\0\uec4e\0\uec88\0\uecc2\0\164\0\uecfc\0\164\0\ued36\0\ued70"+
    "\0\uedaa\0\164\0\uede4\0\uee1e\0\uee58\0\164\0\164\0\uee92"+
    "\0\164\0\ueecc\0\uef06\0\uef40\0\uef7a\0\164\0\164\0\uefb4"+
    "\0\uefee\0\164\0\uf028\0\uf062\0\uf09c\0\uf0d6\0\uf110\0\164"+
    "\0\uf14a\0\164\0\uf184\0\uf1be\0\uf1f8\0\uf232\0\164\0\uf26c"+
    "\0\uf2a6\0\uf2e0\0\164\0\uf31a\0\uf354\0\164\0\uf38e\0\uf3c8"+
    "\0\uf402\0\uf43c\0\uf476\0\uf4b0\0\uf4ea\0\uf524\0\uf55e\0\uf598"+
    "\0\uf5d2\0\uf60c\0\uf646\0\164\0\uf680\0\164\0\uf6ba\0\uf6f4"+
    "\0\uf72e\0\uf768\0\uf7a2\0\uf7dc\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1381];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\2\5\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\3"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\2\65\1\3\73\0"+
    "\3\3\5\0\32\3\24\0\3\3\3\0\1\4\52\0"+
    "\1\66\10\0\2\4\5\0\1\5\2\0\2\5\127\0"+
    "\1\67\23\0\4\70\1\0\1\70\1\71\63\70\1\0"+
    "\3\3\5\0\1\3\1\72\1\73\1\74\1\3\1\75"+
    "\1\76\1\3\1\77\1\100\1\101\4\3\1\102\5\3"+
    "\1\103\4\3\24\0\3\3\1\0\3\3\5\0\1\104"+
    "\3\3\1\105\1\106\4\3\1\107\1\3\1\110\1\111"+
    "\1\3\1\112\12\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\113\3\3\1\114\7\3\1\115\1\116\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\117\3\3\1\120\1\121"+
    "\2\3\1\122\2\3\1\123\1\124\1\125\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\2\3\1\126\2\3\1\127"+
    "\1\130\1\3\1\131\17\3\1\132\1\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\133\3\3\1\134\5\3\1\135"+
    "\1\3\1\136\1\137\14\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\140\3\3\1\141\4\3\1\142\1\143\1\3"+
    "\1\144\15\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\145\25\3\24\0\3\3\1\0\1\3\1\146\1\3"+
    "\5\0\1\147\2\3\1\150\1\151\2\3\1\152\1\3"+
    "\1\153\1\154\1\155\1\156\1\157\3\3\1\160\2\3"+
    "\1\161\5\3\24\0\3\3\1\0\3\3\5\0\1\162"+
    "\1\3\1\163\2\3\1\164\4\3\1\165\1\166\1\167"+
    "\15\3\24\0\3\3\1\0\3\3\5\0\6\3\1\170"+
    "\1\3\1\171\10\3\1\172\10\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\173\13\3\1\174\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\175\1\176\2\3\1\177"+
    "\1\200\6\3\1\201\3\3\1\202\1\3\1\203\2\3"+
    "\24\0\3\3\1\0\3\3\5\0\1\3\1\204\4\3"+
    "\1\205\1\3\1\206\13\3\1\207\2\3\1\210\2\3"+
    "\24\0\3\3\1\0\3\3\5\0\14\3\1\211\15\3"+
    "\24\0\3\3\1\0\3\3\5\0\1\212\3\3\1\213"+
    "\1\214\1\3\1\215\2\3\1\216\1\3\1\217\1\220"+
    "\14\3\24\0\3\3\1\0\3\3\5\0\4\3\1\221"+
    "\10\3\1\222\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\223\1\3\1\224\1\3\1\225\1\226\4\3\1\227"+
    "\1\3\1\230\1\231\14\3\24\0\3\3\1\0\3\3"+
    "\5\0\2\3\1\232\1\3\1\233\1\234\6\3\1\235"+
    "\15\3\24\0\3\3\1\0\3\3\5\0\1\236\4\3"+
    "\1\237\5\3\1\240\1\241\1\242\14\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\243\3\3\1\244\7\3\1\245"+
    "\1\246\14\3\24\0\3\3\1\0\3\3\5\0\1\247"+
    "\14\3\1\250\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\251\1\3\1\252\1\3\1\253\1\254\4\3\1\255"+
    "\1\3\1\256\1\257\14\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\260\15\3\24\0\3\3\3\0\1\261"+
    "\37\0\1\262\23\0\1\261\46\0\1\263\71\0\1\264"+
    "\71\0\1\265\71\0\1\266\100\0\1\267\72\0\1\270"+
    "\75\0\1\271\73\0\1\272\73\0\1\273\73\0\1\274"+
    "\6\0\1\66\11\0\1\275\51\0\2\66\1\275\46\276"+
    "\1\277\23\276\1\0\3\3\5\0\1\300\1\301\30\3"+
    "\24\0\3\3\1\0\3\3\5\0\2\3\1\302\1\303"+
    "\26\3\24\0\3\3\1\0\3\3\5\0\4\3\1\304"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\1\3\1\305"+
    "\5\3\1\306\22\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\307\1\310\20\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\311\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\312\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\10\3\1\313\21\3\24\0\3\3\1\0\3\3"+
    "\5\0\22\3\1\314\7\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\315\3\3\1\316\22\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\317\1\3\1\320\3\3\1\321"+
    "\1\3\1\322\1\323\15\3\1\324\2\3\24\0\3\3"+
    "\1\0\3\3\5\0\14\3\1\325\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\24\3\1\326\5\3\24\0\3\3"+
    "\1\0\3\3\5\0\12\3\1\327\11\3\1\330\5\3"+
    "\24\0\3\3\1\0\3\3\5\0\1\331\7\3\1\332"+
    "\21\3\24\0\3\3\1\0\3\3\5\0\11\3\1\333"+
    "\20\3\24\0\3\3\1\0\3\3\5\0\10\3\1\334"+
    "\21\3\24\0\3\3\1\0\3\3\5\0\1\335\5\3"+
    "\1\336\16\3\1\337\1\3\1\340\2\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\341\10\3\1\342\11\3\1\343"+
    "\6\3\24\0\3\3\1\0\3\3\5\0\6\3\1\344"+
    "\11\3\1\345\11\3\24\0\3\3\1\0\3\3\5\0"+
    "\17\3\1\346\12\3\24\0\3\3\1\0\3\3\5\0"+
    "\24\3\1\347\3\3\1\350\1\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\351\6\3\1\352\2\3\1\353\2\3"+
    "\1\354\14\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\355\25\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\356\25\3\24\0\3\3\1\0\3\3\5\0\21\3"+
    "\1\357\10\3\24\0\3\3\1\0\3\3\5\0\24\3"+
    "\1\360\5\3\24\0\3\3\1\0\3\3\5\0\10\3"+
    "\1\361\21\3\24\0\3\3\1\0\3\3\5\0\5\3"+
    "\1\362\24\3\24\0\3\3\1\0\3\3\5\0\1\3"+
    "\1\363\30\3\24\0\3\3\1\0\3\3\5\0\11\3"+
    "\1\364\20\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\365\1\366\4\3\1\367\3\3\1\370\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\15\3\1\371\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\372\1\3\1\373\1\374"+
    "\4\3\1\375\1\376\7\3\1\377\3\3\1\u0100\1\3"+
    "\1\u0101\2\3\24\0\3\3\1\0\3\3\5\0\2\3"+
    "\1\u0102\27\3\24\0\3\3\1\0\3\3\5\0\2\3"+
    "\1\u0103\20\3\1\u0104\6\3\24\0\3\3\1\0\3\3"+
    "\5\0\22\3\1\u0105\7\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u0106\20\3\1\u0107\5\3\24\0\3\3"+
    "\1\0\3\3\5\0\30\3\1\u0108\1\3\24\0\3\3"+
    "\1\0\3\3\5\0\13\3\1\u0109\16\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u010a\21\3\1\u010b\5\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u010c\2\3"+
    "\1\u010d\2\3\1\u010e\20\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u010f\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u0110\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\25\3\1\u0111\4\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\u0112\31\3\24\0\3\3\1\0\3\3\5\0\2\3"+
    "\1\u0113\1\u0114\4\3\1\u0115\1\u0116\12\3\1\u0117\5\3"+
    "\24\0\3\3\1\0\3\3\5\0\10\3\1\u0118\21\3"+
    "\24\0\3\3\1\0\3\3\5\0\5\3\1\u0119\5\3"+
    "\1\u011a\16\3\24\0\3\3\1\0\3\3\5\0\17\3"+
    "\1\u011b\4\3\1\u011c\5\3\24\0\3\3\1\0\3\3"+
    "\5\0\12\3\1\u011d\17\3\24\0\3\3\1\0\3\3"+
    "\5\0\24\3\1\u011e\5\3\24\0\3\3\1\0\3\3"+
    "\5\0\16\3\1\u011f\13\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u0120\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\u0121\31\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u0122\4\3\1\u0123\21\3\24\0\3\3\1\0\3\3"+
    "\5\0\12\3\1\u0124\1\3\1\u0125\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u0126\7\3\1\u0127\15\3"+
    "\24\0\3\3\1\0\3\3\5\0\5\3\1\u0128\24\3"+
    "\24\0\3\3\1\0\3\3\5\0\1\u0129\3\3\1\u012a"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\1\u012b\1\3"+
    "\1\u012c\2\3\1\u012d\1\u012e\3\3\1\u012f\11\3\1\u0130"+
    "\5\3\24\0\3\3\1\0\3\3\5\0\15\3\1\u0131"+
    "\2\3\1\u0132\1\u0133\10\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u0134\3\3\1\u0135\10\3\1\u0136\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\3\1\u0137\17\3\1\u0138"+
    "\10\3\24\0\3\3\1\0\3\3\5\0\25\3\1\u0139"+
    "\4\3\24\0\3\3\1\0\3\3\5\0\2\3\1\u013a"+
    "\7\3\1\u013b\17\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\3\1\u013c\30\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u013d\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u013e\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u013f\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0140\1\u0141\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u0142\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\27\3\1\u0143\2\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u0144\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\3\1\u0145\1\3\1\u0146\2\3\1\u0147\1\3"+
    "\1\u0148\1\u0149\3\3\1\u014a\3\3\1\u014b\10\3\24\0"+
    "\3\3\1\0\3\3\5\0\14\3\1\u014c\15\3\24\0"+
    "\3\3\1\0\3\3\5\0\24\3\1\u014d\5\3\24\0"+
    "\3\3\1\0\3\3\5\0\6\3\1\u014e\23\3\24\0"+
    "\3\3\1\0\3\3\5\0\11\3\1\u014f\20\3\24\0"+
    "\3\3\1\0\3\3\5\0\3\3\1\u0150\16\3\1\u0151"+
    "\7\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0152"+
    "\7\3\1\u0153\15\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u0154\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0155\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0156\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\7\3\1\u0157\22\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u0158\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\3\1\u0159\3\3\1\u015a\2\3\1\u015b\21\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\u015c\31\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u015d\24\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u015e\7\3\1\u015f\1\u0160"+
    "\14\3\24\0\3\3\1\0\3\3\5\0\17\3\1\u0161"+
    "\12\3\24\0\3\3\1\0\3\3\5\0\10\3\1\u0162"+
    "\21\3\24\0\3\3\1\0\3\3\5\0\25\3\1\u0163"+
    "\4\3\24\0\3\3\1\0\3\3\5\0\14\3\1\u0164"+
    "\15\3\24\0\3\3\1\0\3\3\5\0\3\3\1\u0165"+
    "\26\3\24\0\3\3\1\0\3\3\5\0\1\u0166\13\3"+
    "\1\u0167\15\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u0168\26\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u0169\14\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u016a\14\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u016b\10\3\1\u016c\14\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u016d\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u016e\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u016f\24\3\1\u0170\1\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u0171\24\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\3\1\u0172\4\3\1\u0173\23\3"+
    "\24\0\3\3\1\0\3\3\5\0\6\3\1\u0174\23\3"+
    "\24\0\3\3\1\0\3\3\5\0\2\3\1\u0175\2\3"+
    "\1\u0176\24\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u0177\25\3\24\0\3\3\1\0\3\3\5\0\2\3"+
    "\1\u0178\27\3\24\0\3\3\1\0\3\3\5\0\14\3"+
    "\1\u0179\15\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u017a\26\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u017b\7\3\1\u017c\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\2\3\1\u017d\3\3\1\u017e\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u017f\4\3\1\u0180\17\3"+
    "\24\0\3\3\1\0\3\3\5\0\2\3\1\u0181\2\3"+
    "\1\u0182\24\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u0183\14\3\24\0\3\3\3\0\1\261\63\0\1\261"+
    "\2\0\4\262\1\u0184\2\262\1\u0185\62\262\43\0\1\u0186"+
    "\1\0\1\u0186\24\0\46\276\1\u0187\23\276\5\0\1\u0184"+
    "\40\0\1\277\24\0\3\3\5\0\14\3\1\u0188\15\3"+
    "\24\0\3\3\1\0\3\3\5\0\4\3\1\u0189\25\3"+
    "\24\0\3\3\1\0\3\3\5\0\4\3\1\u018a\25\3"+
    "\24\0\3\3\1\0\3\3\5\0\15\3\1\u018b\14\3"+
    "\24\0\3\3\1\0\3\3\5\0\13\3\1\u018c\16\3"+
    "\24\0\3\3\1\0\3\3\5\0\14\3\1\u018d\15\3"+
    "\24\0\3\3\1\0\3\3\5\0\1\u018e\3\3\1\u018f"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\2\3\1\u0190"+
    "\27\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0191"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\7\3\1\u0192"+
    "\22\3\24\0\3\3\1\0\3\3\5\0\11\3\1\u0193"+
    "\20\3\24\0\3\3\1\0\3\3\5\0\2\3\1\u0194"+
    "\12\3\1\u0195\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\u0196\31\3\24\0\3\3\1\0\3\3\5\0\21\3"+
    "\1\u0197\10\3\24\0\3\3\1\0\3\3\5\0\21\3"+
    "\1\u0198\10\3\24\0\3\3\1\0\3\3\5\0\17\3"+
    "\1\u0199\12\3\24\0\3\3\1\0\3\3\5\0\1\u019a"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\22\3\1\u019b"+
    "\7\3\24\0\3\3\1\0\3\3\5\0\3\3\1\u019c"+
    "\5\3\1\u019d\6\3\1\u019e\11\3\24\0\3\3\1\0"+
    "\3\3\5\0\11\3\1\u019f\20\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u01a0\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\3\1\u01a1\30\3\24\0\3\3\1\0"+
    "\3\3\5\0\22\3\1\u01a2\7\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u01a3\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u01a4\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\3\1\u01a5\30\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u01a6\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u01a7\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u01a8\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u01a9\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\2\3\1\u01aa\27\3\24\0\3\3\1\0\3\3"+
    "\5\0\21\3\1\u01ab\10\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u01ac\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u01ad\6\3\1\u01ae\14\3\24\0\3\3"+
    "\1\0\3\3\5\0\26\3\1\u01af\3\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u01b0\1\3\1\u01b1\23\3"+
    "\24\0\3\3\1\0\3\3\5\0\22\3\1\u01b2\1\3"+
    "\1\u01b3\5\3\24\0\3\3\1\0\1\3\1\u01b4\1\3"+
    "\5\0\32\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u01b5\23\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u01b6\25\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u01b7\25\3\24\0\3\3\1\0\3\3\5\0\2\3"+
    "\1\u01b8\27\3\24\0\3\3\1\0\3\3\5\0\32\3"+
    "\1\u01b9\23\0\3\3\1\0\3\3\5\0\1\u01ba\31\3"+
    "\24\0\3\3\1\0\3\3\5\0\4\3\1\u01bb\1\u01bc"+
    "\24\3\24\0\3\3\1\0\3\3\5\0\11\3\1\u01bd"+
    "\20\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u01be"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\3\3\1\u01bf"+
    "\4\3\1\u01c0\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u01c1\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\3\1\u01c2\1\u01c3\27\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u01c4\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\12\3\1\u01c5\17\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u01c6\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\14\3\1\u01c7\15\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u01c8\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u01c9\7\3\1\u01ca\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u01cb\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u01cc\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\2\3\1\u01cd\27\3\24\0\3\3\1\0"+
    "\3\3\5\0\10\3\1\u01ce\1\u01cf\10\3\1\u01d0\7\3"+
    "\24\0\3\3\1\0\3\3\5\0\13\3\1\u01d1\16\3"+
    "\24\0\3\3\1\0\3\3\5\0\12\3\1\u01d2\2\3"+
    "\1\u01d3\14\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u01d4\25\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u01d5\26\3\24\0\3\3\1\0\3\3\5\0\1\u01d6"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\2\3\1\u01d7"+
    "\27\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u01d8"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u01d9"+
    "\4\3\1\u01da\20\3\24\0\3\3\1\0\3\3\5\0"+
    "\13\3\1\u01db\16\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u01dc\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u01dd\3\3\1\u01de\1\u01df\11\3\1\u01e0\6\3"+
    "\24\0\3\3\1\0\3\3\5\0\4\3\1\u01e1\25\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u01e2\26\3"+
    "\24\0\3\3\1\0\3\3\5\0\4\3\1\u01e3\25\3"+
    "\24\0\3\3\1\0\3\3\5\0\12\3\1\u01e4\17\3"+
    "\24\0\3\3\1\0\3\3\5\0\10\3\1\u01e5\21\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u01e6\6\3"+
    "\1\u01e7\1\3\1\u01e8\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u01e9\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u01ea\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\14\3\1\u01eb\15\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u01ec\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u01ed\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u01ee\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u01ef\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u01f0\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\11\3\1\u01f1\20\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u01f2\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\u01f3\31\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u01f4\1\u01f5\4\3\1\u01f6\20\3\24\0\3\3\1\0"+
    "\3\3\5\0\10\3\1\u01f7\21\3\24\0\3\3\1\0"+
    "\3\3\5\0\10\3\1\u01f8\21\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u01f9\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\10\3\1\u01fa\21\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u01fb\2\3\1\u01fc\21\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u01fd\24\3\24\0\3\3"+
    "\1\0\3\3\5\0\11\3\1\u01fe\20\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u01ff\27\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u0200\7\3\1\u0201\17\3"+
    "\24\0\3\3\1\0\3\3\5\0\5\3\1\u0202\24\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u0203\2\3"+
    "\1\u0204\1\3\1\u0205\14\3\1\u0206\4\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u0207\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\21\3\1\u0208\2\3\1\u0209\5\3"+
    "\24\0\3\3\1\0\1\3\1\u020a\1\3\5\0\14\3"+
    "\1\u020b\15\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u020c\23\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u020d\14\3\24\0\3\3\1\0\3\3\5\0\22\3"+
    "\1\u020e\7\3\24\0\3\3\1\0\3\3\5\0\5\3"+
    "\1\u020f\24\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u0210\23\3\24\0\3\3\1\0\3\3\5\0\1\u0211"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0212"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\15\3\1\u0213"+
    "\14\3\24\0\3\3\1\0\3\3\5\0\1\3\1\u0214"+
    "\30\3\24\0\3\3\1\0\3\3\5\0\5\3\1\u0215"+
    "\24\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0216"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\7\3\1\u0217"+
    "\22\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0218"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0219"+
    "\14\3\1\u021a\10\3\24\0\3\3\1\0\3\3\5\0"+
    "\15\3\1\u021b\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u021c\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u021d\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u021e\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u021f\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0220\10\3\1\u0221\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u0222\7\3\1\u0223\15\3\24\0"+
    "\3\3\1\0\3\3\5\0\4\3\1\u0224\25\3\24\0"+
    "\3\3\1\0\3\3\5\0\4\3\1\u0225\25\3\24\0"+
    "\3\3\1\0\3\3\5\0\2\3\1\u0226\27\3\24\0"+
    "\3\3\1\0\3\3\5\0\3\3\1\u0227\26\3\24\0"+
    "\3\3\1\0\3\3\5\0\12\3\1\u0228\17\3\24\0"+
    "\3\3\1\0\3\3\5\0\2\3\1\u0229\27\3\24\0"+
    "\3\3\1\0\3\3\5\0\4\3\1\u022a\25\3\24\0"+
    "\3\3\1\0\3\3\5\0\4\3\1\u022b\25\3\24\0"+
    "\3\3\1\0\3\3\5\0\20\3\1\u022c\11\3\24\0"+
    "\3\3\1\0\3\3\5\0\23\3\1\u022d\6\3\24\0"+
    "\3\3\1\0\3\3\5\0\15\3\1\u022e\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\u022f\31\3\24\0\3\3"+
    "\1\0\3\3\5\0\23\3\1\u0230\6\3\24\0\3\3"+
    "\1\0\3\3\5\0\20\3\1\u0231\11\3\24\0\3\3"+
    "\1\0\3\3\5\0\13\3\1\u0232\16\3\24\0\3\3"+
    "\1\0\3\3\5\0\26\3\1\u0233\3\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u0234\27\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u0235\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\11\3\1\u0236\20\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u0237\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\11\3\1\u0238\20\3\24\0\3\3"+
    "\1\0\3\3\5\0\10\3\1\u0239\1\u023a\7\3\1\u023b"+
    "\10\3\24\0\3\3\1\0\3\3\5\0\11\3\1\u023c"+
    "\20\3\24\0\3\3\1\0\3\3\5\0\6\3\1\u023d"+
    "\5\3\1\u023e\7\3\1\u023f\1\u0240\4\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u0241\27\3\24\0\3\3"+
    "\1\0\3\3\5\0\15\3\1\u0242\14\3\24\0\3\3"+
    "\1\0\3\3\5\0\14\3\1\u0243\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\17\3\1\u0244\12\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u0245\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\12\3\1\u0246\17\3\24\0\3\3"+
    "\1\0\3\3\5\0\14\3\1\u0247\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u0248\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u0249\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u024a\1\u024b\23\3\24\0"+
    "\3\3\1\0\3\3\5\0\2\3\1\u024c\27\3\24\0"+
    "\3\3\1\0\3\3\5\0\20\3\1\u024d\11\3\24\0"+
    "\3\3\1\0\3\3\5\0\13\3\1\u024e\16\3\24\0"+
    "\3\3\1\0\3\3\5\0\11\3\1\u024f\20\3\24\0"+
    "\3\3\1\0\3\3\5\0\22\3\1\u0250\7\3\24\0"+
    "\3\3\1\0\3\3\5\0\12\3\1\u0251\17\3\24\0"+
    "\3\3\1\0\3\3\5\0\3\3\1\u0252\26\3\24\0"+
    "\3\3\1\0\3\3\5\0\12\3\1\u0253\17\3\24\0"+
    "\3\3\1\0\3\3\5\0\12\3\1\u0254\17\3\24\0"+
    "\3\3\1\0\3\3\5\0\7\3\1\u0255\1\3\1\u0256"+
    "\20\3\24\0\3\3\1\0\3\3\5\0\23\3\1\u0257"+
    "\6\3\24\0\3\3\1\0\3\3\5\0\10\3\1\u0258"+
    "\21\3\24\0\3\3\1\0\3\3\5\0\1\u0259\31\3"+
    "\24\0\3\3\1\0\3\3\5\0\11\3\1\u025a\20\3"+
    "\24\0\3\3\1\0\3\3\5\0\4\3\1\u025b\25\3"+
    "\24\0\3\3\1\0\3\3\5\0\24\3\1\u025c\5\3"+
    "\24\0\3\3\1\0\3\3\5\0\2\3\1\u025d\27\3"+
    "\24\0\3\3\1\0\3\3\5\0\11\3\1\u025e\20\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u025f\1\u0260"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\6\3\1\u0261"+
    "\23\3\24\0\3\3\1\0\3\3\5\0\2\3\1\u0262"+
    "\1\3\1\u0263\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u0264\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u0265\23\3\24\0\3\3\4\0\1\u0184\70\0"+
    "\1\u0266\63\0\1\u0266\2\0\5\276\1\u0184\40\276\1\u0187"+
    "\23\276\1\0\3\3\5\0\11\3\1\u0267\20\3\24\0"+
    "\3\3\1\0\3\3\5\0\5\3\1\u0268\24\3\24\0"+
    "\3\3\1\0\3\3\5\0\5\3\1\u0269\24\3\24\0"+
    "\3\3\1\0\3\3\5\0\14\3\1\u026a\15\3\24\0"+
    "\3\3\1\0\3\3\5\0\14\3\1\u026b\15\3\24\0"+
    "\3\3\1\0\3\3\5\0\2\3\1\u026c\27\3\24\0"+
    "\3\3\1\0\3\3\5\0\17\3\1\u026d\12\3\24\0"+
    "\3\3\1\0\3\3\5\0\2\3\1\u026e\27\3\24\0"+
    "\3\3\1\0\3\3\5\0\3\3\1\u026f\26\3\24\0"+
    "\3\3\1\0\3\3\5\0\5\3\1\u0270\24\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\u0271\31\3\24\0\3\3"+
    "\1\0\3\3\5\0\24\3\1\u0272\5\3\24\0\3\3"+
    "\1\0\3\3\5\0\12\3\1\u0273\17\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u0274\27\3\24\0\3\3"+
    "\1\0\3\3\5\0\15\3\1\u0275\14\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u0276\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u0277\7\3\1\u0278\14\3"+
    "\24\0\3\3\1\0\3\3\5\0\14\3\1\u0279\15\3"+
    "\24\0\3\3\1\0\3\3\5\0\15\3\1\u027a\14\3"+
    "\24\0\3\3\1\0\3\3\5\0\12\3\1\u027b\17\3"+
    "\24\0\3\3\1\0\3\3\5\0\2\3\1\u027c\27\3"+
    "\24\0\3\3\1\0\3\3\5\0\2\3\1\u027d\27\3"+
    "\24\0\3\3\1\0\3\3\5\0\5\3\1\u027e\24\3"+
    "\24\0\3\3\1\0\3\3\5\0\6\3\1\u027f\23\3"+
    "\24\0\3\3\1\0\3\3\5\0\4\3\1\u0280\25\3"+
    "\24\0\3\3\1\0\3\3\5\0\14\3\1\u0281\15\3"+
    "\24\0\3\3\1\0\3\3\5\0\10\3\1\u0282\21\3"+
    "\24\0\3\3\1\0\3\3\5\0\10\3\1\u0283\21\3"+
    "\24\0\3\3\1\0\3\3\5\0\2\3\1\u0284\27\3"+
    "\24\0\3\3\1\0\3\3\5\0\11\3\1\u0285\20\3"+
    "\24\0\3\3\1\0\3\3\5\0\11\3\1\u0286\20\3"+
    "\24\0\3\3\1\0\3\3\5\0\22\3\1\u0287\7\3"+
    "\24\0\3\3\1\0\3\3\5\0\12\3\1\u0288\17\3"+
    "\24\0\3\3\1\0\3\3\5\0\10\3\1\u0289\5\3"+
    "\1\u028a\13\3\24\0\3\3\1\0\3\3\5\0\25\3"+
    "\1\u028b\4\3\24\0\3\3\15\0\1\u028c\55\0\3\3"+
    "\5\0\21\3\1\u028d\10\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u028e\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u028f\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\12\3\1\u0290\17\3\24\0\3\3\1\0\3\3\5\0"+
    "\21\3\1\u0291\10\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0292\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0293\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0294\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0295\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u0296\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u0297\6\3\1\u0298\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u0299\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u029a\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u029b\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\20\3\1\u029c\11\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u029d\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\17\3\1\u029e\12\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u029f\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\12\3\1\u02a0\17\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u02a1\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u02a2\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u02a3\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\10\3\1\u02a4\21\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u02a5\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u02a6\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u02a7\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\2\3\1\u02a8\27\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u02a9\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u02aa\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u02ab\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u02ac\13\3\1\u02ad\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\u02ae\31\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u02af\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\11\3\1\u02b0\20\3\24\0\3\3\1\0"+
    "\3\3\5\0\10\3\1\u02b1\21\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u02b2\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u02b3\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u02b4\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u02b5\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u02b6\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u02b7\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\2\3\1\u02b8\27\3\24\0\3\3\1\0"+
    "\3\3\5\0\24\3\1\u02b9\5\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u02ba\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\3\1\u02bb\30\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u02bc\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\2\3\1\u02bd\27\3\24\0\3\3\1\0"+
    "\3\3\5\0\2\3\1\u02be\27\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u02bf\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u02c0\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u02c1\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u02c2\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\10\3\1\u02c3\21\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u02c4\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u02c5\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u02c6\25\3\1\u02c7\3\3\24\0\3\3\1\0"+
    "\3\3\5\0\20\3\1\u02c8\11\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u02c9\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u02ca\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\24\3\1\u02cb\5\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u02cc\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u02cd\14\3\1\u02ce\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u02cf\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u02d0\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u02d1\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u02d2\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\12\3\1\u02d3\17\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u02d4\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\12\3\1\u02d5\17\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u02d6\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u02d7\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\25\3\1\u02d8\4\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u02d9\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\22\3\1\u02da\7\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u02db\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u02dc\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u02dd\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\2\3\1\u02de\27\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u02df\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u02e0\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u02e1\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\12\3\1\u02e2\17\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u02e3\15\3\24\0\3\3\1\0"+
    "\1\3\1\u02e4\1\3\5\0\1\3\1\u02e5\3\3\1\u02e6"+
    "\22\3\1\u02e7\1\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u02e8\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u02e9\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u02ea\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\30\3\1\u02eb\1\3\24\0\3\3\1\0\3\3\5\0"+
    "\11\3\1\u02ec\20\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u02ed\14\3\1\u02ee\7\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u02ef\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u02f0\1\u02f1\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\12\3\1\u02f2\17\3\24\0\3\3"+
    "\1\0\3\3\5\0\15\3\1\u02f3\14\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u02f4\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\u02f5\31\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\3\1\u02f6\30\3\24\0\3\3\1\0"+
    "\3\3\5\0\12\3\1\u02f7\17\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u02f8\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u02f9\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\20\3\1\u02fa\11\3\24\0\3\3\1\0"+
    "\3\3\5\0\10\3\1\u02fb\21\3\24\0\3\3\1\0"+
    "\3\3\5\0\2\3\1\u02fc\27\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u02fd\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u02fe\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u02ff\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u0300\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\15\3\1\u0301\14\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u0302\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0303\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0304\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u0305\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\u0306\31\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u0307\14\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u0308\14\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u0309\26\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u030a\26\3\24\0\3\3\1\0\3\3\5\0\1\u030b"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\3\3\1\u030c"+
    "\26\3\24\0\3\3\1\0\3\3\5\0\21\3\1\u030d"+
    "\10\3\24\0\3\3\1\0\3\3\5\0\27\3\1\u030e"+
    "\2\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u030f"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0310"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0311"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0312"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\13\3\1\u0313"+
    "\16\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0314"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\2\3\1\u0315"+
    "\27\3\24\0\3\3\1\0\3\3\5\0\13\3\1\u0316"+
    "\16\3\24\0\3\3\1\0\3\3\5\0\3\3\1\u0317"+
    "\26\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0318"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\15\3\1\u0319"+
    "\14\3\24\0\3\3\1\0\3\3\5\0\13\3\1\u031a"+
    "\16\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u031b"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\3\3\1\u031c"+
    "\26\3\24\0\3\3\1\0\3\3\5\0\13\3\1\u031d"+
    "\16\3\24\0\3\3\1\0\3\3\5\0\3\3\1\u031e"+
    "\26\3\24\0\3\3\1\0\3\3\5\0\3\3\1\u031f"+
    "\26\3\24\0\3\3\1\0\3\3\5\0\5\3\1\u0320"+
    "\24\3\24\0\3\3\1\0\3\3\5\0\15\3\1\u0321"+
    "\14\3\24\0\3\3\1\0\3\3\5\0\1\3\1\u0322"+
    "\30\3\24\0\3\3\1\0\3\3\5\0\27\3\1\u0323"+
    "\2\3\24\0\3\3\1\0\3\3\5\0\3\3\1\u0324"+
    "\26\3\24\0\3\3\3\0\1\u0266\63\0\2\u0266\2\0"+
    "\3\3\5\0\1\u0325\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u0326\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u0327\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u0328\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\12\3\1\u0329\17\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u032a\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\14\3\1\u032b\15\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u032c\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\15\3\1\u032d\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u032e\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\u032f\31\3\24\0\3\3\1\0\3\3\5\0\2\3"+
    "\1\u0330\27\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u0331\25\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u0332\23\3\24\0\3\3\1\0\3\3\5\0\14\3"+
    "\1\u0333\15\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u0334\14\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u0335\23\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u0336\23\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u0337\23\3\24\0\3\3\1\0\3\3\5\0\1\u0338"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\14\3\1\u0339"+
    "\15\3\24\0\3\3\1\0\3\3\5\0\10\3\1\u033a"+
    "\21\3\24\0\3\3\1\0\3\3\5\0\5\3\1\u033b"+
    "\24\3\24\0\3\3\1\0\3\3\5\0\15\3\1\u033c"+
    "\14\3\24\0\3\3\1\0\3\3\5\0\1\u033d\1\3"+
    "\1\u033e\27\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u033f\14\3\24\0\3\3\1\0\3\3\5\0\14\3"+
    "\1\u0340\15\3\24\0\3\3\1\0\3\3\5\0\1\u0341"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0342"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\1\u0343\31\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u0344\26\3"+
    "\24\0\3\3\1\0\3\3\5\0\14\3\1\u0345\15\3"+
    "\24\0\3\3\1\0\3\3\5\0\2\3\1\u0346\27\3"+
    "\24\0\3\3\41\0\1\u0347\31\0\3\3\5\0\4\3"+
    "\1\u0348\25\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u0349\23\3\24\0\3\3\1\0\3\3\5\0\11\3"+
    "\1\u034a\20\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u034b\26\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u034c\26\3\24\0\3\3\1\0\3\3\5\0\10\3"+
    "\1\u034d\21\3\24\0\3\3\1\0\3\3\5\0\5\3"+
    "\1\u034e\24\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u034f\25\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u0350\14\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u0351\23\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u0352\14\3\24\0\3\3\1\0\3\3\5\0\5\3"+
    "\1\u0353\24\3\24\0\3\3\1\0\3\3\5\0\27\3"+
    "\1\u0354\2\3\24\0\3\3\1\0\3\3\5\0\11\3"+
    "\1\u0355\20\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u0356\26\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u0357\25\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u0358\25\3\24\0\3\3\1\0\3\3\5\0\1\u0359"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\12\3\1\u035a"+
    "\17\3\24\0\3\3\1\0\3\3\5\0\15\3\1\u035b"+
    "\14\3\24\0\3\3\1\0\3\3\5\0\1\u035c\31\3"+
    "\24\0\3\3\1\0\3\3\5\0\6\3\1\u035d\23\3"+
    "\24\0\3\3\1\0\3\3\5\0\27\3\1\u035e\2\3"+
    "\24\0\3\3\1\0\3\3\5\0\15\3\1\u035f\14\3"+
    "\24\0\3\3\1\0\3\3\5\0\12\3\1\u0360\17\3"+
    "\24\0\3\3\1\0\3\3\5\0\11\3\1\u0361\20\3"+
    "\24\0\3\3\1\0\3\3\5\0\5\3\1\u0362\24\3"+
    "\24\0\3\3\1\0\3\3\5\0\1\u0363\31\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\3\1\u0364\30\3\24\0"+
    "\3\3\1\0\3\3\5\0\5\3\1\u0365\24\3\24\0"+
    "\3\3\1\0\3\3\5\0\10\3\1\u0366\21\3\24\0"+
    "\3\3\1\0\3\3\5\0\3\3\1\u0367\26\3\24\0"+
    "\3\3\1\0\3\3\5\0\4\3\1\u0368\25\3\24\0"+
    "\3\3\1\0\3\3\5\0\14\3\1\u0369\15\3\24\0"+
    "\3\3\1\0\3\3\5\0\14\3\1\u036a\15\3\24\0"+
    "\3\3\1\0\3\3\5\0\15\3\1\u036b\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\3\1\u036c\30\3\24\0"+
    "\3\3\1\0\3\3\5\0\3\3\1\u036d\26\3\24\0"+
    "\3\3\1\0\3\3\5\0\24\3\1\u036e\5\3\24\0"+
    "\3\3\1\0\3\3\5\0\2\3\1\u036f\27\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\u0370\31\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u0371\24\3\24\0\3\3"+
    "\1\0\3\3\5\0\14\3\1\u0372\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\15\3\1\u0373\14\3\24\0\3\3"+
    "\1\0\3\3\5\0\14\3\1\u0374\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\3\1\u0375\30\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u0376\25\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u0377\25\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u0378\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u0379\24\3\24\0\3\3"+
    "\1\0\3\3\5\0\11\3\1\u037a\20\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u037b\27\3\24\0\3\3"+
    "\1\0\3\3\5\0\21\3\1\u037c\10\3\24\0\3\3"+
    "\1\0\3\3\5\0\10\3\1\u037d\21\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u037e\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u037f\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\10\3\1\u0380\21\3\24\0\3\3"+
    "\1\0\3\3\5\0\15\3\1\u0381\14\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u0382\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\11\3\1\u0383\20\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u0384\24\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u0385\24\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u0386\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u0387\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u0388\25\3\24\0\3\3"+
    "\1\0\3\3\5\0\23\3\1\u0389\6\3\24\0\3\3"+
    "\1\0\3\3\5\0\14\3\1\u038a\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u038b\25\3\24\0\3\3"+
    "\1\0\3\3\5\0\22\3\1\u038c\7\3\24\0\3\3"+
    "\1\0\3\3\5\0\14\3\1\u038d\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\26\3\1\u038e\3\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u038f\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u0390\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\12\3\1\u0391\17\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\u0392\31\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u0393\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\24\3\1\u0394\5\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u0395\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u0396\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\15\3\1\u0397\14\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u0398\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u0399\14\3\1\u039a\4\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u039b\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u039c\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\10\3\1\u039d\21\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\3\1\u039e\30\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u039f\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u03a0\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\15\3\1\u03a1\14\3\24\0\3\3\1\0\3\3"+
    "\5\0\21\3\1\u03a2\10\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u03a3\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u03a4\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u03a5\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u03a6\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u03a7\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u03a8\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u03a9\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u03aa\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u03ab\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\3\1\u03ac\30\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u03ad\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u03ae\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\11\3\1\u03af\20\3\24\0\3\3\1\0\3\3\5\0"+
    "\15\3\1\u03b0\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u03b1\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\14\3\1\u03b2\15\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u03b3\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\25\3\1\u03b4\4\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u03b5\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u03b6\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u03b7\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u03b8\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\u03b9\31\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u03ba\25\3\24\0\3\3\1\0\3\3\5\0\15\3"+
    "\1\u03bb\14\3\24\0\3\3\1\0\3\3\5\0\1\u03bc"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\22\3\1\u03bd"+
    "\7\3\24\0\3\3\1\0\3\3\5\0\1\u03be\31\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u03bf\26\3"+
    "\24\0\3\3\1\0\3\3\5\0\15\3\1\u03c0\14\3"+
    "\24\0\3\3\1\0\3\3\5\0\15\3\1\u03c1\14\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u03c2\26\3"+
    "\24\0\3\3\1\0\3\3\5\0\10\3\1\u03c3\21\3"+
    "\24\0\3\3\1\0\3\3\5\0\11\3\1\u03c4\20\3"+
    "\24\0\3\3\1\0\3\3\5\0\17\3\1\u03c5\1\3"+
    "\1\u03c6\10\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u03c7\25\3\24\0\3\3\1\0\3\3\5\0\2\3"+
    "\1\u03c8\27\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u03c9\26\3\24\0\3\3\1\0\3\3\5\0\10\3"+
    "\1\u03ca\21\3\24\0\3\3\1\0\3\3\5\0\17\3"+
    "\1\u03cb\12\3\24\0\3\3\1\0\3\3\5\0\11\3"+
    "\1\u03cc\20\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u03cd\23\3\24\0\3\3\1\0\3\3\5\0\22\3"+
    "\1\u03ce\7\3\24\0\3\3\1\0\3\3\5\0\22\3"+
    "\1\u03cf\7\3\24\0\3\3\1\0\3\3\5\0\1\u03d0"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\1\u03d1\31\3"+
    "\24\0\3\3\1\0\3\3\5\0\16\3\1\u03d2\13\3"+
    "\24\0\3\3\1\0\3\3\5\0\11\3\1\u03d3\20\3"+
    "\24\0\3\3\1\0\3\3\5\0\1\u03d4\31\3\24\0"+
    "\3\3\1\0\3\3\5\0\6\3\1\u03d5\23\3\24\0"+
    "\3\3\1\0\3\3\5\0\6\3\1\u03d6\23\3\24\0"+
    "\3\3\1\0\3\3\5\0\3\3\1\u03d7\26\3\24\0"+
    "\3\3\1\0\3\3\5\0\5\3\1\u03d8\24\3\24\0"+
    "\3\3\1\0\3\3\5\0\2\3\1\u03d9\27\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\u03da\31\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u03db\23\3\24\0\3\3"+
    "\15\0\1\u03dc\55\0\3\3\5\0\1\u03dd\31\3\24\0"+
    "\3\3\1\0\3\3\5\0\3\3\1\u03de\26\3\24\0"+
    "\3\3\1\0\3\3\5\0\4\3\1\u03df\25\3\24\0"+
    "\3\3\1\0\3\3\5\0\15\3\1\u03e0\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\5\3\1\u03e1\24\3\24\0"+
    "\3\3\1\0\3\3\5\0\30\3\1\u03e2\1\3\24\0"+
    "\3\3\1\0\3\3\5\0\25\3\1\u03e3\4\3\24\0"+
    "\3\3\1\0\3\3\5\0\11\3\1\u03e4\20\3\24\0"+
    "\3\3\1\0\3\3\5\0\4\3\1\u03e5\25\3\24\0"+
    "\3\3\1\0\3\3\5\0\15\3\1\u03e6\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\u03e7\31\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u03e8\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\11\3\1\u03e9\20\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u03ea\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\3\1\u03eb\30\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u03ec\27\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\u03ed\31\3\24\0\3\3\1\0"+
    "\3\3\5\0\11\3\1\u03ee\20\3\24\0\3\3\1\0"+
    "\3\3\5\0\10\3\1\u03ef\21\3\24\0\3\3\1\0"+
    "\3\3\5\0\20\3\1\u03f0\11\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u03f1\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u03f2\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u03f3\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u03f4\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u03f5\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u03f6\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u03f7\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u03f8\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u03f9\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u03fa\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\26\3\1\u03fb\3\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u03fc\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\23\3\1\u03fd\6\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u03fe\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\22\3\1\u03ff\7\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u0400\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u0401\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u0402\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u0403\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u0404\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u0405\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\11\3\1\u0406\20\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u0407\10\3\1\u0408\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\21\3\1\u0409\10\3\24\0"+
    "\3\3\1\0\3\3\5\0\6\3\1\u040a\23\3\24\0"+
    "\3\3\1\0\3\3\5\0\12\3\1\u040b\17\3\24\0"+
    "\3\3\1\0\3\3\5\0\3\3\1\u040c\26\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\u040d\31\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u040e\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u040f\25\3\24\0\3\3"+
    "\1\0\3\3\5\0\6\3\1\u0410\23\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u0411\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u0412\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\11\3\1\u0413\20\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u0414\27\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u0415\25\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u0416\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\23\3\1\u0417\6\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u0418\27\3\24\0\3\3"+
    "\1\0\3\3\5\0\21\3\1\u0419\10\3\24\0\3\3"+
    "\1\0\3\3\5\0\10\3\1\u041a\21\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u041b\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\3\3\1\u041c\26\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u041d\25\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\u041e\31\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u041f\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u0420\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u0421\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\2\3\1\u0422\27\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u0423\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u0424\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u0425\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u0426\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\2\3\1\u0427\27\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u0428\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\25\3\1\u0429\4\3\24\0\3\3\1\0\3\3"+
    "\5\0\15\3\1\u042a\14\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u042b\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\12\3\1\u042c\17\3\24\0\3\3\1\0\3\3"+
    "\5\0\7\3\1\u042d\22\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u042e\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u042f\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u0430\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u0431\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u0432\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\22\3\1\u0433\7\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u0434\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\30\3\1\u0435\1\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u0436\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u0437\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u0438\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\11\3\1\u0439\20\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u043a\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u043b\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\16\3\1\u043c\13\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u043d\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u043e\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u043f\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0440\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0441\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0442\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\12\3\1\u0443\17\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0444\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0445\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0446\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\24\3\1\u0447\5\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u0448\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0449\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u044a\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u044b\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\22\3\1\u044c\7\3\24\0\3\3\1\0\3\3\5\0"+
    "\25\3\1\u044d\4\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u044e\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\24\3\1\u044f\5\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0450\25\3\24\0\3\3\22\0\1\u0451\50\0"+
    "\3\3\5\0\2\3\1\u0452\27\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u0453\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u0454\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u0455\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u0456\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u0457\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\22\3\1\u0458\7\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u0459\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\11\3\1\u045a\20\3\24\0\3\3\1\0"+
    "\3\3\5\0\20\3\1\u045b\11\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u045c\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\11\3\1\u045d\20\3\24\0\3\3\1\0"+
    "\3\3\5\0\2\3\1\u045e\27\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u045f\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u0460\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u0461\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u0462\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u0463\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\26\3\1\u0464\3\3\24\0\3\3\1\0"+
    "\3\3\5\0\7\3\1\u0465\22\3\24\0\3\3\1\0"+
    "\3\3\5\0\11\3\1\u0466\20\3\24\0\3\3\1\0"+
    "\3\3\5\0\12\3\1\u0467\17\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u0468\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u0469\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u046a\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\3\1\u046b\30\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u046c\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\26\3\1\u046d\3\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u046e\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u046f\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u0470\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u0471\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u0472\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u0473\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\10\3\1\u0474\21\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u0475\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u0476\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u0477\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u0478\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\20\3\1\u0479\11\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u047a\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u047b\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u047c\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\10\3\1\u047d\21\3\24\0\3\3\1\0\3\3"+
    "\5\0\10\3\1\u047e\21\3\24\0\3\3\1\0\3\3"+
    "\5\0\7\3\1\u047f\22\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u0480\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\11\3\1\u0481\20\3\24\0\3\3\1\0\3\3"+
    "\5\0\2\3\1\u0482\27\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u0483\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\2\3\1\u0484\27\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u0485\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u0486\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\22\3\1\u0487\7\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u0488\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u0489\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u048a\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\22\3\1\u048b\7\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u048c\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\30\3\1\u048d\1\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u048e\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u048f\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u0490\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u0491\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u0492\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u0493\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0494\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\14\3\1\u0495\15\3\24\0\3\3\1\0\3\3\5\0"+
    "\15\3\1\u0496\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0497\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\11\3\1\u0498\20\3\24\0\3\3\1\0\3\3\5\0"+
    "\21\3\1\u0499\10\3\24\0\3\3\1\0\3\3\5\0"+
    "\7\3\1\u049a\22\3\24\0\3\3\1\0\3\3\5\0"+
    "\15\3\1\u049b\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u049c\10\3\1\u049d\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u049e\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\21\3\1\u049f\10\3\24\0\3\3\1\0"+
    "\3\3\5\0\26\3\1\u04a0\3\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u04a1\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\5\3\1\u04a2\24\3\24\0\3\3\1\0"+
    "\3\3\5\0\12\3\1\u04a3\17\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u04a4\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u04a5\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\14\3\1\u04a6\15\3\24\0\3\3\1\0"+
    "\3\3\5\0\4\3\1\u04a7\25\3\24\0\3\3\1\0"+
    "\3\3\5\0\6\3\1\u04a8\23\3\24\0\3\3\1\0"+
    "\3\3\5\0\11\3\1\u04a9\20\3\24\0\3\3\1\0"+
    "\3\3\5\0\12\3\1\u04aa\17\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u04ab\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\10\3\1\u04ac\7\3\1\u04ad\11\3\24\0\3\3"+
    "\1\0\3\3\5\0\10\3\1\u04ae\21\3\24\0\3\3"+
    "\1\0\3\3\5\0\22\3\1\u04af\7\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\3\1\u04b0\30\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\3\1\u04b1\1\3\1\u04b2\6\3"+
    "\1\u04b3\17\3\24\0\3\3\1\0\3\3\5\0\5\3"+
    "\1\u04b4\24\3\24\0\3\3\1\0\3\3\5\0\22\3"+
    "\1\u04b5\7\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u04b6\23\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u04b7\23\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u04b8\23\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u04b9\26\3\24\0\3\3\1\0\3\3\5\0\14\3"+
    "\1\u04ba\15\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u04bb\23\3\24\0\3\3\1\0\3\3\5\0\30\3"+
    "\1\u04bc\1\3\24\0\3\3\1\0\3\3\5\0\6\3"+
    "\1\u04bd\23\3\24\0\3\3\1\0\3\3\5\0\7\3"+
    "\1\u04be\22\3\24\0\3\3\1\0\3\3\5\0\10\3"+
    "\1\u04bf\21\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u04c0\25\3\24\0\3\3\1\0\3\3\5\0\11\3"+
    "\1\u04c1\14\3\1\u04c2\3\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u04c3\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u04c4\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\15\3\1\u04c5\14\3\24\0\3\3\1\0\3\3"+
    "\5\0\7\3\1\u04c6\22\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u04c7\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u04c8\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u04c9\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u04ca\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u04cb\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u04cc\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u04cd\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u04ce\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u04cf\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u04d0\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u04d1\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u04d2\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\11\3\1\u04d3\20\3\24\0\3\3\1\0\3\3"+
    "\5\0\4\3\1\u04d4\25\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u04d5\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\2\3\1\u04d6\27\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u04d7\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u04d8\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\5\3\1\u04d9\24\3\24\0\3\3\1\0\3\3"+
    "\5\0\13\3\1\u04da\10\3\1\u04db\5\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u04dc\24\3\24\0\3\3"+
    "\1\0\3\3\5\0\14\3\1\u04dd\15\3\24\0\3\3"+
    "\1\0\3\3\5\0\10\3\1\u04de\21\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u04df\27\3\24\0\3\3"+
    "\1\0\3\3\5\0\5\3\1\u04e0\24\3\24\0\3\3"+
    "\1\0\3\3\5\0\22\3\1\u04e1\7\3\24\0\3\3"+
    "\1\0\3\3\5\0\10\3\1\u04e2\21\3\24\0\3\3"+
    "\1\0\3\3\5\0\10\3\1\u04e3\21\3\24\0\3\3"+
    "\1\0\3\3\5\0\12\3\1\u04e4\17\3\24\0\3\3"+
    "\1\0\3\3\5\0\15\3\1\u04e5\14\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u04e6\25\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u04e7\25\3\24\0\3\3"+
    "\1\0\3\3\5\0\1\u04e8\31\3\24\0\3\3\1\0"+
    "\3\3\5\0\15\3\1\u04e9\14\3\24\0\3\3\1\0"+
    "\3\3\5\0\10\3\1\u04ea\21\3\24\0\3\3\1\0"+
    "\3\3\5\0\26\3\1\u04eb\3\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u04ec\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\3\3\1\u04ed\26\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\3\1\u04ee\30\3\24\0\3\3\1\0"+
    "\3\3\5\0\1\u04ef\31\3\24\0\3\3\1\0\3\3"+
    "\5\0\6\3\1\u04f0\23\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u04f1\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u04f2\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\22\3\1\u04f3\7\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u04f4\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\3\3\1\u04f5\26\3\24\0\3\3\1\0\3\3"+
    "\5\0\14\3\1\u04f6\15\3\24\0\3\3\1\0\3\3"+
    "\5\0\15\3\1\u04f7\14\3\24\0\3\3\1\0\3\3"+
    "\5\0\25\3\1\u04f8\4\3\24\0\3\3\1\0\3\3"+
    "\5\0\13\3\1\u04f9\16\3\24\0\3\3\1\0\3\3"+
    "\5\0\10\3\1\u04fa\21\3\24\0\3\3\1\0\3\3"+
    "\5\0\1\u04fb\31\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u04fc\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\15\3\1\u04fd\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u04fe\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\3\1\u04ff\30\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0500\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u0501\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u0502\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0503\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\14\3\1\u0504\15\3\24\0\3\3\1\0\3\3\5\0"+
    "\15\3\1\u0505\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0506\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u0507\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0508\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0509\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\3\1\u050a\30\3\24\0\3\3\1\0\3\3\5\0"+
    "\24\3\1\u050b\5\3\24\0\3\3\1\0\3\3\5\0"+
    "\7\3\1\u050c\22\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u050d\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u050e\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\24\3\1\u050f\5\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0510\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u0511\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\13\3\1\u0512\16\3\24\0\3\3\1\0\3\3\5\0"+
    "\15\3\1\u0513\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\17\3\1\u0514\12\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u0515\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0516\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\12\3\1\u0517\17\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u0518\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u0519\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u051a\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\17\3\1\u051b\12\3\24\0\3\3\1\0\3\3\5\0"+
    "\14\3\1\u051c\15\3\24\0\3\3\1\0\3\3\5\0"+
    "\12\3\1\u051d\17\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u051e\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\3\1\u051f\30\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u0520\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\15\3\1\u0521\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\15\3\1\u0522\14\3\24\0\3\3\1\0\3\3\5\0"+
    "\21\3\1\u0523\10\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0524\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0525\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u0526\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0527\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u0528\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u0529\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\13\3\1\u052a\16\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u052b\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u052c\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u052d\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u052e\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\5\3\1\u052f\24\3\24\0\3\3\1\0\3\3\5\0"+
    "\12\3\1\u0530\17\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u0531\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\2\3\1\u0532\27\3\24\0\3\3\1\0\3\3\5\0"+
    "\13\3\1\u0533\16\3\24\0\3\3\1\0\3\3\5\0"+
    "\10\3\1\u0534\21\3\24\0\3\3\1\0\3\3\5\0"+
    "\6\3\1\u0535\23\3\24\0\3\3\1\0\3\3\5\0"+
    "\22\3\1\u0536\7\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0537\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\11\3\1\u0538\20\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u0539\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\4\3\1\u053a\25\3\24\0\3\3\1\0\3\3\5\0"+
    "\3\3\1\u053b\26\3\24\0\3\3\1\0\3\3\5\0"+
    "\1\u053c\31\3\24\0\3\3\1\0\3\3\5\0\5\3"+
    "\1\u053d\24\3\24\0\3\3\1\0\3\3\5\0\3\3"+
    "\1\u053e\26\3\24\0\3\3\1\0\3\3\5\0\22\3"+
    "\1\u053f\7\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u0540\25\3\24\0\3\3\1\0\3\3\5\0\5\3"+
    "\1\u0541\24\3\24\0\3\3\1\0\3\3\5\0\4\3"+
    "\1\u0542\25\3\24\0\3\3\1\0\3\3\5\0\5\3"+
    "\1\u0543\24\3\24\0\3\3\1\0\3\3\5\0\1\u0544"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\1\u0545\31\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u0546\26\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u0547\26\3"+
    "\24\0\3\3\1\0\3\3\5\0\15\3\1\u0548\14\3"+
    "\24\0\3\3\1\0\3\3\5\0\10\3\1\u0549\21\3"+
    "\24\0\3\3\1\0\3\3\5\0\24\3\1\u054a\5\3"+
    "\24\0\3\3\1\0\3\3\5\0\13\3\1\u054b\16\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u054c\26\3"+
    "\24\0\3\3\1\0\3\3\5\0\4\3\1\u054d\25\3"+
    "\24\0\3\3\1\0\3\3\5\0\21\3\1\u054e\10\3"+
    "\24\0\3\3\1\0\3\3\5\0\7\3\1\u054f\22\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u0550\26\3"+
    "\24\0\3\3\1\0\3\3\5\0\1\3\1\u0551\1\3"+
    "\1\u0552\26\3\24\0\3\3\1\0\3\3\5\0\1\u0553"+
    "\31\3\24\0\3\3\1\0\3\3\5\0\4\3\1\u0554"+
    "\25\3\24\0\3\3\1\0\3\3\5\0\1\u0555\31\3"+
    "\24\0\3\3\1\0\3\3\5\0\17\3\1\u0556\12\3"+
    "\24\0\3\3\1\0\3\3\5\0\3\3\1\u0557\26\3"+
    "\24\0\3\3\1\0\3\3\5\0\17\3\1\u0558\12\3"+
    "\24\0\3\3\1\0\3\3\5\0\2\3\1\u0559\27\3"+
    "\24\0\3\3\1\0\3\3\5\0\1\u055a\31\3\24\0"+
    "\3\3\1\0\3\3\5\0\2\3\1\u055b\27\3\24\0"+
    "\3\3\1\0\3\3\5\0\4\3\1\u055c\25\3\24\0"+
    "\3\3\1\0\3\3\5\0\15\3\1\u055d\14\3\24\0"+
    "\3\3\1\0\3\3\5\0\4\3\1\u055e\25\3\24\0"+
    "\3\3\1\0\3\3\5\0\2\3\1\u055f\27\3\24\0"+
    "\3\3\1\0\3\3\5\0\10\3\1\u0560\21\3\24\0"+
    "\3\3\1\0\3\3\5\0\3\3\1\u0561\26\3\24\0"+
    "\3\3\1\0\3\3\5\0\1\u0562\31\3\24\0\3\3"+
    "\1\0\3\3\5\0\17\3\1\u0563\12\3\24\0\3\3"+
    "\1\0\3\3\5\0\2\3\1\u0564\27\3\24\0\3\3"+
    "\1\0\3\3\5\0\4\3\1\u0565\25\3\24\0\3\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[63510];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\40\1\3\11\5\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\3\1\2\0\172\1\12\11"+
    "\3\0\304\1\1\11\1\1\2\0\61\1\1\0\322\1"+
    "\1\0\272\1\1\0\224\1\1\0\164\1\1\11\u0114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1381];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int line;
    int column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 138: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NCHAR;
          }
        case 348: break;
        case 177: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LINENO;
          }
        case 349: break;
        case 306: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return STATISTICS;
          }
        case 350: break;
        case 9: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Suma;
          }
        case 351: break;
        case 136: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RIGHT;
          }
        case 352: break;
        case 128: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FULL;
          }
        case 353: break;
        case 254: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRAILING;
          }
        case 354: break;
        case 346: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SEMANTICSIMILARITYTABLE;
          }
        case 355: break;
        case 321: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RECONFIGURE;
          }
        case 356: break;
        case 225: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CASCADE;
          }
        case 357: break;
        case 318: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRANSACTION;
          }
        case 358: break;
        case 19: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CorcheteCerrado;
          }
        case 359: break;
        case 252: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LENGUAGE;
          }
        case 360: break;
        case 29: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AT;
          }
        case 361: break;
        case 235: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTEGER;
          }
        case 362: break;
        case 268: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CASCADED;
          }
        case 363: break;
        case 317: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TABLESAMPLE;
          }
        case 364: break;
        case 301: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DESCRIPTOR;
          }
        case 365: break;
        case 145: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNION;
          }
        case 366: break;
        case 206: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MINUTE;
          }
        case 367: break;
        case 141: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CLOSE;
          }
        case 368: break;
        case 43: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MayorIgual;
          }
        case 369: break;
        case 50: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DobleNumeral;
          }
        case 370: break;
        case 21: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ParentesisCerrado;
          }
        case 371: break;
        case 190: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CREATE;
          }
        case 372: break;
        case 216: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RESTORE;
          }
        case 373: break;
        case 37: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IS;
          }
        case 374: break;
        case 229: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONVERT;
          }
        case 375: break;
        case 18: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CorcheteAbierto;
          }
        case 376: break;
        case 298: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PROCEDURE;
          }
        case 377: break;
        case 35: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OF;
          }
        case 378: break;
        case 142: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CROSS;
          }
        case 379: break;
        case 20: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ParentesisAbierto;
          }
        case 380: break;
        case 30: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AS;
          }
        case 381: break;
        case 42: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MenorIgual;
          }
        case 382: break;
        case 151: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INDEX;
          }
        case 383: break;
        case 125: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WITH;
          }
        case 384: break;
        case 114: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OVER;
          }
        case 385: break;
        case 135: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TABLE;
          }
        case 386: break;
        case 274: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IDENTITY;
          }
        case 387: break;
        case 56: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ANY;
          }
        case 388: break;
        case 327: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INSENSITIVE;
          }
        case 389: break;
        case 153: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INPUT;
          }
        case 390: break;
        case 246: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FOREIGN;
          }
        case 391: break;
        case 164: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MATCH;
          }
        case 392: break;
        case 207: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VALUES;
          }
        case 393: break;
        case 160: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GROUP;
          }
        case 394: break;
        case 63: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NOT;
          }
        case 395: break;
        case 234: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OFFSETS;
          }
        case 396: break;
        case 335: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIMEZONE_HOUR;
          }
        case 397: break;
        case 68: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OFF;
          }
        case 398: break;
        case 198: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPTION;
          }
        case 399: break;
        case 167: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VALUE;
          }
        case 400: break;
        case 219: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NOCHECK;
          }
        case 401: break;
        case 41: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IgualIgual;
          }
        case 402: break;
        case 270: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONTAINS;
          }
        case 403: break;
        case 53: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ALL;
          }
        case 404: break;
        case 131: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ALTER;
          }
        case 405: break;
        case 162: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHERE;
          }
        case 406: break;
        case 291: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENQUERY;
          }
        case 407: break;
        case 237: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BETWEEN;
          }
        case 408: break;
        case 267: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SMALLINT;
          }
        case 409: break;
        case 290: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COLLATION;
          }
        case 410: break;
        case 28: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return String;
          }
        case 411: break;
        case 295: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ISOLARION;
          }
        case 412: break;
        case 139: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLCA;
          }
        case 413: break;
        case 293: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTERSECT;
          }
        case 414: break;
        case 313: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRIVILEGES;
          }
        case 415: break;
        case 271: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONTINUE;
          }
        case 416: break;
        case 189: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SCHEMA;
          }
        case 417: break;
        case 93: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ELSE;
          }
        case 418: break;
        case 99: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROWS;
          }
        case 419: break;
        case 92: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIME;
          }
        case 420: break;
        case 208: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DECLARE;
          }
        case 421: break;
        case 264: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLERROR;
          }
        case 422: break;
        case 46: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return or;
          }
        case 423: break;
        case 149: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ORDER;
          }
        case 424: break;
        case 244: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VARCHAR;
          }
        case 425: break;
        case 14: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SignoExclamacion;
          }
        case 426: break;
        case 110: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USER;
          }
        case 427: break;
        case 105: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SOME;
          }
        case 428: break;
        case 217: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NATURAL;
          }
        case 429: break;
        case 273: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OVERLAPS;
          }
        case 430: break;
        case 79: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DESC;
          }
        case 431: break;
        case 249: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DATABASE;
          }
        case 432: break;
        case 303: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REFERENCES;
          }
        case 433: break;
        case 302: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISCONNECT;
          }
        case 434: break;
        case 61: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TOP;
          }
        case 435: break;
        case 147: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USING;
          }
        case 436: break;
        case 87: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LIKE;
          }
        case 437: break;
        case 176: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DOMAIN;
          }
        case 438: break;
        case 77: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DATE;
          }
        case 439: break;
        case 17: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Punto;
          }
        case 440: break;
        case 36: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IN;
          }
        case 441: break;
        case 49: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Llaves;
          }
        case 442: break;
        case 8: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Igual;
          }
        case 443: break;
        case 230: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COMPUTE;
          }
        case 444: break;
        case 4: 
          { /*Ignore*/
          }
        case 445: break;
        case 85: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LEFT;
          }
        case 446: break;
        case 1: 
          { line=yyline; column=yycolumn; return ERROR;
          }
        case 447: break;
        case 215: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXECUTE;
          }
        case 448: break;
        case 266: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SHUTDOWN;
          }
        case 449: break;
        case 88: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRAN;
          }
        case 450: break;
        case 333: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OCTET_LENGTH;
          }
        case 451: break;
        case 345: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SEMANTICKEYPHRASETABLE;
          }
        case 452: break;
        case 102: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NONE;
          }
        case 453: break;
        case 163: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHILE;
          }
        case 454: break;
        case 113: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPEN;
          }
        case 455: break;
        case 90: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRIM;
          }
        case 456: break;
        case 299: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WRITETEXT;
          }
        case 457: break;
        case 288: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CLUSTERED;
          }
        case 458: break;
        case 209: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DECIMAL;
          }
        case 459: break;
        case 157: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRIOR;
          }
        case 460: break;
        case 140: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SPACE;
          }
        case 461: break;
        case 231: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNKNOWN;
          }
        case 462: break;
        case 328: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NONCLUSTERED;
          }
        case 463: break;
        case 27: 
          { lexeme=yytext(); column=yycolumn; line=yyline; return Float;
          }
        case 464: break;
        case 312: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BIT_LENGTH;
          }
        case 465: break;
        case 300: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DEALLOCATE;
          }
        case 466: break;
        case 191: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURSOR;
          }
        case 467: break;
        case 263: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NATIONAL;
          }
        case 468: break;
        case 84: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LAST;
          }
        case 469: break;
        case 74: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MAX;
          }
        case 470: break;
        case 26: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Bit;
          }
        case 471: break;
        case 126: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VIEW;
          }
        case 472: break;
        case 117: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BULK;
          }
        case 473: break;
        case 304: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROWGUIDCOL;
          }
        case 474: break;
        case 247: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ALLOCATE;
          }
        case 475: break;
        case 319: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRANSLATION;
          }
        case 476: break;
        case 11: 
          { lexeme=yytext();line=yyline; column=yycolumn; return Porcentaje;
          }
        case 477: break;
        case 341: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIMEZONE_MINUTE;
          }
        case 478: break;
        case 186: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SELECT;
          }
        case 479: break;
        case 337: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CORRESPONDING;
          }
        case 480: break;
        case 282: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TEMPORARY;
          }
        case 481: break;
        case 148: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UPPER;
          }
        case 482: break;
        case 338: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONTAINSTABLE;
          }
        case 483: break;
        case 129: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FILE;
          }
        case 484: break;
        case 228: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONNECT;
          }
        case 485: break;
        case 339: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FREETEXTTABLE;
          }
        case 486: break;
        case 111: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return HOUR;
          }
        case 487: break;
        case 124: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WORK;
          }
        case 488: break;
        case 257: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXTERNAL;
          }
        case 489: break;
        case 31: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TO;
          }
        case 490: break;
        case 97: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REAL;
          }
        case 491: break;
        case 7: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Resta;
          }
        case 492: break;
        case 65: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SET;
          }
        case 493: break;
        case 144: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COUNT;
          }
        case 494: break;
        case 187: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SECOND;
          }
        case 495: break;
        case 175: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DOUBLE;
          }
        case 496: break;
        case 314: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FILLFACTOR;
          }
        case 497: break;
        case 239: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PERCENT;
          }
        case 498: break;
        case 308: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONNECTION;
          }
        case 499: break;
        case 121: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PROC;
          }
        case 500: break;
        case 116: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ZONE;
          }
        case 501: break;
        case 287: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SUBSTRING;
          }
        case 502: break;
        case 130: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return JOIN;
          }
        case 503: break;
        case 123: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHEN;
          }
        case 504: break;
        case 101: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NULL;
          }
        case 505: break;
        case 256: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ENDEXEC;
          }
        case 506: break;
        case 52: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ADD;
          }
        case 507: break;
        case 260: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RESTRICT;
          }
        case 508: break;
        case 98: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RULE;
          }
        case 509: break;
        case 118: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BOTH;
          }
        case 510: break;
        case 156: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRINT;
          }
        case 511: break;
        case 227: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COLLATE;
          }
        case 512: break;
        case 155: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BREAK;
          }
        case 513: break;
        case 159: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GRANT;
          }
        case 514: break;
        case 285: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXCEPTION;
          }
        case 515: break;
        case 201: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BROWSE;
          }
        case 516: break;
        case 48: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Parentesis;
          }
        case 517: break;
        case 82: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISK;
          }
        case 518: break;
        case 195: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UPDATE;
          }
        case 519: break;
        case 342: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IDENTITY_INSERT;
          }
        case 520: break;
        case 150: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OUTER;
          }
        case 521: break;
        case 73: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GET;
          }
        case 522: break;
        case 279: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FREETEXT;
          }
        case 523: break;
        case 143: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHECK;
          }
        case 524: break;
        case 255: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRUNCATE;
          }
        case 525: break;
        case 251: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISTINCT;
          }
        case 526: break;
        case 284: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIMESTAMP;
          }
        case 527: break;
        case 258: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return READTEXT;
          }
        case 528: break;
        case 47: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Corchetes;
          }
        case 529: break;
        case 179: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ESCAPE;
          }
        case 530: break;
        case 115: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTO;
          }
        case 531: break;
        case 108: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CASE;
          }
        case 532: break;
        case 154: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BEGIN;
          }
        case 533: break;
        case 6: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Guionbajo;
          }
        case 534: break;
        case 169: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FLOAT;
          }
        case 535: break;
        case 100: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NEXT;
          }
        case 536: break;
        case 329: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SESSION_USER;
          }
        case 537: break;
        case 69: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INT;
          }
        case 538: break;
        case 276: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRESERVE;
          }
        case 539: break;
        case 33: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OR;
          }
        case 540: break;
        case 38: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IF;
          }
        case 541: break;
        case 196: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return HAVING;
          }
        case 542: break;
        case 39: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BY;
          }
        case 543: break;
        case 192: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COLUMN;
          }
        case 544: break;
        case 161: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WRITE;
          }
        case 545: break;
        case 202: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PASCAL;
          }
        case 546: break;
        case 62: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return END;
          }
        case 547: break;
        case 89: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRUE;
          }
        case 548: break;
        case 78: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DENY;
          }
        case 549: break;
        case 51: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ADA;
          }
        case 550: break;
        case 221: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SETUSER;
          }
        case 551: break;
        case 120: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PLAN;
          }
        case 552: break;
        case 178: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ERRLVL;
          }
        case 553: break;
        case 240: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PREPARE;
          }
        case 554: break;
        case 210: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DEFAULT;
          }
        case 555: break;
        case 265: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLSTATE;
          }
        case 556: break;
        case 214: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXTRACT;
          }
        case 557: break;
        case 253: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TEXTSIZE;
          }
        case 558: break;
        case 272: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return HOLDLOCK;
          }
        case 559: break;
        case 280: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FUNCTION;
          }
        case 560: break;
        case 23: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LlaveCerrada;
          }
        case 561: break;
        case 316: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISTRIBUTED;
          }
        case 562: break;
        case 165: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MERGE;
          }
        case 563: break;
        case 72: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PAD;
          }
        case 564: break;
        case 132: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LEVEL;
          }
        case 565: break;
        case 2: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Identificador;
          }
        case 566: break;
        case 22: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LlaveAbierta;
          }
        case 567: break;
        case 322: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REPLICATION;
          }
        case 568: break;
        case 199: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INSERT;
          }
        case 569: break;
        case 344: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_TIMESTAMP;
          }
        case 570: break;
        case 275: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTERVAL;
          }
        case 571: break;
        case 294: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INITIALLY;
          }
        case 572: break;
        case 286: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RAISERROR;
          }
        case 573: break;
        case 171: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FOUND;
          }
        case 574: break;
        case 66: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SUM;
          }
        case 575: break;
        case 283: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRANSLATE;
          }
        case 576: break;
        case 91: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return THEN;
          }
        case 577: break;
        case 336: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SECURITYAUDIT;
          }
        case 578: break;
        case 185: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NULLIF;
          }
        case 579: break;
        case 269: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COALESCE;
          }
        case 580: break;
        case 172: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FIRST;
          }
        case 581: break;
        case 104: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SAVE;
          }
        case 582: break;
        case 109: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHAR;
          }
        case 583: break;
        case 94: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXEC;
          }
        case 584: break;
        case 103: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return YEAR;
          }
        case 585: break;
        case 181: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXISTS;
          }
        case 586: break;
        case 347: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SEMANTICSIMILARITYDETAILSTABLE;
          }
        case 587: break;
        case 75: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MIN;
          }
        case 588: break;
        case 40: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GO;
          }
        case 589: break;
        case 16: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PuntoyComa;
          }
        case 590: break;
        case 57: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ASC;
          }
        case 591: break;
        case 70: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BIT;
          }
        case 592: break;
        case 64: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQL;
          }
        case 593: break;
        case 34: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ON;
          }
        case 594: break;
        case 310: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UPDATETEXT;
          }
        case 595: break;
        case 241: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRIMARY;
          }
        case 596: break;
        case 60: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DEC;
          }
        case 597: break;
        case 281: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ASSERTION;
          }
        case 598: break;
        case 127: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FROM;
          }
        case 599: break;
        case 81: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DUMP;
          }
        case 600: break;
        case 10: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Multiplicacion;
          }
        case 601: break;
        case 194: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNIQUE;
          }
        case 602: break;
        case 96: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return READ;
          }
        case 603: break;
        case 292: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INDICATOR;
          }
        case 604: break;
        case 261: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROLLBACK;
          }
        case 605: break;
        case 86: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LOAD;
          }
        case 606: break;
        case 197: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OUTPUT;
          }
        case 607: break;
        case 112: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ONLY;
          }
        case 608: break;
        case 315: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DIAGNOSTICS;
          }
        case 609: break;
        case 80: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DROP;
          }
        case 610: break;
        case 323: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SYSTEM_USER;
          }
        case 611: break;
        case 220: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLCODE;
          }
        case 612: break;
        case 259: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RELATIVE;
          }
        case 613: break;
        case 119: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return KILL;
          }
        case 614: break;
        case 213: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TSEQUAL;
          }
        case 615: break;
        case 83: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DBCC;
          }
        case 616: break;
        case 331: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_TIME;
          }
        case 617: break;
        case 45: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return andS;
          }
        case 618: break;
        case 15: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return y;
          }
        case 619: break;
        case 44: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NoIgual;
          }
        case 620: break;
        case 242: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WAITFOR;
          }
        case 621: break;
        case 332: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_USER;
          }
        case 622: break;
        case 58: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AVG;
          }
        case 623: break;
        case 3: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Numero;
          }
        case 624: break;
        case 146: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USAGE;
          }
        case 625: break;
        case 25: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Numeral;
          }
        case 626: break;
        case 211: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LEADING;
          }
        case 627: break;
        case 67: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USE;
          }
        case 628: break;
        case 170: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FETCH;
          }
        case 629: break;
        case 223: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SECTION;
          }
        case 630: break;
        case 212: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRIGGER;
          }
        case 631: break;
        case 173: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ACTION;
          }
        case 632: break;
        case 311: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENROWSET;
          }
        case 633: break;
        case 233: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENXML;
          }
        case 634: break;
        case 330: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_DATE;
          }
        case 635: break;
        case 134: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LOWER;
          }
        case 636: break;
        case 24: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Arroba;
          }
        case 637: break;
        case 232: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNPIVOT;
          }
        case 638: break;
        case 238: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PARTIAL;
          }
        case 639: break;
        case 326: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IDENTITYCOL;
          }
        case 640: break;
        case 296: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IMMEDIATE;
          }
        case 641: break;
        case 122: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GOTO;
          }
        case 642: break;
        case 59: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DAY;
          }
        case 643: break;
        case 180: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXCEPT;
          }
        case 644: break;
        case 204: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GLOBAL;
          }
        case 645: break;
        case 188: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SCROLL;
          }
        case 646: break;
        case 166: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MONTH;
          }
        case 647: break;
        case 309: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONSTRAINT;
          }
        case 648: break;
        case 54: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ARE;
          }
        case 649: break;
        case 5: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Division;
          }
        case 650: break;
        case 340: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENDATASOURCE;
          }
        case 651: break;
        case 137: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NAMES;
          }
        case 652: break;
        case 325: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONSTRAINTS;
          }
        case 653: break;
        case 168: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FALSE;
          }
        case 654: break;
        case 200: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BACKUP;
          }
        case 655: break;
        case 205: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MODULE;
          }
        case 656: break;
        case 224: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CATALOG;
          }
        case 657: break;
        case 152: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INNER;
          }
        case 658: break;
        case 297: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRECISION;
          }
        case 659: break;
        case 182: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RETURN;
          }
        case 660: break;
        case 133: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LOCAL;
          }
        case 661: break;
        case 76: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FOR;
          }
        case 662: break;
        case 222: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SESSION;
          }
        case 663: break;
        case 158: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PIVOT;
          }
        case 664: break;
        case 278: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHENEVER;
          }
        case 665: break;
        case 262: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROWCOUNT;
          }
        case 666: break;
        case 12: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Menor;
          }
        case 667: break;
        case 334: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AUTHORIZATION;
          }
        case 668: break;
        case 305: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLWARNING;
          }
        case 669: break;
        case 226: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT;
          }
        case 670: break;
        case 55: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AND;
          }
        case 671: break;
        case 174: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DELETE;
          }
        case 672: break;
        case 32: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NO;
          }
        case 673: break;
        case 250: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DESCRIBE;
          }
        case 674: break;
        case 13: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Mayor;
          }
        case 675: break;
        case 218: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NUMERIC;
          }
        case 676: break;
        case 107: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CAST;
          }
        case 677: break;
        case 184: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REVOKE;
          }
        case 678: break;
        case 106: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SIZE;
          }
        case 679: break;
        case 71: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return KEY;
          }
        case 680: break;
        case 248: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ABSOLUTE;
          }
        case 681: break;
        case 343: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHARACTER_LENGTH;
          }
        case 682: break;
        case 236: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INCLUDE;
          }
        case 683: break;
        case 289: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHARACTER;
          }
        case 684: break;
        case 277: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return POSITION;
          }
        case 685: break;
        case 203: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PUBLIC;
          }
        case 686: break;
        case 243: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VARYING;
          }
        case 687: break;
        case 183: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REVERT;
          }
        case 688: break;
        case 307: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHECKPOINT;
          }
        case 689: break;
        case 95: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXIT;
          }
        case 690: break;
        case 320: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRY_CONVERT;
          }
        case 691: break;
        case 193: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COMMIT;
          }
        case 692: break;
        case 324: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHAR_LENGTH;
          }
        case 693: break;
        case 245: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FORTRAN;
          }
        case 694: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
