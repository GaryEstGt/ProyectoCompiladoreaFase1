/* The following code was generated by JFlex 1.4.3 on 29/09/19 09:01 PM */

package analizadorlexico;
import static analizadorlexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/09/19 09:01 PM from the specification file
 * <tt>C:/Users/garya/ProyectoCompiladoreaFase1/analizadorLexico/src/analizadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\4\2\0\1\10\22\0\1\11\1\53\1\0\1\67"+
    "\1\0\1\50\1\54\1\6\1\62\1\63\1\47\1\46\1\70\1\44"+
    "\1\57\1\5\1\72\1\71\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\0\1\56\1\51\1\45\1\52\1\0\1\66\1\12"+
    "\1\31\1\23\1\13\1\16\1\41\1\34\1\25\1\27\1\43\1\32"+
    "\1\14\1\36\1\20\1\26\1\33\1\2\1\17\1\22\1\15\1\24"+
    "\1\37\1\35\1\42\1\21\1\30\1\60\1\0\1\61\1\0\1\40"+
    "\1\0\4\1\1\73\25\1\1\64\1\55\1\65\1\7\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\26\2"+
    "\1\6\2\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\1\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\2\0\1\35\2\2\1\36\2\2\1\37\24\2"+
    "\1\40\17\2\1\41\30\2\1\42\1\43\4\2\1\44"+
    "\1\2\1\45\1\46\1\2\1\47\4\2\1\50\17\2"+
    "\1\51\23\2\1\3\1\4\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\3\0\1\64"+
    "\1\65\1\66\1\2\1\67\1\70\1\71\1\2\1\72"+
    "\3\2\1\73\1\2\1\74\4\2\1\75\33\2\1\76"+
    "\3\2\1\77\30\2\1\100\3\2\1\101\3\2\1\102"+
    "\7\2\1\103\30\2\1\104\15\2\1\105\2\2\1\106"+
    "\17\2\1\107\1\110\1\2\1\111\13\2\1\112\12\2"+
    "\1\113\3\2\1\114\12\2\1\115\4\2\2\4\3\0"+
    "\1\4\7\2\1\116\2\2\1\117\1\120\3\2\1\121"+
    "\1\122\5\2\1\123\1\124\1\125\3\2\1\126\1\127"+
    "\3\2\1\130\3\2\1\131\2\2\1\132\2\2\1\133"+
    "\1\2\1\134\1\135\1\136\1\2\1\0\3\2\1\137"+
    "\1\2\1\140\2\2\1\141\1\142\10\2\1\143\1\2"+
    "\1\144\6\2\1\145\1\2\1\146\1\2\1\147\2\2"+
    "\1\150\4\2\1\151\15\2\1\152\1\153\3\2\1\154"+
    "\1\155\7\2\1\156\21\2\1\157\5\2\1\160\1\2"+
    "\1\161\4\2\1\162\1\163\5\2\1\164\7\2\1\165"+
    "\5\2\1\166\1\167\1\2\1\170\2\2\1\171\4\2"+
    "\1\172\12\2\1\173\3\2\1\174\1\2\1\175\1\176"+
    "\10\2\1\177\4\2\1\200\1\201\5\2\1\202\1\2"+
    "\1\203\1\34\1\0\1\4\1\2\1\204\23\2\1\205"+
    "\1\206\1\207\1\2\1\210\13\2\1\0\24\2\1\211"+
    "\2\2\1\212\1\213\6\2\1\214\17\2\1\215\4\2"+
    "\1\216\1\2\1\217\4\2\1\220\11\2\1\221\3\2"+
    "\1\222\2\2\1\223\1\224\1\2\1\225\2\2\1\226"+
    "\1\2\1\227\11\2\1\230\3\2\1\231\4\2\1\232"+
    "\4\2\1\233\1\234\11\2\1\235\1\236\4\2\1\237"+
    "\1\2\1\240\1\241\1\2\1\242\1\243\1\2\1\244"+
    "\1\245\1\246\1\2\1\247\1\2\1\250\2\2\1\251"+
    "\1\252\1\253\4\2\1\254\1\2\1\255\2\2\1\256"+
    "\4\2\1\257\4\2\1\260\1\261\6\2\1\262\14\2"+
    "\1\263\1\0\1\264\3\2\1\265\1\266\3\2\1\267"+
    "\4\2\1\270\1\271\6\2\1\272\10\2\1\273\4\2"+
    "\1\274\2\2\1\275\1\276\6\2\1\277\1\2\1\300"+
    "\5\2\1\301\7\2\1\302\1\303\2\2\1\304\1\305"+
    "\2\2\1\306\1\307\13\2\1\310\5\2\1\311\1\2"+
    "\1\312\2\2\1\313\7\2\1\314\1\2\1\315\3\2"+
    "\1\316\1\317\1\320\17\2\1\321\1\322\1\323\4\2"+
    "\1\324\11\2\1\325\1\326\2\2\1\0\1\2\1\327"+
    "\1\330\5\2\1\331\6\2\1\332\1\2\1\333\1\2"+
    "\1\334\2\2\1\335\2\2\1\336\1\337\1\340\6\2"+
    "\1\341\1\342\1\2\1\343\4\2\1\344\4\2\1\345"+
    "\1\2\1\346\1\347\1\350\1\351\6\2\1\352\1\2"+
    "\1\353\4\2\1\354\1\2\1\355\3\2\1\356\1\2"+
    "\1\357\1\360\2\2\1\361\1\2\1\362\2\2\1\363"+
    "\2\2\1\364\1\365\2\2\1\366\1\367\1\2\1\370"+
    "\2\2\1\371\1\372\1\2\1\373\3\2\1\374\1\2"+
    "\1\375\2\2\1\376\2\2\1\377\1\2\1\u0100\2\2"+
    "\1\u0101\1\u0102\2\2\1\u0103\1\u0104\1\u0105\3\2\1\u0106"+
    "\1\u0107\1\2\1\u0108\1\2\1\u0109\1\u010a\7\2\1\u010b"+
    "\1\u010c\1\u010d\5\2\1\u010e\2\2\1\u010f\1\u0110\3\2"+
    "\1\u0111\4\2\1\u0112\1\u0113\2\2\1\u0114\5\2\1\u0115"+
    "\3\2\1\u0116\1\2\1\u0117\1\u0118\1\u0119\1\2\1\u011a"+
    "\7\2\1\u011b\1\2\1\u011c\2\2\1\u011d\1\2\1\u011e"+
    "\1\u011f\14\2\1\u0120\1\u0121\3\2\1\u0122\2\2\1\u0123"+
    "\6\2\1\u0124\4\2\1\u0125\1\u0126\1\2\1\u0127\1\u0128"+
    "\1\u0129\1\2\1\u012a\1\u012b\1\2\1\u012c\3\2\1\u012d"+
    "\1\u012e\2\2\1\u012f\10\2\1\u0130\1\u0131\1\2\1\u0132"+
    "\1\u0133\12\2\1\u0134\2\2\1\u0135\1\u0136\1\u0137\2\2"+
    "\1\u0138\3\2\1\u0139\1\u013a\1\2\1\u013b\1\2\1\u013c"+
    "\1\u013d\1\u013e\1\u013f\1\u0140\1\u0141\2\2\1\u0142\1\u0143"+
    "\5\2\1\u0144\4\2\1\u0145\2\2\1\u0146\2\2\1\u0147"+
    "\1\2\1\u0148\4\2\1\u0149\1\u014a\3\2\1\u014b\1\u014c"+
    "\1\u014d\3\2\1\u014e\3\2\1\u014f\1\u0150\1\2\1\u0151"+
    "\4\2\1\u0152\1\u0153\2\2\1\u0154\5\2\1\u0155\1\2"+
    "\1\u0156\4\2\1\u0157\3\2\1\u0158\2\2\1\u0159\15\2"+
    "\1\u015a\1\2\1\u015b\6\2\1\u015c";

  private static int [] zzUnpackAction() {
    int [] result = new int[1386];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\170\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\74\0\74\0\74\0\u07bc\0\u07f8\0\u0834"+
    "\0\u0870\0\u08ac\0\74\0\74\0\u08e8\0\74\0\u0924\0\74"+
    "\0\u0960\0\74\0\74\0\u099c\0\74\0\264\0\u09d8\0\u0a14"+
    "\0\u0168\0\74\0\u0a50\0\u0a8c\0\170\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0"+
    "\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0"+
    "\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0"+
    "\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\170\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\170\0\u1d4c\0\u1d88"+
    "\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328"+
    "\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\u25f8\0\u2634\0\u2670"+
    "\0\170\0\170\0\u26ac\0\u26e8\0\170\0\170\0\170\0\u2724"+
    "\0\170\0\u2760\0\u279c\0\u27d8\0\170\0\u2814\0\170\0\u2850"+
    "\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30"+
    "\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\170"+
    "\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174"+
    "\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354"+
    "\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534"+
    "\0\u3570\0\u35ac\0\u35e8\0\u3624\0\170\0\u3660\0\u369c\0\u36d8"+
    "\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8"+
    "\0\u38f4\0\u3930\0\u396c\0\u39a8\0\170\0\u39e4\0\u3a20\0\u3a5c"+
    "\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c"+
    "\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c"+
    "\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc"+
    "\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc"+
    "\0\u4218\0\u4254\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc"+
    "\0\u43f8\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c"+
    "\0\u45d8\0\u4614\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\170"+
    "\0\u477c\0\170\0\u47b8\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4"+
    "\0\u4920\0\u495c\0\u4998\0\u49d4\0\u4a10\0\170\0\u4a4c\0\u4a88"+
    "\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68"+
    "\0\170\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0\0\u4e0c"+
    "\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u4f74\0\u4fb0\0\u4fec"+
    "\0\u5028\0\u5064\0\u50a0\0\u50dc\0\74\0\u5118\0\u5154\0\u5190"+
    "\0\u51cc\0\u2634\0\u5208\0\u5244\0\u5280\0\u52bc\0\u52f8\0\u5334"+
    "\0\u5370\0\170\0\u53ac\0\u53e8\0\170\0\u5424\0\u5460\0\u549c"+
    "\0\u54d8\0\170\0\170\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604"+
    "\0\170\0\170\0\170\0\u5640\0\u567c\0\u56b8\0\170\0\170"+
    "\0\u56f4\0\u5730\0\u576c\0\170\0\u57a8\0\u57e4\0\u5820\0\u585c"+
    "\0\u5898\0\u58d4\0\170\0\u5910\0\u594c\0\170\0\u5988\0\170"+
    "\0\u59c4\0\170\0\u5a00\0\u5a3c\0\u5a78\0\u5ab4\0\u5af0\0\u5b2c"+
    "\0\u5b68\0\170\0\u5ba4\0\u5be0\0\u5c1c\0\170\0\u5c58\0\u5c94"+
    "\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0\0\u5dfc\0\170\0\u5e38"+
    "\0\170\0\u5e74\0\u5eb0\0\u5eec\0\u5f28\0\u5f64\0\u5fa0\0\170"+
    "\0\u5fdc\0\u6018\0\u6054\0\170\0\u6090\0\u60cc\0\170\0\u6108"+
    "\0\u6144\0\u6180\0\u61bc\0\170\0\u61f8\0\u6234\0\u6270\0\u62ac"+
    "\0\u62e8\0\u6324\0\u6360\0\u639c\0\u63d8\0\u6414\0\u6450\0\u648c"+
    "\0\u64c8\0\170\0\170\0\u6504\0\u6540\0\u657c\0\170\0\170"+
    "\0\u65b8\0\u65f4\0\u6630\0\u666c\0\u66a8\0\u66e4\0\u6720\0\u675c"+
    "\0\u6798\0\u67d4\0\u6810\0\u684c\0\u6888\0\u68c4\0\u6900\0\u693c"+
    "\0\u6978\0\u69b4\0\u69f0\0\u6a2c\0\u6a68\0\u6aa4\0\u6ae0\0\u6b1c"+
    "\0\u6b58\0\170\0\u6b94\0\u6bd0\0\u6c0c\0\u6c48\0\u6c84\0\170"+
    "\0\u6cc0\0\170\0\u6cfc\0\u6d38\0\u6d74\0\u6db0\0\u6dec\0\u6e28"+
    "\0\u6e64\0\u6ea0\0\u6edc\0\u6f18\0\u6f54\0\170\0\u6f90\0\u6fcc"+
    "\0\u7008\0\u7044\0\u7080\0\u70bc\0\u70f8\0\170\0\u7134\0\u7170"+
    "\0\u71ac\0\u71e8\0\u7224\0\170\0\170\0\u7260\0\170\0\u729c"+
    "\0\u72d8\0\170\0\u7314\0\u7350\0\u738c\0\u73c8\0\u7404\0\u7440"+
    "\0\u747c\0\u74b8\0\u74f4\0\u7530\0\u756c\0\u75a8\0\u75e4\0\u7620"+
    "\0\u765c\0\170\0\u7698\0\u76d4\0\u7710\0\u774c\0\u7788\0\170"+
    "\0\170\0\u77c4\0\u7800\0\u783c\0\u7878\0\u78b4\0\u78f0\0\u792c"+
    "\0\u7968\0\170\0\u79a4\0\u79e0\0\u7a1c\0\u7a58\0\170\0\170"+
    "\0\u7a94\0\u7ad0\0\u7b0c\0\u7b48\0\u7b84\0\170\0\u7bc0\0\170"+
    "\0\u7bfc\0\u7c38\0\u5190\0\u7c74\0\170\0\u7cb0\0\u7cec\0\u7d28"+
    "\0\u7d64\0\u7da0\0\u7ddc\0\u7e18\0\u7e54\0\u7e90\0\u7ecc\0\u7f08"+
    "\0\u7f44\0\u7f80\0\u7fbc\0\u7ff8\0\u8034\0\u8070\0\u80ac\0\u80e8"+
    "\0\170\0\170\0\170\0\u8124\0\u8160\0\u819c\0\u81d8\0\u8214"+
    "\0\u8250\0\u828c\0\u82c8\0\u8304\0\u8340\0\u837c\0\u83b8\0\u83f4"+
    "\0\u8430\0\u846c\0\u84a8\0\u84e4\0\u8520\0\u855c\0\u8598\0\u85d4"+
    "\0\u8610\0\u864c\0\u8688\0\u86c4\0\u8700\0\u873c\0\u8778\0\u87b4"+
    "\0\u87f0\0\u882c\0\u8868\0\u88a4\0\u88e0\0\170\0\u891c\0\u8958"+
    "\0\170\0\170\0\u8994\0\u89d0\0\u8a0c\0\u8a48\0\u8a84\0\u8ac0"+
    "\0\170\0\u8afc\0\u8b38\0\u8b74\0\u8bb0\0\u8bec\0\u8c28\0\u8c64"+
    "\0\u8ca0\0\u8cdc\0\u8d18\0\u8d54\0\u8d90\0\u8dcc\0\u8e08\0\u8e44"+
    "\0\170\0\u8e80\0\u8ebc\0\u8ef8\0\u8f34\0\170\0\u8f70\0\170"+
    "\0\u8fac\0\u8fe8\0\u9024\0\u9060\0\u909c\0\u90d8\0\u9114\0\u9150"+
    "\0\u918c\0\u91c8\0\u9204\0\u9240\0\u927c\0\u92b8\0\170\0\u92f4"+
    "\0\u9330\0\u936c\0\170\0\u93a8\0\u93e4\0\170\0\170\0\u9420"+
    "\0\170\0\u945c\0\u9498\0\170\0\u94d4\0\170\0\u9510\0\u954c"+
    "\0\u9588\0\u95c4\0\u9600\0\u963c\0\u9678\0\u96b4\0\u96f0\0\170"+
    "\0\u972c\0\u9768\0\u97a4\0\170\0\u97e0\0\u981c\0\u9858\0\u9894"+
    "\0\170\0\u98d0\0\u990c\0\u9948\0\u9984\0\170\0\170\0\u99c0"+
    "\0\u99fc\0\u9a38\0\u9a74\0\u9ab0\0\u9aec\0\u9b28\0\u9b64\0\u9ba0"+
    "\0\170\0\170\0\u9bdc\0\u9c18\0\u9c54\0\u9c90\0\170\0\u9ccc"+
    "\0\170\0\170\0\u9d08\0\u9d44\0\170\0\u9d80\0\170\0\170"+
    "\0\170\0\u9dbc\0\170\0\u9df8\0\u9e34\0\u9e70\0\u9eac\0\170"+
    "\0\170\0\170\0\u9ee8\0\u9f24\0\u9f60\0\u9f9c\0\170\0\u9fd8"+
    "\0\170\0\ua014\0\ua050\0\170\0\ua08c\0\ua0c8\0\ua104\0\ua140"+
    "\0\170\0\ua17c\0\ua1b8\0\ua1f4\0\ua230\0\170\0\170\0\ua26c"+
    "\0\ua2a8\0\ua2e4\0\ua320\0\ua35c\0\ua398\0\170\0\ua3d4\0\ua410"+
    "\0\ua44c\0\ua488\0\ua4c4\0\ua500\0\ua53c\0\ua578\0\ua5b4\0\ua5f0"+
    "\0\ua62c\0\ua668\0\170\0\ua6a4\0\170\0\ua6e0\0\ua71c\0\ua758"+
    "\0\ua794\0\170\0\ua7d0\0\ua80c\0\ua848\0\170\0\ua884\0\ua8c0"+
    "\0\ua8fc\0\ua938\0\170\0\170\0\ua974\0\ua9b0\0\ua9ec\0\uaa28"+
    "\0\uaa64\0\uaaa0\0\170\0\uaadc\0\uab18\0\uab54\0\uab90\0\uabcc"+
    "\0\uac08\0\uac44\0\uac80\0\170\0\uacbc\0\uacf8\0\uad34\0\uad70"+
    "\0\170\0\uadac\0\uade8\0\170\0\170\0\uae24\0\uae60\0\uae9c"+
    "\0\uaed8\0\uaf14\0\uaf50\0\170\0\uaf8c\0\170\0\uafc8\0\ub004"+
    "\0\ub040\0\ub07c\0\ub0b8\0\170\0\ub0f4\0\ub130\0\ub16c\0\ub1a8"+
    "\0\ub1e4\0\ub220\0\ub25c\0\170\0\170\0\ub298\0\ub2d4\0\ub310"+
    "\0\170\0\ub34c\0\ub388\0\170\0\170\0\ub3c4\0\ub400\0\ub43c"+
    "\0\ub478\0\ub4b4\0\ub4f0\0\ub52c\0\ub568\0\ub5a4\0\ub5e0\0\ub61c"+
    "\0\170\0\ub658\0\ub694\0\ub6d0\0\ub70c\0\ub748\0\170\0\ub784"+
    "\0\170\0\ub7c0\0\ub7fc\0\170\0\ub838\0\ub874\0\ub8b0\0\ub8ec"+
    "\0\ub928\0\ub964\0\ub9a0\0\170\0\ub9dc\0\170\0\uba18\0\uba54"+
    "\0\uba90\0\170\0\170\0\170\0\ubacc\0\ubb08\0\ubb44\0\ubb80"+
    "\0\ubbbc\0\ubbf8\0\ubc34\0\ubc70\0\ubcac\0\ubce8\0\ubd24\0\ubd60"+
    "\0\ubd9c\0\ubdd8\0\ube14\0\170\0\170\0\170\0\ube50\0\ube8c"+
    "\0\ubec8\0\ubf04\0\170\0\ubf40\0\ubf7c\0\ubfb8\0\ubff4\0\uc030"+
    "\0\uc06c\0\uc0a8\0\uc0e4\0\uc120\0\170\0\170\0\uc15c\0\uc198"+
    "\0\uc1d4\0\uc210\0\170\0\170\0\uc24c\0\uc288\0\uc2c4\0\uc300"+
    "\0\uc33c\0\170\0\uc378\0\uc3b4\0\uc3f0\0\uc42c\0\uc468\0\uc4a4"+
    "\0\170\0\uc4e0\0\170\0\uc51c\0\170\0\uc558\0\uc594\0\170"+
    "\0\uc5d0\0\uc60c\0\170\0\uc648\0\170\0\uc684\0\uc6c0\0\uc6fc"+
    "\0\uc738\0\uc774\0\uc7b0\0\170\0\uc7ec\0\uc828\0\uc864\0\uc8a0"+
    "\0\uc8dc\0\uc918\0\uc954\0\170\0\uc990\0\uc9cc\0\uca08\0\uca44"+
    "\0\uca80\0\ucabc\0\170\0\170\0\170\0\170\0\ucaf8\0\ucb34"+
    "\0\ucb70\0\ucbac\0\ucbe8\0\ucc24\0\170\0\ucc60\0\170\0\ucc9c"+
    "\0\uccd8\0\ucd14\0\ucd50\0\170\0\ucd8c\0\170\0\ucdc8\0\uce04"+
    "\0\uce40\0\170\0\uce7c\0\170\0\170\0\uceb8\0\ucef4\0\170"+
    "\0\ucf30\0\170\0\ucf6c\0\ucfa8\0\170\0\ucfe4\0\ud020\0\170"+
    "\0\170\0\ud05c\0\ud098\0\170\0\170\0\ud0d4\0\170\0\ud110"+
    "\0\ud14c\0\170\0\170\0\ud188\0\170\0\ud1c4\0\ud200\0\ud23c"+
    "\0\170\0\ud278\0\170\0\ud2b4\0\ud2f0\0\170\0\ud32c\0\ud368"+
    "\0\170\0\ud3a4\0\170\0\ud3e0\0\ud41c\0\74\0\170\0\ud458"+
    "\0\ud494\0\170\0\170\0\170\0\ud4d0\0\ud50c\0\ud548\0\170"+
    "\0\170\0\ud584\0\170\0\ud5c0\0\170\0\170\0\ud5fc\0\ud638"+
    "\0\ud674\0\ud6b0\0\ud6ec\0\ud728\0\ud764\0\170\0\170\0\170"+
    "\0\ud7a0\0\ud7dc\0\ud818\0\ud854\0\ud890\0\170\0\ud8cc\0\ud908"+
    "\0\ud944\0\170\0\ud980\0\ud9bc\0\ud9f8\0\170\0\uda34\0\uda70"+
    "\0\udaac\0\udae8\0\170\0\udb24\0\udb60\0\udb9c\0\170\0\udbd8"+
    "\0\udc14\0\udc50\0\udc8c\0\udcc8\0\170\0\udd04\0\udd40\0\udd7c"+
    "\0\170\0\uddb8\0\170\0\uddf4\0\170\0\ude30\0\170\0\ude6c"+
    "\0\udea8\0\udee4\0\udf20\0\udf5c\0\udf98\0\udfd4\0\170\0\ue010"+
    "\0\170\0\ue04c\0\ue088\0\170\0\ue0c4\0\170\0\170\0\ue100"+
    "\0\ue13c\0\ue178\0\ue1b4\0\ue1f0\0\ue22c\0\ue268\0\ue2a4\0\ue2e0"+
    "\0\ue31c\0\ue358\0\ue394\0\170\0\170\0\ue3d0\0\ue40c\0\ue448"+
    "\0\ue484\0\ue4c0\0\ue4fc\0\170\0\ue538\0\ue574\0\ue5b0\0\ue5ec"+
    "\0\ue628\0\ue664\0\170\0\ue6a0\0\ue6dc\0\ue718\0\ue754\0\170"+
    "\0\170\0\ue790\0\170\0\170\0\170\0\ue7cc\0\170\0\170"+
    "\0\ue808\0\170\0\ue844\0\ue880\0\ue8bc\0\170\0\170\0\ue8f8"+
    "\0\ue934\0\170\0\ue970\0\ue9ac\0\ue9e8\0\uea24\0\uea60\0\uea9c"+
    "\0\uead8\0\ueb14\0\170\0\170\0\ueb50\0\170\0\170\0\ueb8c"+
    "\0\uebc8\0\uec04\0\uec40\0\uec7c\0\uecb8\0\uecf4\0\ued30\0\ued6c"+
    "\0\ueda8\0\170\0\uede4\0\uee20\0\170\0\uee5c\0\170\0\uee98"+
    "\0\ueed4\0\170\0\uef10\0\uef4c\0\uef88\0\170\0\170\0\uefc4"+
    "\0\170\0\uf000\0\170\0\170\0\170\0\170\0\170\0\170"+
    "\0\uf03c\0\uf078\0\170\0\170\0\uf0b4\0\uf0f0\0\uf12c\0\uf168"+
    "\0\uf1a4\0\170\0\uf1e0\0\uf21c\0\uf258\0\uf294\0\170\0\uf2d0"+
    "\0\uf30c\0\170\0\uf348\0\uf384\0\170\0\uf3c0\0\170\0\uf3fc"+
    "\0\uf438\0\uf474\0\uf4b0\0\170\0\170\0\uf4ec\0\uf528\0\uf564"+
    "\0\170\0\uf5a0\0\170\0\uf5dc\0\uf618\0\uf654\0\170\0\uf690"+
    "\0\uf6cc\0\uf708\0\170\0\170\0\uf744\0\170\0\uf780\0\uf7bc"+
    "\0\uf7f8\0\uf834\0\170\0\170\0\uf870\0\uf8ac\0\170\0\uf8e8"+
    "\0\uf924\0\uf960\0\uf99c\0\uf9d8\0\170\0\ufa14\0\170\0\ufa50"+
    "\0\ufa8c\0\ufac8\0\ufb04\0\170\0\ufb40\0\ufb7c\0\ufbb8\0\170"+
    "\0\ufbf4\0\ufc30\0\170\0\ufc6c\0\ufca8\0\ufce4\0\ufd20\0\ufd5c"+
    "\0\ufd98\0\ufdd4\0\ufe10\0\ufe4c\0\ufe88\0\ufec4\0\uff00\0\uff3c"+
    "\0\170\0\uff78\0\170\0\uffb4\0\ufff0\1\54\1\150\1\244"+
    "\1\340\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1386];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\2\5"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\3\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\2\66"+
    "\1\3\75\0\3\3\6\0\32\3\25\0\3\3\3\0"+
    "\1\4\53\0\1\67\11\0\2\4\5\0\1\5\3\0"+
    "\2\5\131\0\1\70\24\0\4\71\1\0\1\71\1\72"+
    "\2\0\63\71\1\0\3\3\6\0\1\3\1\73\1\74"+
    "\1\75\1\3\1\76\1\77\1\3\1\100\1\101\1\102"+
    "\4\3\1\103\5\3\1\104\4\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\105\3\3\1\106\1\107\4\3\1\110"+
    "\1\3\1\111\1\112\1\3\1\113\12\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\114\3\3\1\115\7\3\1\116"+
    "\1\117\14\3\25\0\3\3\1\0\3\3\6\0\1\120"+
    "\3\3\1\121\1\122\2\3\1\123\2\3\1\124\1\125"+
    "\1\126\14\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\127\2\3\1\130\1\131\1\3\1\132\17\3\1\133"+
    "\1\3\25\0\3\3\1\0\3\3\6\0\1\134\3\3"+
    "\1\135\5\3\1\136\1\3\1\137\1\140\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\141\3\3\1\142\4\3"+
    "\1\143\1\144\1\3\1\145\15\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\146\25\3\25\0\3\3\1\0"+
    "\1\3\1\147\1\3\6\0\1\150\2\3\1\151\1\152"+
    "\2\3\1\153\1\3\1\154\1\155\1\156\1\157\1\160"+
    "\3\3\1\161\2\3\1\162\5\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\163\1\3\1\164\2\3\1\165\4\3"+
    "\1\166\1\167\1\170\15\3\25\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\171\1\3\1\172\10\3\1\173\10\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\174\13\3\1\175"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\5\3\1\176"+
    "\1\177\2\3\1\200\1\201\6\3\1\202\3\3\1\203"+
    "\1\3\1\204\2\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\3\1\205\4\3\1\206\1\3\1\207\13\3\1\210"+
    "\2\3\1\211\2\3\25\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\212\15\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\213\3\3\1\214\1\215\1\3\1\216\2\3\1\217"+
    "\1\3\1\220\1\221\14\3\25\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\222\10\3\1\223\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\224\1\3\1\225\1\3\1\226"+
    "\1\227\4\3\1\230\1\3\1\231\1\232\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\233\1\3\1\234"+
    "\1\235\6\3\1\236\15\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\237\4\3\1\240\5\3\1\241\1\242\1\243"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\1\244\3\3"+
    "\1\245\7\3\1\246\1\247\14\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\250\14\3\1\251\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\252\1\3\1\253\1\3\1\254"+
    "\1\255\4\3\1\256\1\3\1\257\1\260\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\261\15\3\25\0"+
    "\3\3\3\0\1\262\40\0\1\263\24\0\1\262\47\0"+
    "\1\264\73\0\1\265\73\0\1\266\73\0\1\267\102\0"+
    "\1\270\74\0\1\271\77\0\1\272\75\0\1\273\75\0"+
    "\1\274\75\0\1\275\7\0\1\67\12\0\1\276\52\0"+
    "\2\67\1\276\47\277\1\300\24\277\1\0\3\3\6\0"+
    "\1\301\1\302\30\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\303\1\304\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\305\25\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\3\1\306\5\3\1\307\22\3\25\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\310\1\311\20\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\312\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\313\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\314\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\22\3\1\315\7\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\316\3\3\1\317"+
    "\22\3\25\0\3\3\1\0\3\3\6\0\1\320\1\3"+
    "\1\321\3\3\1\322\1\3\1\323\1\324\15\3\1\325"+
    "\2\3\25\0\3\3\1\0\3\3\6\0\14\3\1\326"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\24\3\1\327"+
    "\5\3\25\0\3\3\1\0\3\3\6\0\12\3\1\330"+
    "\11\3\1\331\5\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\332\7\3\1\333\21\3\25\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\334\20\3\25\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\335\21\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\336\5\3\1\337\16\3\1\340\1\3\1\341"+
    "\2\3\25\0\3\3\1\0\3\3\6\0\1\342\10\3"+
    "\1\343\11\3\1\344\6\3\25\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\345\11\3\1\346\11\3\25\0\3\3"+
    "\1\0\3\3\6\0\17\3\1\347\12\3\25\0\3\3"+
    "\1\0\3\3\6\0\24\3\1\350\3\3\1\351\1\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\352\6\3\1\353"+
    "\2\3\1\354\2\3\1\355\14\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\356\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\357\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\21\3\1\360\10\3\25\0\3\3\1\0"+
    "\3\3\6\0\24\3\1\361\5\3\25\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\362\21\3\25\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\363\24\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\3\1\364\30\3\25\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\365\20\3\25\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\366\1\367\4\3\1\370\3\3"+
    "\1\371\14\3\25\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\372\14\3\25\0\3\3\1\0\3\3\6\0\1\373"+
    "\1\3\1\374\1\375\4\3\1\376\1\377\7\3\1\u0100"+
    "\3\3\1\u0101\1\3\1\u0102\2\3\25\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0103\27\3\25\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0104\20\3\1\u0105\6\3\25\0"+
    "\3\3\1\0\3\3\6\0\22\3\1\u0106\7\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0107\20\3\1\u0108"+
    "\5\3\25\0\3\3\1\0\3\3\6\0\30\3\1\u0109"+
    "\1\3\25\0\3\3\1\0\3\3\6\0\13\3\1\u010a"+
    "\16\3\25\0\3\3\1\0\3\3\6\0\2\3\1\u010b"+
    "\21\3\1\u010c\5\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u010d\2\3\1\u010e\2\3\1\u010f\20\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\u0110\31\3\25\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0111\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\25\3\1\u0112\4\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u0113\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0114\1\u0115\4\3\1\u0116\1\u0117"+
    "\12\3\1\u0118\5\3\25\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u0119\21\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u011a\5\3\1\u011b\16\3\25\0\3\3\1\0"+
    "\3\3\6\0\17\3\1\u011c\4\3\1\u011d\5\3\25\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\u011e\17\3\25\0"+
    "\3\3\1\0\3\3\6\0\24\3\1\u011f\5\3\25\0"+
    "\3\3\1\0\3\3\6\0\16\3\1\u0120\13\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\u0121\31\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u0122\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0123\4\3\1\u0124\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\u0125\1\3\1\u0126"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0127"+
    "\7\3\1\u0128\15\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u0129\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u012a\3\3\1\u012b\25\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\u012c\1\3\1\u012d\2\3\1\u012e\1\u012f\3\3"+
    "\1\u0130\11\3\1\u0131\5\3\25\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u0132\2\3\1\u0133\1\u0134\10\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\u0135\3\3\1\u0136\10\3"+
    "\1\u0137\14\3\25\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u0138\17\3\1\u0139\10\3\25\0\3\3\1\0\3\3"+
    "\6\0\25\3\1\u013a\4\3\25\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u013b\7\3\1\u013c\17\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u013d\30\3\25\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u013e\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u013f\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0140\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0141\1\u0142\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0143\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\27\3\1\u0144\2\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0145\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\3\1\u0146\1\3\1\u0147"+
    "\2\3\1\u0148\1\3\1\u0149\1\u014a\3\3\1\u014b\3\3"+
    "\1\u014c\10\3\25\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u014d\15\3\25\0\3\3\1\0\3\3\6\0\24\3"+
    "\1\u014e\5\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u014f\23\3\25\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u0150\20\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0151\16\3\1\u0152\7\3\25\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0153\7\3\1\u0154\15\3\25\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0155\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0156\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0157\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\7\3\1\u0158\22\3\25\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0159\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u015a\3\3\1\u015b\2\3"+
    "\1\u015c\21\3\25\0\3\3\1\0\3\3\6\0\1\u015d"+
    "\31\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u015e"+
    "\24\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u015f"+
    "\7\3\1\u0160\1\u0161\14\3\25\0\3\3\1\0\3\3"+
    "\6\0\17\3\1\u0162\12\3\25\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u0163\21\3\25\0\3\3\1\0\3\3"+
    "\6\0\25\3\1\u0164\4\3\25\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u0165\15\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0166\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\u0167\13\3\1\u0168\15\3\25\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0169\26\3\25\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u016a\14\3\25\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u016b\14\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u016c\10\3\1\u016d\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u016e\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u016f\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0170\24\3\1\u0171"+
    "\1\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u0172"+
    "\24\3\25\0\3\3\1\0\3\3\6\0\1\3\1\u0173"+
    "\4\3\1\u0174\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u0175\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0176\2\3\1\u0177\24\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0178\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0179\27\3\25\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u017a\15\3\25\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u017b\26\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u017c\7\3\1\u017d\15\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u017e\3\3\1\u017f"+
    "\23\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u0180"+
    "\4\3\1\u0181\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0182\2\3\1\u0183\24\3\25\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0184\14\3\25\0\3\3\3\0"+
    "\1\262\65\0\1\262\2\0\4\263\1\u0185\3\263\1\u0186"+
    "\63\263\44\0\1\u0187\1\0\1\u0187\25\0\47\u0188\1\u0189"+
    "\24\u0188\5\277\1\u018a\41\277\1\300\24\277\1\0\3\3"+
    "\6\0\14\3\1\u018b\15\3\25\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u018c\25\3\25\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u018d\25\3\25\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u018e\14\3\25\0\3\3\1\0\3\3"+
    "\6\0\13\3\1\u018f\16\3\25\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u0190\15\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\u0191\3\3\1\u0192\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0193\27\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0194\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\7\3\1\u0195\22\3\25\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u0196\20\3\25\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0197\12\3\1\u0198\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\u0199\31\3\25\0\3\3"+
    "\1\0\3\3\6\0\21\3\1\u019a\10\3\25\0\3\3"+
    "\1\0\3\3\6\0\21\3\1\u019b\10\3\25\0\3\3"+
    "\1\0\3\3\6\0\17\3\1\u019c\12\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u019d\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\u019e\7\3\25\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u019f\5\3\1\u01a0\6\3\1\u01a1"+
    "\11\3\25\0\3\3\1\0\3\3\6\0\11\3\1\u01a2"+
    "\20\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u01a3"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\1\3\1\u01a4"+
    "\30\3\25\0\3\3\1\0\3\3\6\0\22\3\1\u01a5"+
    "\7\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u01a6"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u01a7"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\1\3\1\u01a8"+
    "\30\3\25\0\3\3\1\0\3\3\6\0\1\u01a9\31\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u01aa\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u01ab\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u01ac\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\2\3\1\u01ad\27\3"+
    "\25\0\3\3\1\0\3\3\6\0\21\3\1\u01ae\10\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u01af\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u01b0\6\3"+
    "\1\u01b1\14\3\25\0\3\3\1\0\3\3\6\0\26\3"+
    "\1\u01b2\3\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u01b3\1\3\1\u01b4\23\3\25\0\3\3\1\0\3\3"+
    "\6\0\22\3\1\u01b5\1\3\1\u01b6\5\3\25\0\3\3"+
    "\1\0\1\3\1\u01b7\1\3\6\0\32\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u01b8\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u01b9\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u01ba\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u01bb\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\32\3\1\u01bc\24\0\3\3\1\0"+
    "\3\3\6\0\1\u01bd\31\3\25\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u01be\1\u01bf\24\3\25\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u01c0\20\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u01c1\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u01c2\4\3\1\u01c3\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u01c4\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\3\1\u01c5\1\u01c6\27\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\u01c7\31\3\25\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\u01c8\17\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u01c9\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u01ca\15\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u01cb\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u01cc\7\3\1\u01cd"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u01ce"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u01cf"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\2\3\1\u01d0"+
    "\27\3\25\0\3\3\1\0\3\3\6\0\10\3\1\u01d1"+
    "\1\u01d2\10\3\1\u01d3\7\3\25\0\3\3\1\0\3\3"+
    "\6\0\13\3\1\u01d4\16\3\25\0\3\3\1\0\3\3"+
    "\6\0\12\3\1\u01d5\2\3\1\u01d6\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u01d7\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u01d8\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u01d9\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u01da\27\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u01db\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u01dc\4\3\1\u01dd\20\3\25\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\u01de\16\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u01df\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u01e0\3\3\1\u01e1"+
    "\1\u01e2\11\3\1\u01e3\6\3\25\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u01e4\25\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u01e5\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u01e6\25\3\25\0\3\3\1\0\3\3"+
    "\6\0\12\3\1\u01e7\17\3\25\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u01e8\21\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u01e9\6\3\1\u01ea\1\3\1\u01eb\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\u01ec\31\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u01ed\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u01ee\15\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u01ef\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u01f0\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u01f1\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u01f2\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u01f3\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\11\3\1\u01f4\20\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u01f5\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\u01f6\31\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u01f7\1\u01f8\4\3\1\u01f9"+
    "\20\3\25\0\3\3\1\0\3\3\6\0\10\3\1\u01fa"+
    "\21\3\25\0\3\3\1\0\3\3\6\0\10\3\1\u01fb"+
    "\21\3\25\0\3\3\1\0\3\3\6\0\1\u01fc\31\3"+
    "\25\0\3\3\1\0\3\3\6\0\10\3\1\u01fd\21\3"+
    "\25\0\3\3\1\0\3\3\6\0\5\3\1\u01fe\2\3"+
    "\1\u01ff\21\3\25\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u0200\24\3\25\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u0201\20\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0202\27\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0203\7\3\1\u0204\17\3\25\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u0205\24\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0206\2\3\1\u0207\1\3\1\u0208\14\3"+
    "\1\u0209\4\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u020a\23\3\25\0\3\3\1\0\3\3\6\0\21\3"+
    "\1\u020b\2\3\1\u020c\5\3\25\0\3\3\1\0\1\3"+
    "\1\u020d\1\3\6\0\14\3\1\u020e\15\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u020f\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0210\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\u0211\7\3\25\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0212\24\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0213\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u0214\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0215\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0216\14\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\3\1\u0217\30\3\25\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0218\24\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0219\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\7\3\1\u021a\22\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u021b\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u021c\14\3\1\u021d\10\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u021e\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u021f\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0220\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u0221\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0222\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0223\10\3\1\u0224"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0225"+
    "\7\3\1\u0226\15\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0227\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0228\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0229\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u022a\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u022b\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u022c\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u022d\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u022e\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\20\3\1\u022f\11\3\25\0\3\3\1\0\3\3\6\0"+
    "\23\3\1\u0230\6\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u0231\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u0232\31\3\25\0\3\3\1\0\3\3\6\0\23\3"+
    "\1\u0233\6\3\25\0\3\3\1\0\3\3\6\0\20\3"+
    "\1\u0234\11\3\25\0\3\3\1\0\3\3\6\0\13\3"+
    "\1\u0235\16\3\25\0\3\3\1\0\3\3\6\0\26\3"+
    "\1\u0236\3\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0237\27\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0238\26\3\25\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u0239\20\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u023a\23\3\25\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u023b\20\3\25\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u023c\1\u023d\7\3\1\u023e\10\3\25\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u023f\20\3\25\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u0240\5\3\1\u0241\7\3\1\u0242"+
    "\1\u0243\4\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0244\27\3\25\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u0245\14\3\25\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u0246\15\3\25\0\3\3\1\0\3\3\6\0\17\3"+
    "\1\u0247\12\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u0248\23\3\25\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u0249\17\3\25\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u024a\15\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u024b\26\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u024c\26\3\25\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u024d\1\u024e\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u024f\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\20\3\1\u0250\11\3\25\0\3\3\1\0\3\3\6\0"+
    "\13\3\1\u0251\16\3\25\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\u0252\20\3\25\0\3\3\1\0\3\3\6\0"+
    "\22\3\1\u0253\7\3\25\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u0254\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0255\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u0256\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u0257\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\7\3\1\u0258\1\3\1\u0259\20\3\25\0\3\3\1\0"+
    "\3\3\6\0\23\3\1\u025a\6\3\25\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u025b\21\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\u025c\31\3\25\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\u025d\20\3\25\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u025e\25\3\25\0\3\3\1\0\3\3"+
    "\6\0\24\3\1\u025f\5\3\25\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0260\27\3\25\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\u0261\20\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0262\1\u0263\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u0264\23\3\25\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0265\1\3\1\u0266\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u0267\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0268\23\3\25\0"+
    "\3\3\4\0\1\u0185\72\0\1\u0269\65\0\1\u0269\2\0"+
    "\47\u0188\1\u026a\31\u0188\1\u026b\41\u0188\1\u0189\24\u0188\1\0"+
    "\3\3\6\0\11\3\1\u026c\20\3\25\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u026d\24\3\25\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u026e\24\3\25\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u026f\15\3\25\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u0270\15\3\25\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0271\27\3\25\0\3\3\1\0"+
    "\3\3\6\0\17\3\1\u0272\12\3\25\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0273\27\3\25\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0274\26\3\25\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0275\24\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\u0276\31\3\25\0\3\3\1\0\3\3"+
    "\6\0\24\3\1\u0277\5\3\25\0\3\3\1\0\3\3"+
    "\6\0\12\3\1\u0278\17\3\25\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0279\27\3\25\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u027a\14\3\25\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u027b\23\3\25\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u027c\7\3\1\u027d\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u027e\15\3\25\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u027f\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u0280\17\3\25\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0281\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0282\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0283\24\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0284\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0285\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u0286\15\3\25\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u0287\21\3\25\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u0288\21\3\25\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0289\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u028a\20\3\25\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u028b\20\3\25\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\u028c\7\3\25\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u028d\17\3\25\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u028e\5\3\1\u028f\13\3"+
    "\25\0\3\3\1\0\3\3\6\0\25\3\1\u0290\4\3"+
    "\25\0\3\3\16\0\1\u0291\56\0\3\3\6\0\21\3"+
    "\1\u0292\10\3\25\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u0293\24\3\25\0\3\3\1\0\3\3\6\0\1\u0294"+
    "\31\3\25\0\3\3\1\0\3\3\6\0\12\3\1\u0295"+
    "\17\3\25\0\3\3\1\0\3\3\6\0\21\3\1\u0296"+
    "\10\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u0297"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0298"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u0299"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u029a"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u029b"+
    "\24\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u029c"+
    "\6\3\1\u029d\15\3\25\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u029e\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u029f\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02a0\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\20\3\1\u02a1\11\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02a2\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\17\3\1\u02a3\12\3\25\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u02a4\15\3\25\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u02a5\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u02a6\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02a7\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u02a8\15\3\25\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u02a9\21\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02aa\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u02ab\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02ac\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u02ad\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u02ae\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02af\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u02b0\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u02b1\13\3\1\u02b2\15\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\u02b3\31\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u02b4\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\u02b5\20\3\25\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u02b6\21\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u02b7\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u02b8\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02b9\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u02ba\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u02bb\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u02bc\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u02bd\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\24\3\1\u02be\5\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u02bf\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\3\1\u02c0\30\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u02c1\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u02c2\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u02c3\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u02c4\31\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u02c5\26\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02c6\25\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u02c7\26\3\25\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u02c8\21\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02c9\25\3\25\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u02ca\15\3\25\0\3\3\1\0\3\3\6\0\1\u02cb"+
    "\25\3\1\u02cc\3\3\25\0\3\3\1\0\3\3\6\0"+
    "\20\3\1\u02cd\11\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u02ce\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u02cf\31\3\25\0\3\3\1\0\3\3\6\0\24\3"+
    "\1\u02d0\5\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02d1\25\3\25\0\3\3\1\0\3\3\6\0\1\u02d2"+
    "\14\3\1\u02d3\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u02d4\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u02d5\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u02d6\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u02d7\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u02d8\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u02d9\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u02da\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u02db\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u02dc\15\3\25\0\3\3\1\0\3\3\6\0"+
    "\25\3\1\u02dd\4\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u02de\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\22\3\1\u02df\7\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u02e0\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02e1\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u02e2\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u02e3\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02e4\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u02e5\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02e6\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u02e7\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u02e8\15\3\25\0\3\3\1\0\1\3\1\u02e9"+
    "\1\3\6\0\1\3\1\u02ea\3\3\1\u02eb\22\3\1\u02ec"+
    "\1\3\25\0\3\3\1\0\3\3\6\0\2\3\1\u02ed"+
    "\27\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u02ee"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u02ef"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\30\3\1\u02f0"+
    "\1\3\25\0\3\3\1\0\3\3\6\0\11\3\1\u02f1"+
    "\20\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u02f2"+
    "\14\3\1\u02f3\7\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02f4\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u02f5\1\u02f6\23\3\25\0\3\3\1\0\3\3"+
    "\6\0\12\3\1\u02f7\17\3\25\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u02f8\14\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u02f9\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\u02fa\31\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\3\1\u02fb\30\3\25\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u02fc\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u02fd\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u02fe\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\20\3\1\u02ff\11\3\25\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u0300\21\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0301\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u0302\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u0303\31\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0304\25\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0305\25\3\25\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u0306\14\3\25\0\3\3\1\0\3\3\6\0\1\u0307"+
    "\31\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0308"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u0309"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u030a"+
    "\24\3\25\0\3\3\1\0\3\3\6\0\1\u030b\31\3"+
    "\25\0\3\3\1\0\3\3\6\0\15\3\1\u030c\14\3"+
    "\25\0\3\3\1\0\3\3\6\0\15\3\1\u030d\14\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u030e\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u030f\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\u0310\31\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0311\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\21\3\1\u0312\10\3\25\0"+
    "\3\3\1\0\3\3\6\0\27\3\1\u0313\2\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0314\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0315\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0316\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0317\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\u0318\16\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0319\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u031a\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\u031b\16\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u031c\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u031d\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u031e\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\u031f\16\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0320\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0321\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\u0322\16\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0323\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0324\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0325\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u0326\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\3\1\u0327\30\3\25\0"+
    "\3\3\1\0\3\3\6\0\27\3\1\u0328\2\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0329\26\3\25\0"+
    "\3\3\3\0\1\u0269\65\0\2\u0269\1\0\5\u0188\1\u0185"+
    "\41\u0188\1\u026a\24\u0188\1\0\3\3\6\0\1\u032a\31\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u032b\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u032c\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\5\3\1\u032d\24\3"+
    "\25\0\3\3\1\0\3\3\6\0\12\3\1\u032e\17\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\u032f\31\3\25\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u0330\15\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0331\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u0332\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0333\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\u0334\31\3\25\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0335\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0336\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0337\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u0338\15\3\25\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0339\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u033a\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u033b\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u033c\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u033d\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u033e\15\3\25\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u033f\21\3\25\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0340\24\3\25\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0341\14\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\u0342\1\3\1\u0343\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0344\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u0345\15\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u0346\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0347\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\u0348\31\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0349\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u034a\15\3\25\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u034b\27\3\25\0\3\3\42\0\1\u034c"+
    "\32\0\3\3\6\0\4\3\1\u034d\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u034e\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u034f\20\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0350\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0351\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u0352\21\3\25\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0353\24\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0354\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0355\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0356\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0357\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0358\24\3\25\0\3\3"+
    "\1\0\3\3\6\0\27\3\1\u0359\2\3\25\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u035a\20\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u035b\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u035c\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u035d\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u035e\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\u035f\17\3\25\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0360\14\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\u0361\31\3\25\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u0362\23\3\25\0\3\3\1\0\3\3"+
    "\6\0\27\3\1\u0363\2\3\25\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u0364\14\3\25\0\3\3\1\0\3\3"+
    "\6\0\12\3\1\u0365\17\3\25\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\u0366\20\3\25\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u0367\24\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\u0368\31\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\3\1\u0369\30\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u036a\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u036b\21\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u036c\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u036d\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u036e\15\3\25\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u036f\15\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u0370\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\3\1\u0371\30\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0372\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\24\3\1\u0373\5\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0374\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u0375\31\3\25\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u0376\24\3\25\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u0377\15\3\25\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u0378\14\3\25\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u0379\15\3\25\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u037a\30\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u037b\25\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u037c\25\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u037d\23\3\25\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u037e\24\3\25\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u037f\20\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0380\27\3\25\0\3\3\1\0\3\3\6\0\21\3"+
    "\1\u0381\10\3\25\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u0382\21\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0383\26\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u0384\23\3\25\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u0385\21\3\25\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u0386\14\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u0387\23\3\25\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u0388\20\3\25\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u0389\24\3\25\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u038a\24\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u038b\26\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u038c\26\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u038d\25\3\25\0\3\3\1\0\3\3\6\0\23\3"+
    "\1\u038e\6\3\25\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u038f\15\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0390\25\3\25\0\3\3\1\0\3\3\6\0\22\3"+
    "\1\u0391\7\3\25\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u0392\15\3\25\0\3\3\1\0\3\3\6\0\26\3"+
    "\1\u0393\3\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0394\26\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u0395\23\3\25\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u0396\17\3\25\0\3\3\1\0\3\3\6\0\1\u0397"+
    "\31\3\25\0\3\3\1\0\3\3\6\0\14\3\1\u0398"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\24\3\1\u0399"+
    "\5\3\25\0\3\3\1\0\3\3\6\0\1\u039a\31\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u039b\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\15\3\1\u039c\14\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\u039d\31\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u039e\14\3\1\u039f"+
    "\4\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u03a0"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u03a1"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\10\3\1\u03a2"+
    "\21\3\25\0\3\3\1\0\3\3\6\0\1\3\1\u03a3"+
    "\30\3\25\0\3\3\1\0\3\3\6\0\1\u03a4\31\3"+
    "\25\0\3\3\1\0\3\3\6\0\5\3\1\u03a5\24\3"+
    "\25\0\3\3\1\0\3\3\6\0\15\3\1\u03a6\14\3"+
    "\25\0\3\3\1\0\3\3\6\0\21\3\1\u03a7\10\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u03a8\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u03a9\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u03aa\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\u03ab\31\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u03ac\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u03ad\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u03ae\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u03af\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u03b0\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\3\1\u03b1\30\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u03b2\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u03b3\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\11\3\1\u03b4\20\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u03b5\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u03b6\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u03b7\15\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u03b8\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\25\3\1\u03b9\4\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u03ba\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u03bb\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u03bc\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u03bd\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\u03be\31\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u03bf\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u03c0\14\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u03c1\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\u03c2\7\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\u03c3\31\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u03c4\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u03c5\14\3\25\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u03c6\14\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u03c7\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u03c8\21\3\25\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\u03c9\20\3\25\0\3\3\1\0\3\3"+
    "\6\0\17\3\1\u03ca\1\3\1\u03cb\10\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u03cc\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u03cd\27\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u03ce\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u03cf\21\3\25\0\3\3"+
    "\1\0\3\3\6\0\17\3\1\u03d0\12\3\25\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u03d1\20\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u03d2\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\u03d3\7\3\25\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\u03d4\7\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u03d5\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\u03d6\31\3\25\0\3\3\1\0\3\3"+
    "\6\0\16\3\1\u03d7\13\3\25\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\u03d8\20\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\u03d9\31\3\25\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u03da\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u03db\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u03dc\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u03dd\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u03de\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u03df\31\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u03e0\23\3\25\0\3\3\16\0\1\u03e1\56\0\3\3"+
    "\6\0\1\u03e2\31\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u03e3\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u03e4\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u03e5\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u03e6\24\3\25\0\3\3\1\0\3\3\6\0"+
    "\30\3\1\u03e7\1\3\25\0\3\3\1\0\3\3\6\0"+
    "\25\3\1\u03e8\4\3\25\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\u03e9\20\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u03ea\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u03eb\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u03ec\31\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u03ed\23\3\25\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u03ee\20\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u03ef\23\3\25\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u03f0\30\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u03f1\27\3\25\0\3\3\1\0\3\3\6\0\1\u03f2"+
    "\31\3\25\0\3\3\1\0\3\3\6\0\11\3\1\u03f3"+
    "\20\3\25\0\3\3\1\0\3\3\6\0\10\3\1\u03f4"+
    "\21\3\25\0\3\3\1\0\3\3\6\0\20\3\1\u03f5"+
    "\11\3\25\0\3\3\1\0\3\3\6\0\14\3\1\u03f6"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u03f7"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u03f8"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\6\3\1\u03f9"+
    "\23\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u03fa"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u03fb"+
    "\24\3\25\0\3\3\1\0\3\3\6\0\6\3\1\u03fc"+
    "\23\3\25\0\3\3\1\0\3\3\6\0\6\3\1\u03fd"+
    "\23\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u03fe"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u03ff"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\26\3\1\u0400"+
    "\3\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u0401"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\23\3\1\u0402"+
    "\6\3\25\0\3\3\1\0\3\3\6\0\6\3\1\u0403"+
    "\23\3\25\0\3\3\1\0\3\3\6\0\22\3\1\u0404"+
    "\7\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0405"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u0406"+
    "\24\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u0407"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u0408"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0409"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\14\3\1\u040a"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\11\3\1\u040b"+
    "\20\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u040c"+
    "\10\3\1\u040d\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\21\3\1\u040e\10\3\25\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u040f\23\3\25\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u0410\17\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0411\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u0412\31\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0413\26\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0414\25\3\25\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u0415\23\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0416\26\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0417\26\3\25\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u0418\20\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0419\27\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u041a\25\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u041b\26\3\25\0\3\3\1\0\3\3\6\0\23\3"+
    "\1\u041c\6\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u041d\27\3\25\0\3\3\1\0\3\3\6\0\21\3"+
    "\1\u041e\10\3\25\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u041f\21\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0420\26\3\25\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0421\26\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0422\25\3\25\0\3\3\1\0\3\3\6\0\1\u0423"+
    "\31\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u0424"+
    "\24\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u0425"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0426"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\2\3\1\u0427"+
    "\27\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u0428"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\1\u0429\31\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u042a\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u042b\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\2\3\1\u042c\27\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u042d\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\25\3\1\u042e\4\3"+
    "\25\0\3\3\1\0\3\3\6\0\15\3\1\u042f\14\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u0430\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\12\3\1\u0431\17\3"+
    "\25\0\3\3\1\0\3\3\6\0\7\3\1\u0432\22\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u0433\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u0434\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\5\3\1\u0435\24\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u0436\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u0437\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\22\3\1\u0438\7\3"+
    "\25\0\3\3\1\0\3\3\6\0\5\3\1\u0439\24\3"+
    "\25\0\3\3\1\0\3\3\6\0\30\3\1\u043a\1\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u043b\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u043c\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u043d\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\11\3\1\u043e\20\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u043f\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u0440\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\16\3\1\u0441\13\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u0442\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u0443\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\u0444\31\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0445\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0446\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0447\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\u0448\17\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0449\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u044a\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u044b\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\24\3\1\u044c\5\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u044d\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u044e\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u044f\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0450\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\22\3\1\u0451\7\3\25\0"+
    "\3\3\1\0\3\3\6\0\25\3\1\u0452\4\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0453\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\24\3\1\u0454\5\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0455\25\3\25\0"+
    "\3\3\23\0\1\u0456\51\0\3\3\6\0\2\3\1\u0457"+
    "\27\3\25\0\3\3\1\0\3\3\6\0\14\3\1\u0458"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\14\3\1\u0459"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u045a"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u045b"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u045c"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\22\3\1\u045d"+
    "\7\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u045e"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\11\3\1\u045f"+
    "\20\3\25\0\3\3\1\0\3\3\6\0\20\3\1\u0460"+
    "\11\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u0461"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\11\3\1\u0462"+
    "\20\3\25\0\3\3\1\0\3\3\6\0\2\3\1\u0463"+
    "\27\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u0464"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u0465"+
    "\24\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0466"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u0467"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u0468"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\26\3\1\u0469"+
    "\3\3\25\0\3\3\1\0\3\3\6\0\7\3\1\u046a"+
    "\22\3\25\0\3\3\1\0\3\3\6\0\11\3\1\u046b"+
    "\20\3\25\0\3\3\1\0\3\3\6\0\12\3\1\u046c"+
    "\17\3\25\0\3\3\1\0\3\3\6\0\6\3\1\u046d"+
    "\23\3\25\0\3\3\1\0\3\3\6\0\6\3\1\u046e"+
    "\23\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u046f"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\1\3\1\u0470"+
    "\30\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0471"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\26\3\1\u0472"+
    "\3\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0473"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\6\3\1\u0474"+
    "\23\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u0475"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u0476"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\14\3\1\u0477"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\14\3\1\u0478"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\10\3\1\u0479"+
    "\21\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u047a"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u047b"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u047c"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u047d"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\20\3\1\u047e"+
    "\11\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u047f"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u0480"+
    "\24\3\25\0\3\3\1\0\3\3\6\0\1\u0481\31\3"+
    "\25\0\3\3\1\0\3\3\6\0\10\3\1\u0482\21\3"+
    "\25\0\3\3\1\0\3\3\6\0\10\3\1\u0483\21\3"+
    "\25\0\3\3\1\0\3\3\6\0\7\3\1\u0484\22\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u0485\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\11\3\1\u0486\20\3"+
    "\25\0\3\3\1\0\3\3\6\0\2\3\1\u0487\27\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u0488\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\2\3\1\u0489\27\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u048a\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u048b\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\22\3\1\u048c\7\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u048d\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u048e\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\5\3\1\u048f\24\3"+
    "\25\0\3\3\1\0\3\3\6\0\22\3\1\u0490\7\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u0491\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\30\3\1\u0492\1\3"+
    "\25\0\3\3\1\0\3\3\6\0\5\3\1\u0493\24\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u0494\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u0495\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u0496\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u0497\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\u0498\31\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0499\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u049a\15\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u049b\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u049c\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\11\3\1\u049d\20\3\25\0"+
    "\3\3\1\0\3\3\6\0\21\3\1\u049e\10\3\25\0"+
    "\3\3\1\0\3\3\6\0\7\3\1\u049f\22\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u04a0\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u04a1\10\3\1\u04a2"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u04a3"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\21\3\1\u04a4"+
    "\10\3\25\0\3\3\1\0\3\3\6\0\26\3\1\u04a5"+
    "\3\3\25\0\3\3\1\0\3\3\6\0\6\3\1\u04a6"+
    "\23\3\25\0\3\3\1\0\3\3\6\0\5\3\1\u04a7"+
    "\24\3\25\0\3\3\1\0\3\3\6\0\12\3\1\u04a8"+
    "\17\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u04a9"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u04aa"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\14\3\1\u04ab"+
    "\15\3\25\0\3\3\1\0\3\3\6\0\4\3\1\u04ac"+
    "\25\3\25\0\3\3\1\0\3\3\6\0\6\3\1\u04ad"+
    "\23\3\25\0\3\3\1\0\3\3\6\0\11\3\1\u04ae"+
    "\20\3\25\0\3\3\1\0\3\3\6\0\12\3\1\u04af"+
    "\17\3\25\0\3\3\1\0\3\3\6\0\1\u04b0\31\3"+
    "\25\0\3\3\1\0\3\3\6\0\10\3\1\u04b1\7\3"+
    "\1\u04b2\11\3\25\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u04b3\21\3\25\0\3\3\1\0\3\3\6\0\22\3"+
    "\1\u04b4\7\3\25\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u04b5\30\3\25\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u04b6\1\3\1\u04b7\6\3\1\u04b8\17\3\25\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u04b9\24\3\25\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\u04ba\7\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u04bb\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u04bc\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u04bd\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u04be\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u04bf\15\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u04c0\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\30\3\1\u04c1\1\3\25\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u04c2\23\3\25\0\3\3"+
    "\1\0\3\3\6\0\7\3\1\u04c3\22\3\25\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u04c4\21\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u04c5\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u04c6\14\3\1\u04c7\3\3"+
    "\25\0\3\3\1\0\3\3\6\0\5\3\1\u04c8\24\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u04c9\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\15\3\1\u04ca\14\3"+
    "\25\0\3\3\1\0\3\3\6\0\7\3\1\u04cb\22\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u04cc\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u04cd\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u04ce\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u04cf\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u04d0\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u04d1\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u04d2\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u04d3\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u04d4\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u04d5\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u04d6\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\5\3\1\u04d7\24\3"+
    "\25\0\3\3\1\0\3\3\6\0\11\3\1\u04d8\20\3"+
    "\25\0\3\3\1\0\3\3\6\0\4\3\1\u04d9\25\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u04da\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\2\3\1\u04db\27\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u04dc\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u04dd\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\5\3\1\u04de\24\3"+
    "\25\0\3\3\1\0\3\3\6\0\13\3\1\u04df\10\3"+
    "\1\u04e0\5\3\25\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u04e1\24\3\25\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u04e2\15\3\25\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u04e3\21\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u04e4\27\3\25\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u04e5\24\3\25\0\3\3\1\0\3\3\6\0\22\3"+
    "\1\u04e6\7\3\25\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u04e7\21\3\25\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u04e8\21\3\25\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u04e9\17\3\25\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u04ea\14\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u04eb\25\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u04ec\25\3\25\0\3\3\1\0\3\3\6\0\1\u04ed"+
    "\31\3\25\0\3\3\1\0\3\3\6\0\15\3\1\u04ee"+
    "\14\3\25\0\3\3\1\0\3\3\6\0\10\3\1\u04ef"+
    "\21\3\25\0\3\3\1\0\3\3\6\0\26\3\1\u04f0"+
    "\3\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u04f1"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\3\3\1\u04f2"+
    "\26\3\25\0\3\3\1\0\3\3\6\0\1\3\1\u04f3"+
    "\30\3\25\0\3\3\1\0\3\3\6\0\1\u04f4\31\3"+
    "\25\0\3\3\1\0\3\3\6\0\6\3\1\u04f5\23\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u04f6\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u04f7\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\22\3\1\u04f8\7\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u04f9\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\3\3\1\u04fa\26\3"+
    "\25\0\3\3\1\0\3\3\6\0\14\3\1\u04fb\15\3"+
    "\25\0\3\3\1\0\3\3\6\0\15\3\1\u04fc\14\3"+
    "\25\0\3\3\1\0\3\3\6\0\25\3\1\u04fd\4\3"+
    "\25\0\3\3\1\0\3\3\6\0\13\3\1\u04fe\16\3"+
    "\25\0\3\3\1\0\3\3\6\0\10\3\1\u04ff\21\3"+
    "\25\0\3\3\1\0\3\3\6\0\1\u0500\31\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0501\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u0502\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u0503\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\3\1\u0504\30\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0505\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0506\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0507\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0508\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u0509\15\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u050a\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u050b\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u050c\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u050d\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u050e\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\3\1\u050f\30\3\25\0"+
    "\3\3\1\0\3\3\6\0\24\3\1\u0510\5\3\25\0"+
    "\3\3\1\0\3\3\6\0\7\3\1\u0511\22\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0512\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0513\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\24\3\1\u0514\5\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0515\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u0516\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\u0517\16\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u0518\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\17\3\1\u0519\12\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u051a\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u051b\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\u051c\17\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u051d\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u051e\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u051f\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\17\3\1\u0520\12\3\25\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u0521\15\3\25\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\u0522\17\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0523\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\3\1\u0524\30\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0525\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u0526\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u0527\14\3\25\0"+
    "\3\3\1\0\3\3\6\0\21\3\1\u0528\10\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0529\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u052a\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u052b\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u052c\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u052d\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u052e\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\u052f\16\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0530\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u0531\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u0532\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0533\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0534\24\3\25\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\u0535\17\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0536\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u0537\27\3\25\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\u0538\16\3\25\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u0539\21\3\25\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u053a\23\3\25\0"+
    "\3\3\1\0\3\3\6\0\22\3\1\u053b\7\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u053c\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\11\3\1\u053d\20\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u053e\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u053f\25\3\25\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0540\26\3\25\0"+
    "\3\3\1\0\3\3\6\0\1\u0541\31\3\25\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0542\24\3\25\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0543\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\u0544\7\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0545\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0546\24\3\25\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0547\25\3\25\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0548\24\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u0549\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\u054a\31\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u054b\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u054c\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u054d\14\3\25\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u054e\21\3\25\0\3\3\1\0\3\3"+
    "\6\0\24\3\1\u054f\5\3\25\0\3\3\1\0\3\3"+
    "\6\0\13\3\1\u0550\16\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0551\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0552\25\3\25\0\3\3\1\0\3\3"+
    "\6\0\21\3\1\u0553\10\3\25\0\3\3\1\0\3\3"+
    "\6\0\7\3\1\u0554\22\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0555\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\3\1\u0556\1\3\1\u0557\26\3\25\0\3\3"+
    "\1\0\3\3\6\0\1\u0558\31\3\25\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0559\25\3\25\0\3\3\1\0"+
    "\3\3\6\0\1\u055a\31\3\25\0\3\3\1\0\3\3"+
    "\6\0\17\3\1\u055b\12\3\25\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u055c\26\3\25\0\3\3\1\0\3\3"+
    "\6\0\17\3\1\u055d\12\3\25\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u055e\27\3\25\0\3\3\1\0\3\3"+
    "\6\0\1\u055f\31\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0560\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0561\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u0562\14\3\25\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0563\25\3\25\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0564\27\3\25\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u0565\21\3\25\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0566\26\3\25\0\3\3\1\0\3\3\6\0"+
    "\1\u0567\31\3\25\0\3\3\1\0\3\3\6\0\17\3"+
    "\1\u0568\12\3\25\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0569\27\3\25\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u056a\25\3\25\0\3\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[65820];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\40\1\3\11\5\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\1\1\1\11\2\1\2\0"+
    "\1\11\171\1\12\11\3\0\304\1\1\11\1\1\3\0"+
    "\62\1\1\0\255\1\1\0\46\1\1\0\272\1\1\0"+
    "\224\1\1\0\164\1\1\11\u0114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1386];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int line;
    int column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 139: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NCHAR;
          }
        case 349: break;
        case 178: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LINENO;
          }
        case 350: break;
        case 307: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return STATISTICS;
          }
        case 351: break;
        case 9: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Suma;
          }
        case 352: break;
        case 137: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RIGHT;
          }
        case 353: break;
        case 129: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FULL;
          }
        case 354: break;
        case 255: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRAILING;
          }
        case 355: break;
        case 347: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SEMANTICSIMILARITYTABLE;
          }
        case 356: break;
        case 322: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RECONFIGURE;
          }
        case 357: break;
        case 226: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CASCADE;
          }
        case 358: break;
        case 319: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRANSACTION;
          }
        case 359: break;
        case 19: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CorcheteCerrado;
          }
        case 360: break;
        case 253: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LENGUAGE;
          }
        case 361: break;
        case 30: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AT;
          }
        case 362: break;
        case 236: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTEGER;
          }
        case 363: break;
        case 269: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CASCADED;
          }
        case 364: break;
        case 318: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TABLESAMPLE;
          }
        case 365: break;
        case 302: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DESCRIPTOR;
          }
        case 366: break;
        case 146: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNION;
          }
        case 367: break;
        case 207: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MINUTE;
          }
        case 368: break;
        case 142: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CLOSE;
          }
        case 369: break;
        case 44: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MayorIgual;
          }
        case 370: break;
        case 51: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DobleNumeral;
          }
        case 371: break;
        case 21: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ParentesisCerrado;
          }
        case 372: break;
        case 191: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CREATE;
          }
        case 373: break;
        case 217: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RESTORE;
          }
        case 374: break;
        case 38: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IS;
          }
        case 375: break;
        case 230: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONVERT;
          }
        case 376: break;
        case 18: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CorcheteAbierto;
          }
        case 377: break;
        case 299: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PROCEDURE;
          }
        case 378: break;
        case 36: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OF;
          }
        case 379: break;
        case 143: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CROSS;
          }
        case 380: break;
        case 20: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ParentesisAbierto;
          }
        case 381: break;
        case 31: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AS;
          }
        case 382: break;
        case 43: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MenorIgual;
          }
        case 383: break;
        case 152: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INDEX;
          }
        case 384: break;
        case 126: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WITH;
          }
        case 385: break;
        case 115: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OVER;
          }
        case 386: break;
        case 136: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TABLE;
          }
        case 387: break;
        case 275: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IDENTITY;
          }
        case 388: break;
        case 57: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ANY;
          }
        case 389: break;
        case 328: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INSENSITIVE;
          }
        case 390: break;
        case 154: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INPUT;
          }
        case 391: break;
        case 247: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FOREIGN;
          }
        case 392: break;
        case 165: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MATCH;
          }
        case 393: break;
        case 208: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VALUES;
          }
        case 394: break;
        case 161: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GROUP;
          }
        case 395: break;
        case 64: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NOT;
          }
        case 396: break;
        case 235: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OFFSETS;
          }
        case 397: break;
        case 336: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIMEZONE_HOUR;
          }
        case 398: break;
        case 69: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OFF;
          }
        case 399: break;
        case 199: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPTION;
          }
        case 400: break;
        case 168: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VALUE;
          }
        case 401: break;
        case 220: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NOCHECK;
          }
        case 402: break;
        case 42: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IgualIgual;
          }
        case 403: break;
        case 271: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONTAINS;
          }
        case 404: break;
        case 54: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ALL;
          }
        case 405: break;
        case 132: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ALTER;
          }
        case 406: break;
        case 163: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHERE;
          }
        case 407: break;
        case 292: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENQUERY;
          }
        case 408: break;
        case 238: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BETWEEN;
          }
        case 409: break;
        case 268: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SMALLINT;
          }
        case 410: break;
        case 291: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COLLATION;
          }
        case 411: break;
        case 29: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return String;
          }
        case 412: break;
        case 296: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ISOLARION;
          }
        case 413: break;
        case 140: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLCA;
          }
        case 414: break;
        case 294: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTERSECT;
          }
        case 415: break;
        case 314: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRIVILEGES;
          }
        case 416: break;
        case 272: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONTINUE;
          }
        case 417: break;
        case 26: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Coma;
          }
        case 418: break;
        case 190: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SCHEMA;
          }
        case 419: break;
        case 94: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ELSE;
          }
        case 420: break;
        case 100: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROWS;
          }
        case 421: break;
        case 93: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIME;
          }
        case 422: break;
        case 209: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DECLARE;
          }
        case 423: break;
        case 265: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLERROR;
          }
        case 424: break;
        case 47: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return or;
          }
        case 425: break;
        case 150: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ORDER;
          }
        case 426: break;
        case 245: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VARCHAR;
          }
        case 427: break;
        case 14: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SignoExclamacion;
          }
        case 428: break;
        case 111: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USER;
          }
        case 429: break;
        case 106: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SOME;
          }
        case 430: break;
        case 218: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NATURAL;
          }
        case 431: break;
        case 274: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OVERLAPS;
          }
        case 432: break;
        case 80: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DESC;
          }
        case 433: break;
        case 250: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DATABASE;
          }
        case 434: break;
        case 304: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REFERENCES;
          }
        case 435: break;
        case 303: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISCONNECT;
          }
        case 436: break;
        case 62: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TOP;
          }
        case 437: break;
        case 148: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USING;
          }
        case 438: break;
        case 88: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LIKE;
          }
        case 439: break;
        case 177: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DOMAIN;
          }
        case 440: break;
        case 78: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DATE;
          }
        case 441: break;
        case 17: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Punto;
          }
        case 442: break;
        case 37: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IN;
          }
        case 443: break;
        case 50: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Llaves;
          }
        case 444: break;
        case 8: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Igual;
          }
        case 445: break;
        case 231: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COMPUTE;
          }
        case 446: break;
        case 4: 
          { /*Ignore*/
          }
        case 447: break;
        case 86: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LEFT;
          }
        case 448: break;
        case 1: 
          { line=yyline; column=yycolumn; return ERROR;
          }
        case 449: break;
        case 216: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXECUTE;
          }
        case 450: break;
        case 267: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SHUTDOWN;
          }
        case 451: break;
        case 89: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRAN;
          }
        case 452: break;
        case 334: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OCTET_LENGTH;
          }
        case 453: break;
        case 346: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SEMANTICKEYPHRASETABLE;
          }
        case 454: break;
        case 103: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NONE;
          }
        case 455: break;
        case 164: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHILE;
          }
        case 456: break;
        case 114: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPEN;
          }
        case 457: break;
        case 91: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRIM;
          }
        case 458: break;
        case 300: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WRITETEXT;
          }
        case 459: break;
        case 289: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CLUSTERED;
          }
        case 460: break;
        case 210: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DECIMAL;
          }
        case 461: break;
        case 158: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRIOR;
          }
        case 462: break;
        case 141: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SPACE;
          }
        case 463: break;
        case 232: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNKNOWN;
          }
        case 464: break;
        case 329: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NONCLUSTERED;
          }
        case 465: break;
        case 28: 
          { lexeme=yytext(); column=yycolumn; line=yyline; return Float;
          }
        case 466: break;
        case 313: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BIT_LENGTH;
          }
        case 467: break;
        case 301: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DEALLOCATE;
          }
        case 468: break;
        case 192: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURSOR;
          }
        case 469: break;
        case 264: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NATIONAL;
          }
        case 470: break;
        case 85: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LAST;
          }
        case 471: break;
        case 75: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MAX;
          }
        case 472: break;
        case 27: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Bit;
          }
        case 473: break;
        case 127: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VIEW;
          }
        case 474: break;
        case 118: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BULK;
          }
        case 475: break;
        case 305: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROWGUIDCOL;
          }
        case 476: break;
        case 248: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ALLOCATE;
          }
        case 477: break;
        case 320: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRANSLATION;
          }
        case 478: break;
        case 11: 
          { lexeme=yytext();line=yyline; column=yycolumn; return Porcentaje;
          }
        case 479: break;
        case 342: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIMEZONE_MINUTE;
          }
        case 480: break;
        case 187: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SELECT;
          }
        case 481: break;
        case 338: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CORRESPONDING;
          }
        case 482: break;
        case 283: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TEMPORARY;
          }
        case 483: break;
        case 149: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UPPER;
          }
        case 484: break;
        case 339: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONTAINSTABLE;
          }
        case 485: break;
        case 130: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FILE;
          }
        case 486: break;
        case 229: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONNECT;
          }
        case 487: break;
        case 340: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FREETEXTTABLE;
          }
        case 488: break;
        case 112: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return HOUR;
          }
        case 489: break;
        case 125: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WORK;
          }
        case 490: break;
        case 258: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXTERNAL;
          }
        case 491: break;
        case 32: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TO;
          }
        case 492: break;
        case 98: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REAL;
          }
        case 493: break;
        case 7: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Resta;
          }
        case 494: break;
        case 66: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SET;
          }
        case 495: break;
        case 145: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COUNT;
          }
        case 496: break;
        case 188: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SECOND;
          }
        case 497: break;
        case 176: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DOUBLE;
          }
        case 498: break;
        case 315: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FILLFACTOR;
          }
        case 499: break;
        case 240: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PERCENT;
          }
        case 500: break;
        case 309: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONNECTION;
          }
        case 501: break;
        case 122: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PROC;
          }
        case 502: break;
        case 117: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ZONE;
          }
        case 503: break;
        case 288: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SUBSTRING;
          }
        case 504: break;
        case 131: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return JOIN;
          }
        case 505: break;
        case 124: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHEN;
          }
        case 506: break;
        case 102: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NULL;
          }
        case 507: break;
        case 257: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ENDEXEC;
          }
        case 508: break;
        case 53: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ADD;
          }
        case 509: break;
        case 261: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RESTRICT;
          }
        case 510: break;
        case 99: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RULE;
          }
        case 511: break;
        case 119: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BOTH;
          }
        case 512: break;
        case 157: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRINT;
          }
        case 513: break;
        case 228: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COLLATE;
          }
        case 514: break;
        case 156: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BREAK;
          }
        case 515: break;
        case 160: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GRANT;
          }
        case 516: break;
        case 286: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXCEPTION;
          }
        case 517: break;
        case 202: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BROWSE;
          }
        case 518: break;
        case 49: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Parentesis;
          }
        case 519: break;
        case 83: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISK;
          }
        case 520: break;
        case 196: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UPDATE;
          }
        case 521: break;
        case 343: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IDENTITY_INSERT;
          }
        case 522: break;
        case 151: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OUTER;
          }
        case 523: break;
        case 74: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GET;
          }
        case 524: break;
        case 280: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FREETEXT;
          }
        case 525: break;
        case 144: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHECK;
          }
        case 526: break;
        case 256: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRUNCATE;
          }
        case 527: break;
        case 252: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISTINCT;
          }
        case 528: break;
        case 285: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIMESTAMP;
          }
        case 529: break;
        case 259: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return READTEXT;
          }
        case 530: break;
        case 48: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Corchetes;
          }
        case 531: break;
        case 180: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ESCAPE;
          }
        case 532: break;
        case 116: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTO;
          }
        case 533: break;
        case 109: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CASE;
          }
        case 534: break;
        case 155: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BEGIN;
          }
        case 535: break;
        case 6: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Guionbajo;
          }
        case 536: break;
        case 170: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FLOAT;
          }
        case 537: break;
        case 101: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NEXT;
          }
        case 538: break;
        case 330: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SESSION_USER;
          }
        case 539: break;
        case 70: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INT;
          }
        case 540: break;
        case 277: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRESERVE;
          }
        case 541: break;
        case 34: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OR;
          }
        case 542: break;
        case 39: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IF;
          }
        case 543: break;
        case 197: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return HAVING;
          }
        case 544: break;
        case 40: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BY;
          }
        case 545: break;
        case 193: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COLUMN;
          }
        case 546: break;
        case 162: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WRITE;
          }
        case 547: break;
        case 203: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PASCAL;
          }
        case 548: break;
        case 63: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return END;
          }
        case 549: break;
        case 90: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRUE;
          }
        case 550: break;
        case 79: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DENY;
          }
        case 551: break;
        case 52: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ADA;
          }
        case 552: break;
        case 222: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SETUSER;
          }
        case 553: break;
        case 121: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PLAN;
          }
        case 554: break;
        case 179: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ERRLVL;
          }
        case 555: break;
        case 241: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PREPARE;
          }
        case 556: break;
        case 211: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DEFAULT;
          }
        case 557: break;
        case 266: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLSTATE;
          }
        case 558: break;
        case 215: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXTRACT;
          }
        case 559: break;
        case 254: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TEXTSIZE;
          }
        case 560: break;
        case 273: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return HOLDLOCK;
          }
        case 561: break;
        case 281: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FUNCTION;
          }
        case 562: break;
        case 23: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LlaveCerrada;
          }
        case 563: break;
        case 317: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISTRIBUTED;
          }
        case 564: break;
        case 166: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MERGE;
          }
        case 565: break;
        case 73: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PAD;
          }
        case 566: break;
        case 133: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LEVEL;
          }
        case 567: break;
        case 2: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Identificador;
          }
        case 568: break;
        case 22: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LlaveAbierta;
          }
        case 569: break;
        case 323: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REPLICATION;
          }
        case 570: break;
        case 200: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INSERT;
          }
        case 571: break;
        case 345: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_TIMESTAMP;
          }
        case 572: break;
        case 276: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTERVAL;
          }
        case 573: break;
        case 295: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INITIALLY;
          }
        case 574: break;
        case 287: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RAISERROR;
          }
        case 575: break;
        case 172: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FOUND;
          }
        case 576: break;
        case 67: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SUM;
          }
        case 577: break;
        case 284: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRANSLATE;
          }
        case 578: break;
        case 92: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return THEN;
          }
        case 579: break;
        case 337: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SECURITYAUDIT;
          }
        case 580: break;
        case 186: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NULLIF;
          }
        case 581: break;
        case 270: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COALESCE;
          }
        case 582: break;
        case 173: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FIRST;
          }
        case 583: break;
        case 105: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SAVE;
          }
        case 584: break;
        case 110: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHAR;
          }
        case 585: break;
        case 95: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXEC;
          }
        case 586: break;
        case 104: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return YEAR;
          }
        case 587: break;
        case 182: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXISTS;
          }
        case 588: break;
        case 348: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SEMANTICSIMILARITYDETAILSTABLE;
          }
        case 589: break;
        case 76: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MIN;
          }
        case 590: break;
        case 41: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GO;
          }
        case 591: break;
        case 16: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PuntoyComa;
          }
        case 592: break;
        case 58: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ASC;
          }
        case 593: break;
        case 71: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BIT;
          }
        case 594: break;
        case 65: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQL;
          }
        case 595: break;
        case 35: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ON;
          }
        case 596: break;
        case 311: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UPDATETEXT;
          }
        case 597: break;
        case 242: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRIMARY;
          }
        case 598: break;
        case 61: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DEC;
          }
        case 599: break;
        case 282: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ASSERTION;
          }
        case 600: break;
        case 128: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FROM;
          }
        case 601: break;
        case 82: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DUMP;
          }
        case 602: break;
        case 10: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Multiplicacion;
          }
        case 603: break;
        case 195: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNIQUE;
          }
        case 604: break;
        case 97: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return READ;
          }
        case 605: break;
        case 293: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INDICATOR;
          }
        case 606: break;
        case 262: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROLLBACK;
          }
        case 607: break;
        case 87: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LOAD;
          }
        case 608: break;
        case 198: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OUTPUT;
          }
        case 609: break;
        case 113: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ONLY;
          }
        case 610: break;
        case 316: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DIAGNOSTICS;
          }
        case 611: break;
        case 81: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DROP;
          }
        case 612: break;
        case 324: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SYSTEM_USER;
          }
        case 613: break;
        case 221: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLCODE;
          }
        case 614: break;
        case 260: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RELATIVE;
          }
        case 615: break;
        case 120: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return KILL;
          }
        case 616: break;
        case 214: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TSEQUAL;
          }
        case 617: break;
        case 84: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DBCC;
          }
        case 618: break;
        case 332: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_TIME;
          }
        case 619: break;
        case 46: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return andS;
          }
        case 620: break;
        case 15: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return y;
          }
        case 621: break;
        case 45: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NoIgual;
          }
        case 622: break;
        case 243: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WAITFOR;
          }
        case 623: break;
        case 333: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_USER;
          }
        case 624: break;
        case 59: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AVG;
          }
        case 625: break;
        case 3: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Numero;
          }
        case 626: break;
        case 147: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USAGE;
          }
        case 627: break;
        case 25: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Numeral;
          }
        case 628: break;
        case 212: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LEADING;
          }
        case 629: break;
        case 68: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USE;
          }
        case 630: break;
        case 171: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FETCH;
          }
        case 631: break;
        case 224: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SECTION;
          }
        case 632: break;
        case 213: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRIGGER;
          }
        case 633: break;
        case 174: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ACTION;
          }
        case 634: break;
        case 312: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENROWSET;
          }
        case 635: break;
        case 234: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENXML;
          }
        case 636: break;
        case 331: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_DATE;
          }
        case 637: break;
        case 135: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LOWER;
          }
        case 638: break;
        case 24: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Arroba;
          }
        case 639: break;
        case 233: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNPIVOT;
          }
        case 640: break;
        case 239: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PARTIAL;
          }
        case 641: break;
        case 327: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IDENTITYCOL;
          }
        case 642: break;
        case 297: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IMMEDIATE;
          }
        case 643: break;
        case 123: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GOTO;
          }
        case 644: break;
        case 60: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DAY;
          }
        case 645: break;
        case 181: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXCEPT;
          }
        case 646: break;
        case 205: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GLOBAL;
          }
        case 647: break;
        case 189: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SCROLL;
          }
        case 648: break;
        case 167: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MONTH;
          }
        case 649: break;
        case 310: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONSTRAINT;
          }
        case 650: break;
        case 55: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ARE;
          }
        case 651: break;
        case 5: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Division;
          }
        case 652: break;
        case 341: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENDATASOURCE;
          }
        case 653: break;
        case 138: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NAMES;
          }
        case 654: break;
        case 326: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONSTRAINTS;
          }
        case 655: break;
        case 169: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FALSE;
          }
        case 656: break;
        case 201: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BACKUP;
          }
        case 657: break;
        case 206: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MODULE;
          }
        case 658: break;
        case 225: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CATALOG;
          }
        case 659: break;
        case 153: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INNER;
          }
        case 660: break;
        case 298: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRECISION;
          }
        case 661: break;
        case 183: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RETURN;
          }
        case 662: break;
        case 134: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LOCAL;
          }
        case 663: break;
        case 77: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FOR;
          }
        case 664: break;
        case 223: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SESSION;
          }
        case 665: break;
        case 159: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PIVOT;
          }
        case 666: break;
        case 279: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHENEVER;
          }
        case 667: break;
        case 263: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROWCOUNT;
          }
        case 668: break;
        case 12: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Menor;
          }
        case 669: break;
        case 335: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AUTHORIZATION;
          }
        case 670: break;
        case 306: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLWARNING;
          }
        case 671: break;
        case 227: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT;
          }
        case 672: break;
        case 56: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AND;
          }
        case 673: break;
        case 175: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DELETE;
          }
        case 674: break;
        case 33: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NO;
          }
        case 675: break;
        case 251: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DESCRIBE;
          }
        case 676: break;
        case 13: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Mayor;
          }
        case 677: break;
        case 219: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NUMERIC;
          }
        case 678: break;
        case 108: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CAST;
          }
        case 679: break;
        case 185: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REVOKE;
          }
        case 680: break;
        case 107: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SIZE;
          }
        case 681: break;
        case 72: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return KEY;
          }
        case 682: break;
        case 249: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ABSOLUTE;
          }
        case 683: break;
        case 344: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHARACTER_LENGTH;
          }
        case 684: break;
        case 237: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INCLUDE;
          }
        case 685: break;
        case 290: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHARACTER;
          }
        case 686: break;
        case 278: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return POSITION;
          }
        case 687: break;
        case 204: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PUBLIC;
          }
        case 688: break;
        case 244: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VARYING;
          }
        case 689: break;
        case 184: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REVERT;
          }
        case 690: break;
        case 308: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHECKPOINT;
          }
        case 691: break;
        case 96: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXIT;
          }
        case 692: break;
        case 321: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRY_CONVERT;
          }
        case 693: break;
        case 194: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COMMIT;
          }
        case 694: break;
        case 325: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHAR_LENGTH;
          }
        case 695: break;
        case 246: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FORTRAN;
          }
        case 696: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
