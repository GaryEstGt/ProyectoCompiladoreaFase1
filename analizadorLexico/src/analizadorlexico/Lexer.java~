/* The following code was generated by JFlex 1.4.3 on 28/09/19 05:33 PM */

package analizadorlexico;
import static analizadorlexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/09/19 05:33 PM from the specification file
 * <tt>C:/Users/garya/ProyectoCompiladoreaFase1/analizadorLexico/src/analizadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\4\2\0\1\10\22\0\1\11\1\53\1\0\1\67"+
    "\1\0\1\50\1\54\1\6\1\62\1\63\1\47\1\46\1\11\1\44"+
    "\1\57\1\5\1\71\1\70\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\0\1\56\1\51\1\45\1\52\1\0\1\66\1\12"+
    "\1\31\1\23\1\13\1\16\1\41\1\34\1\25\1\27\1\43\1\32"+
    "\1\14\1\36\1\20\1\26\1\33\1\2\1\17\1\22\1\15\1\24"+
    "\1\37\1\35\1\42\1\21\1\30\1\60\1\0\1\61\1\0\1\40"+
    "\1\0\4\1\1\72\25\1\1\64\1\55\1\65\1\7\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\26\2"+
    "\1\6\2\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\1\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\0\1\34\2\2\1\35\2\2\1\36\24\2\1\37"+
    "\17\2\1\40\30\2\1\41\1\42\4\2\1\43\1\2"+
    "\1\44\1\45\1\2\1\46\4\2\1\47\17\2\1\50"+
    "\23\2\1\3\1\4\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\3\0\1\63\1\64"+
    "\1\65\1\2\1\66\1\67\1\70\1\2\1\71\3\2"+
    "\1\72\1\2\1\73\4\2\1\74\33\2\1\75\3\2"+
    "\1\76\30\2\1\77\3\2\1\100\3\2\1\101\7\2"+
    "\1\102\30\2\1\103\15\2\1\104\2\2\1\105\17\2"+
    "\1\106\1\107\1\2\1\110\13\2\1\111\12\2\1\112"+
    "\3\2\1\113\12\2\1\114\4\2\2\4\3\0\1\4"+
    "\7\2\1\115\2\2\1\116\1\117\3\2\1\120\1\121"+
    "\5\2\1\122\1\123\1\124\3\2\1\125\1\126\3\2"+
    "\1\127\3\2\1\130\2\2\1\131\2\2\1\132\1\2"+
    "\1\133\1\134\1\135\1\2\1\0\3\2\1\136\1\2"+
    "\1\137\2\2\1\140\1\141\10\2\1\142\1\2\1\143"+
    "\6\2\1\144\1\2\1\145\1\2\1\146\2\2\1\147"+
    "\4\2\1\150\15\2\1\151\1\152\3\2\1\153\1\154"+
    "\7\2\1\155\21\2\1\156\5\2\1\157\1\2\1\160"+
    "\4\2\1\161\1\162\5\2\1\163\7\2\1\164\5\2"+
    "\1\165\1\166\1\2\1\167\2\2\1\170\4\2\1\171"+
    "\12\2\1\172\3\2\1\173\1\2\1\174\1\175\10\2"+
    "\1\176\4\2\1\177\1\200\5\2\1\201\1\2\1\202"+
    "\1\33\1\0\1\4\1\2\1\203\23\2\1\204\1\205"+
    "\1\206\1\2\1\207\13\2\1\0\24\2\1\210\2\2"+
    "\1\211\1\212\6\2\1\213\17\2\1\214\4\2\1\215"+
    "\1\2\1\216\4\2\1\217\11\2\1\220\3\2\1\221"+
    "\2\2\1\222\1\223\1\2\1\224\2\2\1\225\1\2"+
    "\1\226\11\2\1\227\3\2\1\230\4\2\1\231\4\2"+
    "\1\232\1\233\11\2\1\234\1\235\4\2\1\236\1\2"+
    "\1\237\1\240\1\2\1\241\1\242\1\2\1\243\1\244"+
    "\1\245\1\2\1\246\1\2\1\247\2\2\1\250\1\251"+
    "\1\252\4\2\1\253\1\2\1\254\2\2\1\255\4\2"+
    "\1\256\4\2\1\257\1\260\6\2\1\261\14\2\1\262"+
    "\1\0\1\263\3\2\1\264\1\265\3\2\1\266\4\2"+
    "\1\267\1\270\6\2\1\271\10\2\1\272\4\2\1\273"+
    "\2\2\1\274\1\275\6\2\1\276\1\2\1\277\5\2"+
    "\1\300\7\2\1\301\1\302\2\2\1\303\1\304\2\2"+
    "\1\305\1\306\13\2\1\307\5\2\1\310\1\2\1\311"+
    "\2\2\1\312\7\2\1\313\1\2\1\314\3\2\1\315"+
    "\1\316\1\317\17\2\1\320\1\321\1\322\4\2\1\323"+
    "\11\2\1\324\1\325\2\2\1\0\1\2\1\326\1\327"+
    "\5\2\1\330\6\2\1\331\1\2\1\332\1\2\1\333"+
    "\2\2\1\334\2\2\1\335\1\336\1\337\6\2\1\340"+
    "\1\341\1\2\1\342\4\2\1\343\4\2\1\344\1\2"+
    "\1\345\1\346\1\347\1\350\6\2\1\351\1\2\1\352"+
    "\4\2\1\353\1\2\1\354\3\2\1\355\1\2\1\356"+
    "\1\357\2\2\1\360\1\2\1\361\2\2\1\362\2\2"+
    "\1\363\1\364\2\2\1\365\1\366\1\2\1\367\2\2"+
    "\1\370\1\371\1\2\1\372\3\2\1\373\1\2\1\374"+
    "\2\2\1\375\2\2\1\376\1\2\1\377\2\2\1\u0100"+
    "\1\u0101\2\2\1\u0102\1\u0103\1\u0104\3\2\1\u0105\1\u0106"+
    "\1\2\1\u0107\1\2\1\u0108\1\u0109\7\2\1\u010a\1\u010b"+
    "\1\u010c\5\2\1\u010d\2\2\1\u010e\1\u010f\3\2\1\u0110"+
    "\4\2\1\u0111\1\u0112\2\2\1\u0113\5\2\1\u0114\3\2"+
    "\1\u0115\1\2\1\u0116\1\u0117\1\u0118\1\2\1\u0119\7\2"+
    "\1\u011a\1\2\1\u011b\2\2\1\u011c\1\2\1\u011d\1\u011e"+
    "\14\2\1\u011f\1\u0120\3\2\1\u0121\2\2\1\u0122\6\2"+
    "\1\u0123\4\2\1\u0124\1\u0125\1\2\1\u0126\1\u0127\1\u0128"+
    "\1\2\1\u0129\1\u012a\1\2\1\u012b\3\2\1\u012c\1\u012d"+
    "\2\2\1\u012e\10\2\1\u012f\1\u0130\1\2\1\u0131\1\u0132"+
    "\12\2\1\u0133\2\2\1\u0134\1\u0135\1\u0136\2\2\1\u0137"+
    "\3\2\1\u0138\1\u0139\1\2\1\u013a\1\2\1\u013b\1\u013c"+
    "\1\u013d\1\u013e\1\u013f\1\u0140\2\2\1\u0141\1\u0142\5\2"+
    "\1\u0143\4\2\1\u0144\2\2\1\u0145\2\2\1\u0146\1\2"+
    "\1\u0147\4\2\1\u0148\1\u0149\3\2\1\u014a\1\u014b\1\u014c"+
    "\3\2\1\u014d\3\2\1\u014e\1\u014f\1\2\1\u0150\4\2"+
    "\1\u0151\1\u0152\2\2\1\u0153\5\2\1\u0154\1\2\1\u0155"+
    "\4\2\1\u0156\3\2\1\u0157\2\2\1\u0158\15\2\1\u0159"+
    "\1\2\1\u015a\6\2\1\u015b";

  private static int [] zzUnpackAction() {
    int [] result = new int[1385];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\166\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\73\0\73\0\73\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\73\0\73\0\u08c2\0\73\0\u08fd\0\73"+
    "\0\u0938\0\73\0\73\0\u0973\0\261\0\u09ae\0\u09e9\0\u0162"+
    "\0\73\0\u0a24\0\u0a5f\0\166\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833"+
    "\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\166"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\166\0\u1ccf\0\u1d0a\0\u1d45"+
    "\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5"+
    "\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5"+
    "\0\u24e0\0\u251b\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\u2556\0\u2591\0\u25cc\0\166"+
    "\0\166\0\u2607\0\u2642\0\166\0\166\0\166\0\u267d\0\166"+
    "\0\u26b8\0\u26f3\0\u272e\0\166\0\u2769\0\166\0\u27a4\0\u27df"+
    "\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7"+
    "\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f"+
    "\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67"+
    "\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\166\0\u2f04"+
    "\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc"+
    "\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4"+
    "\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c"+
    "\0\u34c7\0\u3502\0\u353d\0\166\0\u3578\0\u35b3\0\u35ee\0\u3629"+
    "\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801"+
    "\0\u383c\0\u3877\0\u38b2\0\166\0\u38ed\0\u3928\0\u3963\0\u399e"+
    "\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76"+
    "\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e"+
    "\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26"+
    "\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe"+
    "\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6"+
    "\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae"+
    "\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610\0\166\0\u464b"+
    "\0\166\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8"+
    "\0\u4823\0\u485e\0\u4899\0\u48d4\0\166\0\u490f\0\u494a\0\u4985"+
    "\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\166"+
    "\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa"+
    "\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2"+
    "\0\u4f0d\0\u4f48\0\u4f83\0\73\0\u4fbe\0\u4ff9\0\u5034\0\u506f"+
    "\0\u2591\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c"+
    "\0\166\0\u5247\0\u5282\0\166\0\u52bd\0\u52f8\0\u5333\0\u536e"+
    "\0\166\0\166\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495\0\166"+
    "\0\166\0\166\0\u54d0\0\u550b\0\u5546\0\166\0\166\0\u5581"+
    "\0\u55bc\0\u55f7\0\166\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e"+
    "\0\u5759\0\166\0\u5794\0\u57cf\0\166\0\u580a\0\166\0\u5845"+
    "\0\166\0\u5880\0\u58bb\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2"+
    "\0\166\0\u5a1d\0\u5a58\0\u5a93\0\166\0\u5ace\0\u5b09\0\u5b44"+
    "\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\166\0\u5ca6\0\166"+
    "\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\166\0\u5e43"+
    "\0\u5e7e\0\u5eb9\0\166\0\u5ef4\0\u5f2f\0\166\0\u5f6a\0\u5fa5"+
    "\0\u5fe0\0\u601b\0\166\0\u6056\0\u6091\0\u60cc\0\u6107\0\u6142"+
    "\0\u617d\0\u61b8\0\u61f3\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a"+
    "\0\166\0\166\0\u6355\0\u6390\0\u63cb\0\166\0\166\0\u6406"+
    "\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568\0\u65a3\0\u65de"+
    "\0\u6619\0\u6654\0\u668f\0\u66ca\0\u6705\0\u6740\0\u677b\0\u67b6"+
    "\0\u67f1\0\u682c\0\u6867\0\u68a2\0\u68dd\0\u6918\0\u6953\0\u698e"+
    "\0\166\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5\0\166\0\u6af0"+
    "\0\166\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d"+
    "\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\166\0\u6db4\0\u6def\0\u6e2a"+
    "\0\u6e65\0\u6ea0\0\u6edb\0\u6f16\0\166\0\u6f51\0\u6f8c\0\u6fc7"+
    "\0\u7002\0\u703d\0\166\0\166\0\u7078\0\166\0\u70b3\0\u70ee"+
    "\0\166\0\u7129\0\u7164\0\u719f\0\u71da\0\u7215\0\u7250\0\u728b"+
    "\0\u72c6\0\u7301\0\u733c\0\u7377\0\u73b2\0\u73ed\0\u7428\0\u7463"+
    "\0\166\0\u749e\0\u74d9\0\u7514\0\u754f\0\u758a\0\166\0\166"+
    "\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1\0\u76ec\0\u7727\0\u7762"+
    "\0\166\0\u779d\0\u77d8\0\u7813\0\u784e\0\166\0\166\0\u7889"+
    "\0\u78c4\0\u78ff\0\u793a\0\u7975\0\166\0\u79b0\0\166\0\u79eb"+
    "\0\u7a26\0\u5034\0\u7a61\0\166\0\u7a9c\0\u7ad7\0\u7b12\0\u7b4d"+
    "\0\u7b88\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74\0\u7caf\0\u7cea\0\u7d25"+
    "\0\u7d60\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2\0\166"+
    "\0\166\0\166\0\u7efd\0\u7f38\0\u7f73\0\u7fae\0\u7fe9\0\u8024"+
    "\0\u805f\0\u809a\0\u80d5\0\u8110\0\u814b\0\u8186\0\u81c1\0\u81fc"+
    "\0\u8237\0\u8272\0\u82ad\0\u82e8\0\u8323\0\u835e\0\u8399\0\u83d4"+
    "\0\u840f\0\u844a\0\u8485\0\u84c0\0\u84fb\0\u8536\0\u8571\0\u85ac"+
    "\0\u85e7\0\u8622\0\u865d\0\u8698\0\166\0\u86d3\0\u870e\0\166"+
    "\0\166\0\u8749\0\u8784\0\u87bf\0\u87fa\0\u8835\0\u8870\0\166"+
    "\0\u88ab\0\u88e6\0\u8921\0\u895c\0\u8997\0\u89d2\0\u8a0d\0\u8a48"+
    "\0\u8a83\0\u8abe\0\u8af9\0\u8b34\0\u8b6f\0\u8baa\0\u8be5\0\166"+
    "\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\166\0\u8d0c\0\166\0\u8d47"+
    "\0\u8d82\0\u8dbd\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f"+
    "\0\u8f5a\0\u8f95\0\u8fd0\0\u900b\0\u9046\0\166\0\u9081\0\u90bc"+
    "\0\u90f7\0\166\0\u9132\0\u916d\0\166\0\166\0\u91a8\0\166"+
    "\0\u91e3\0\u921e\0\166\0\u9259\0\166\0\u9294\0\u92cf\0\u930a"+
    "\0\u9345\0\u9380\0\u93bb\0\u93f6\0\u9431\0\u946c\0\166\0\u94a7"+
    "\0\u94e2\0\u951d\0\166\0\u9558\0\u9593\0\u95ce\0\u9609\0\166"+
    "\0\u9644\0\u967f\0\u96ba\0\u96f5\0\166\0\166\0\u9730\0\u976b"+
    "\0\u97a6\0\u97e1\0\u981c\0\u9857\0\u9892\0\u98cd\0\u9908\0\166"+
    "\0\166\0\u9943\0\u997e\0\u99b9\0\u99f4\0\166\0\u9a2f\0\166"+
    "\0\166\0\u9a6a\0\u9aa5\0\166\0\u9ae0\0\166\0\166\0\166"+
    "\0\u9b1b\0\166\0\u9b56\0\u9b91\0\u9bcc\0\u9c07\0\166\0\166"+
    "\0\166\0\u9c42\0\u9c7d\0\u9cb8\0\u9cf3\0\166\0\u9d2e\0\166"+
    "\0\u9d69\0\u9da4\0\166\0\u9ddf\0\u9e1a\0\u9e55\0\u9e90\0\166"+
    "\0\u9ecb\0\u9f06\0\u9f41\0\u9f7c\0\166\0\166\0\u9fb7\0\u9ff2"+
    "\0\ua02d\0\ua068\0\ua0a3\0\ua0de\0\166\0\ua119\0\ua154\0\ua18f"+
    "\0\ua1ca\0\ua205\0\ua240\0\ua27b\0\ua2b6\0\ua2f1\0\ua32c\0\ua367"+
    "\0\ua3a2\0\166\0\ua3dd\0\166\0\ua418\0\ua453\0\ua48e\0\ua4c9"+
    "\0\166\0\ua504\0\ua53f\0\ua57a\0\166\0\ua5b5\0\ua5f0\0\ua62b"+
    "\0\ua666\0\166\0\166\0\ua6a1\0\ua6dc\0\ua717\0\ua752\0\ua78d"+
    "\0\ua7c8\0\166\0\ua803\0\ua83e\0\ua879\0\ua8b4\0\ua8ef\0\ua92a"+
    "\0\ua965\0\ua9a0\0\166\0\ua9db\0\uaa16\0\uaa51\0\uaa8c\0\166"+
    "\0\uaac7\0\uab02\0\166\0\166\0\uab3d\0\uab78\0\uabb3\0\uabee"+
    "\0\uac29\0\uac64\0\166\0\uac9f\0\166\0\uacda\0\uad15\0\uad50"+
    "\0\uad8b\0\uadc6\0\166\0\uae01\0\uae3c\0\uae77\0\uaeb2\0\uaeed"+
    "\0\uaf28\0\uaf63\0\166\0\166\0\uaf9e\0\uafd9\0\ub014\0\166"+
    "\0\ub04f\0\ub08a\0\166\0\166\0\ub0c5\0\ub100\0\ub13b\0\ub176"+
    "\0\ub1b1\0\ub1ec\0\ub227\0\ub262\0\ub29d\0\ub2d8\0\ub313\0\166"+
    "\0\ub34e\0\ub389\0\ub3c4\0\ub3ff\0\ub43a\0\166\0\ub475\0\166"+
    "\0\ub4b0\0\ub4eb\0\166\0\ub526\0\ub561\0\ub59c\0\ub5d7\0\ub612"+
    "\0\ub64d\0\ub688\0\166\0\ub6c3\0\166\0\ub6fe\0\ub739\0\ub774"+
    "\0\166\0\166\0\166\0\ub7af\0\ub7ea\0\ub825\0\ub860\0\ub89b"+
    "\0\ub8d6\0\ub911\0\ub94c\0\ub987\0\ub9c2\0\ub9fd\0\uba38\0\uba73"+
    "\0\ubaae\0\ubae9\0\166\0\166\0\166\0\ubb24\0\ubb5f\0\ubb9a"+
    "\0\ubbd5\0\166\0\ubc10\0\ubc4b\0\ubc86\0\ubcc1\0\ubcfc\0\ubd37"+
    "\0\ubd72\0\ubdad\0\ubde8\0\166\0\166\0\ube23\0\ube5e\0\ube99"+
    "\0\ubed4\0\166\0\166\0\ubf0f\0\ubf4a\0\ubf85\0\ubfc0\0\ubffb"+
    "\0\166\0\uc036\0\uc071\0\uc0ac\0\uc0e7\0\uc122\0\uc15d\0\166"+
    "\0\uc198\0\166\0\uc1d3\0\166\0\uc20e\0\uc249\0\166\0\uc284"+
    "\0\uc2bf\0\166\0\uc2fa\0\166\0\uc335\0\uc370\0\uc3ab\0\uc3e6"+
    "\0\uc421\0\uc45c\0\166\0\uc497\0\uc4d2\0\uc50d\0\uc548\0\uc583"+
    "\0\uc5be\0\uc5f9\0\166\0\uc634\0\uc66f\0\uc6aa\0\uc6e5\0\uc720"+
    "\0\uc75b\0\166\0\166\0\166\0\166\0\uc796\0\uc7d1\0\uc80c"+
    "\0\uc847\0\uc882\0\uc8bd\0\166\0\uc8f8\0\166\0\uc933\0\uc96e"+
    "\0\uc9a9\0\uc9e4\0\166\0\uca1f\0\166\0\uca5a\0\uca95\0\ucad0"+
    "\0\166\0\ucb0b\0\166\0\166\0\ucb46\0\ucb81\0\166\0\ucbbc"+
    "\0\166\0\ucbf7\0\ucc32\0\166\0\ucc6d\0\ucca8\0\166\0\166"+
    "\0\ucce3\0\ucd1e\0\166\0\166\0\ucd59\0\166\0\ucd94\0\ucdcf"+
    "\0\166\0\166\0\uce0a\0\166\0\uce45\0\uce80\0\ucebb\0\166"+
    "\0\ucef6\0\166\0\ucf31\0\ucf6c\0\166\0\ucfa7\0\ucfe2\0\166"+
    "\0\ud01d\0\166\0\ud058\0\ud093\0\73\0\166\0\ud0ce\0\ud109"+
    "\0\166\0\166\0\166\0\ud144\0\ud17f\0\ud1ba\0\166\0\166"+
    "\0\ud1f5\0\166\0\ud230\0\166\0\166\0\ud26b\0\ud2a6\0\ud2e1"+
    "\0\ud31c\0\ud357\0\ud392\0\ud3cd\0\166\0\166\0\166\0\ud408"+
    "\0\ud443\0\ud47e\0\ud4b9\0\ud4f4\0\166\0\ud52f\0\ud56a\0\ud5a5"+
    "\0\166\0\ud5e0\0\ud61b\0\ud656\0\166\0\ud691\0\ud6cc\0\ud707"+
    "\0\ud742\0\166\0\ud77d\0\ud7b8\0\ud7f3\0\166\0\ud82e\0\ud869"+
    "\0\ud8a4\0\ud8df\0\ud91a\0\166\0\ud955\0\ud990\0\ud9cb\0\166"+
    "\0\uda06\0\166\0\uda41\0\166\0\uda7c\0\166\0\udab7\0\udaf2"+
    "\0\udb2d\0\udb68\0\udba3\0\udbde\0\udc19\0\166\0\udc54\0\166"+
    "\0\udc8f\0\udcca\0\166\0\udd05\0\166\0\166\0\udd40\0\udd7b"+
    "\0\uddb6\0\uddf1\0\ude2c\0\ude67\0\udea2\0\udedd\0\udf18\0\udf53"+
    "\0\udf8e\0\udfc9\0\166\0\166\0\ue004\0\ue03f\0\ue07a\0\ue0b5"+
    "\0\ue0f0\0\ue12b\0\166\0\ue166\0\ue1a1\0\ue1dc\0\ue217\0\ue252"+
    "\0\ue28d\0\166\0\ue2c8\0\ue303\0\ue33e\0\ue379\0\166\0\166"+
    "\0\ue3b4\0\166\0\166\0\166\0\ue3ef\0\166\0\166\0\ue42a"+
    "\0\166\0\ue465\0\ue4a0\0\ue4db\0\166\0\166\0\ue516\0\ue551"+
    "\0\166\0\ue58c\0\ue5c7\0\ue602\0\ue63d\0\ue678\0\ue6b3\0\ue6ee"+
    "\0\ue729\0\166\0\166\0\ue764\0\166\0\166\0\ue79f\0\ue7da"+
    "\0\ue815\0\ue850\0\ue88b\0\ue8c6\0\ue901\0\ue93c\0\ue977\0\ue9b2"+
    "\0\166\0\ue9ed\0\uea28\0\166\0\uea63\0\166\0\uea9e\0\uead9"+
    "\0\166\0\ueb14\0\ueb4f\0\ueb8a\0\166\0\166\0\uebc5\0\166"+
    "\0\uec00\0\166\0\166\0\166\0\166\0\166\0\166\0\uec3b"+
    "\0\uec76\0\166\0\166\0\uecb1\0\uecec\0\ued27\0\ued62\0\ued9d"+
    "\0\166\0\uedd8\0\uee13\0\uee4e\0\uee89\0\166\0\ueec4\0\ueeff"+
    "\0\166\0\uef3a\0\uef75\0\166\0\uefb0\0\166\0\uefeb\0\uf026"+
    "\0\uf061\0\uf09c\0\166\0\166\0\uf0d7\0\uf112\0\uf14d\0\166"+
    "\0\uf188\0\166\0\uf1c3\0\uf1fe\0\uf239\0\166\0\uf274\0\uf2af"+
    "\0\uf2ea\0\166\0\166\0\uf325\0\166\0\uf360\0\uf39b\0\uf3d6"+
    "\0\uf411\0\166\0\166\0\uf44c\0\uf487\0\166\0\uf4c2\0\uf4fd"+
    "\0\uf538\0\uf573\0\uf5ae\0\166\0\uf5e9\0\166\0\uf624\0\uf65f"+
    "\0\uf69a\0\uf6d5\0\166\0\uf710\0\uf74b\0\uf786\0\166\0\uf7c1"+
    "\0\uf7fc\0\166\0\uf837\0\uf872\0\uf8ad\0\uf8e8\0\uf923\0\uf95e"+
    "\0\uf999\0\uf9d4\0\ufa0f\0\ufa4a\0\ufa85\0\ufac0\0\ufafb\0\166"+
    "\0\ufb36\0\166\0\ufb71\0\ufbac\0\ufbe7\0\ufc22\0\ufc5d\0\ufc98"+
    "\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1385];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\2\5"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\3\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\2\65\1\3"+
    "\74\0\3\3\6\0\32\3\24\0\3\3\3\0\1\4"+
    "\53\0\1\66\10\0\2\4\5\0\1\5\3\0\2\5"+
    "\130\0\1\67\23\0\4\70\1\0\1\70\1\71\2\0"+
    "\62\70\1\0\3\3\6\0\1\3\1\72\1\73\1\74"+
    "\1\3\1\75\1\76\1\3\1\77\1\100\1\101\4\3"+
    "\1\102\5\3\1\103\4\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\104\3\3\1\105\1\106\4\3\1\107\1\3"+
    "\1\110\1\111\1\3\1\112\12\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\113\3\3\1\114\7\3\1\115\1\116"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\1\117\3\3"+
    "\1\120\1\121\2\3\1\122\2\3\1\123\1\124\1\125"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\2\3\1\126"+
    "\2\3\1\127\1\130\1\3\1\131\17\3\1\132\1\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\133\3\3\1\134"+
    "\5\3\1\135\1\3\1\136\1\137\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\140\3\3\1\141\4\3\1\142"+
    "\1\143\1\3\1\144\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\145\25\3\24\0\3\3\1\0\1\3"+
    "\1\146\1\3\6\0\1\147\2\3\1\150\1\151\2\3"+
    "\1\152\1\3\1\153\1\154\1\155\1\156\1\157\3\3"+
    "\1\160\2\3\1\161\5\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\162\1\3\1\163\2\3\1\164\4\3\1\165"+
    "\1\166\1\167\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\170\1\3\1\171\10\3\1\172\10\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\173\13\3\1\174\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\175\1\176"+
    "\2\3\1\177\1\200\6\3\1\201\3\3\1\202\1\3"+
    "\1\203\2\3\24\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\204\4\3\1\205\1\3\1\206\13\3\1\207\2\3"+
    "\1\210\2\3\24\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\211\15\3\24\0\3\3\1\0\3\3\6\0\1\212"+
    "\3\3\1\213\1\214\1\3\1\215\2\3\1\216\1\3"+
    "\1\217\1\220\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\221\10\3\1\222\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\223\1\3\1\224\1\3\1\225\1\226"+
    "\4\3\1\227\1\3\1\230\1\231\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\232\1\3\1\233\1\234"+
    "\6\3\1\235\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\236\4\3\1\237\5\3\1\240\1\241\1\242\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\243\3\3\1\244"+
    "\7\3\1\245\1\246\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\247\14\3\1\250\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\251\1\3\1\252\1\3\1\253\1\254"+
    "\4\3\1\255\1\3\1\256\1\257\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\260\15\3\24\0\3\3"+
    "\3\0\1\261\40\0\1\262\23\0\1\261\47\0\1\263"+
    "\72\0\1\264\72\0\1\265\72\0\1\266\101\0\1\267"+
    "\73\0\1\270\76\0\1\271\74\0\1\272\74\0\1\273"+
    "\74\0\1\274\6\0\1\66\12\0\1\275\51\0\2\66"+
    "\1\275\47\276\1\277\23\276\1\0\3\3\6\0\1\300"+
    "\1\301\30\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\302\1\303\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\304\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\3\1\305\5\3\1\306\22\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\307\1\310\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\311\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\312\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\313\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\314\7\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\315\3\3\1\316\22\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\317\1\3\1\320"+
    "\3\3\1\321\1\3\1\322\1\323\15\3\1\324\2\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\325\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\24\3\1\326\5\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\327\11\3"+
    "\1\330\5\3\24\0\3\3\1\0\3\3\6\0\1\331"+
    "\7\3\1\332\21\3\24\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\333\20\3\24\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\334\21\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\335\5\3\1\336\16\3\1\337\1\3\1\340\2\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\341\10\3\1\342"+
    "\11\3\1\343\6\3\24\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\344\11\3\1\345\11\3\24\0\3\3\1\0"+
    "\3\3\6\0\17\3\1\346\12\3\24\0\3\3\1\0"+
    "\3\3\6\0\24\3\1\347\3\3\1\350\1\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\351\6\3\1\352\2\3"+
    "\1\353\2\3\1\354\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\355\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\356\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\21\3\1\357\10\3\24\0\3\3\1\0\3\3"+
    "\6\0\24\3\1\360\5\3\24\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\361\21\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\362\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\3\1\363\30\3\24\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\364\20\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\365\1\366\4\3\1\367\3\3\1\370"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\15\3\1\371"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\1\372\1\3"+
    "\1\373\1\374\4\3\1\375\1\376\7\3\1\377\3\3"+
    "\1\u0100\1\3\1\u0101\2\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0102\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0103\20\3\1\u0104\6\3\24\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\u0105\7\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0106\20\3\1\u0107\5\3"+
    "\24\0\3\3\1\0\3\3\6\0\30\3\1\u0108\1\3"+
    "\24\0\3\3\1\0\3\3\6\0\13\3\1\u0109\16\3"+
    "\24\0\3\3\1\0\3\3\6\0\2\3\1\u010a\21\3"+
    "\1\u010b\5\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u010c\2\3\1\u010d\2\3\1\u010e\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u010f\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0110\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\25\3\1\u0111\4\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0112\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0113\1\u0114\4\3\1\u0115\1\u0116\12\3"+
    "\1\u0117\5\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u0118\21\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u0119\5\3\1\u011a\16\3\24\0\3\3\1\0\3\3"+
    "\6\0\17\3\1\u011b\4\3\1\u011c\5\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u011d\17\3\24\0\3\3"+
    "\1\0\3\3\6\0\24\3\1\u011e\5\3\24\0\3\3"+
    "\1\0\3\3\6\0\16\3\1\u011f\13\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u0120\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0121\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0122\4\3\1\u0123\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u0124\1\3\1\u0125\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0126\7\3"+
    "\1\u0127\15\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u0128\24\3\24\0\3\3\1\0\3\3\6\0\1\u0129"+
    "\3\3\1\u012a\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u012b\1\3\1\u012c\2\3\1\u012d\1\u012e\3\3\1\u012f"+
    "\11\3\1\u0130\5\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u0131\2\3\1\u0132\1\u0133\10\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u0134\3\3\1\u0135\10\3\1\u0136"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\1\3\1\u0137"+
    "\17\3\1\u0138\10\3\24\0\3\3\1\0\3\3\6\0"+
    "\25\3\1\u0139\4\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u013a\7\3\1\u013b\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\3\1\u013c\30\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u013d\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u013e\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u013f\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0140\1\u0141\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0142\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\27\3\1\u0143\2\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0144\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u0145\1\3\1\u0146\2\3"+
    "\1\u0147\1\3\1\u0148\1\u0149\3\3\1\u014a\3\3\1\u014b"+
    "\10\3\24\0\3\3\1\0\3\3\6\0\14\3\1\u014c"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\24\3\1\u014d"+
    "\5\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u014e"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\11\3\1\u014f"+
    "\20\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u0150"+
    "\16\3\1\u0151\7\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0152\7\3\1\u0153\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0154\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0155\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0156\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\7\3\1\u0157\22\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0158\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\3\1\u0159\3\3\1\u015a\2\3\1\u015b"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\1\u015c\31\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u015d\24\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u015e\7\3"+
    "\1\u015f\1\u0160\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\17\3\1\u0161\12\3\24\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u0162\21\3\24\0\3\3\1\0\3\3\6\0"+
    "\25\3\1\u0163\4\3\24\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u0164\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0165\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u0166\13\3\1\u0167\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0168\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u0169\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u016a\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u016b\10\3\1\u016c\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u016d\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u016e\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u016f\24\3\1\u0170\1\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u0171\24\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\3\1\u0172\4\3"+
    "\1\u0173\23\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u0174\23\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0175\2\3\1\u0176\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0177\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0178\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u0179\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u017a\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u017b\7\3\1\u017c\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u017d\3\3\1\u017e\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u017f\4\3"+
    "\1\u0180\17\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0181\2\3\1\u0182\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u0183\14\3\24\0\3\3\3\0\1\261"+
    "\64\0\1\261\2\0\4\262\1\u0184\3\262\1\u0185\62\262"+
    "\44\0\1\u0186\1\0\1\u0186\24\0\47\u0187\1\u0188\23\u0187"+
    "\5\276\1\u0189\41\276\1\277\23\276\1\0\3\3\6\0"+
    "\14\3\1\u018a\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u018b\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u018c\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u018d\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\13\3\1\u018e\16\3\24\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u018f\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u0190\3\3\1\u0191\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0192\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0193\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\7\3\1\u0194\22\3\24\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\u0195\20\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0196\12\3\1\u0197\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u0198\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\21\3\1\u0199\10\3\24\0\3\3\1\0"+
    "\3\3\6\0\21\3\1\u019a\10\3\24\0\3\3\1\0"+
    "\3\3\6\0\17\3\1\u019b\12\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u019c\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\22\3\1\u019d\7\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u019e\5\3\1\u019f\6\3\1\u01a0\11\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u01a1\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u01a2\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\3\1\u01a3\30\3"+
    "\24\0\3\3\1\0\3\3\6\0\22\3\1\u01a4\7\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u01a5\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u01a6\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\3\1\u01a7\30\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\u01a8\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u01a9\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u01aa\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u01ab\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u01ac\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\21\3\1\u01ad\10\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u01ae\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u01af\6\3\1\u01b0"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\26\3\1\u01b1"+
    "\3\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u01b2"+
    "\1\3\1\u01b3\23\3\24\0\3\3\1\0\3\3\6\0"+
    "\22\3\1\u01b4\1\3\1\u01b5\5\3\24\0\3\3\1\0"+
    "\1\3\1\u01b6\1\3\6\0\32\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u01b7\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u01b8\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u01b9\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u01ba\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\32\3\1\u01bb\23\0\3\3\1\0\3\3"+
    "\6\0\1\u01bc\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u01bd\1\u01be\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\u01bf\20\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u01c0\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u01c1\4\3\1\u01c2\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u01c3\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u01c4\1\u01c5\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u01c6\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u01c7\17\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u01c8\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u01c9\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u01ca\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u01cb\7\3\1\u01cc\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u01cd\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u01ce\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\2\3\1\u01cf\27\3"+
    "\24\0\3\3\1\0\3\3\6\0\10\3\1\u01d0\1\u01d1"+
    "\10\3\1\u01d2\7\3\24\0\3\3\1\0\3\3\6\0"+
    "\13\3\1\u01d3\16\3\24\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u01d4\2\3\1\u01d5\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u01d6\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u01d7\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u01d8\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u01d9\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u01da\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u01db\4\3\1\u01dc\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\13\3\1\u01dd\16\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u01de\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u01df\3\3\1\u01e0\1\u01e1"+
    "\11\3\1\u01e2\6\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u01e3\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u01e4\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u01e5\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u01e6\17\3\24\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u01e7\21\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u01e8\6\3\1\u01e9\1\3\1\u01ea\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u01eb\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u01ec\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u01ed\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u01ee\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u01ef\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u01f0\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u01f1\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u01f2\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u01f3\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u01f4\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u01f5\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u01f6\1\u01f7\4\3\1\u01f8\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\10\3\1\u01f9\21\3"+
    "\24\0\3\3\1\0\3\3\6\0\10\3\1\u01fa\21\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\u01fb\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u01fc\21\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u01fd\2\3\1\u01fe"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u01ff"+
    "\24\3\24\0\3\3\1\0\3\3\6\0\11\3\1\u0200"+
    "\20\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u0201"+
    "\27\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u0202"+
    "\7\3\1\u0203\17\3\24\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u0204\24\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0205\2\3\1\u0206\1\3\1\u0207\14\3\1\u0208"+
    "\4\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u0209"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\21\3\1\u020a"+
    "\2\3\1\u020b\5\3\24\0\3\3\1\0\1\3\1\u020c"+
    "\1\3\6\0\14\3\1\u020d\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u020e\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u020f\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\u0210\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0211\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u0212\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0213\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0214\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u0215\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\3\1\u0216\30\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u0217\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0218\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\7\3\1\u0219\22\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u021a\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u021b\14\3\1\u021c\10\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u021d\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u021e\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u021f\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u0220\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0221\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0222\10\3\1\u0223\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0224\7\3"+
    "\1\u0225\15\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0226\25\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0227\25\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0228\27\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0229\26\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u022a\17\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u022b\27\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u022c\25\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u022d\25\3\24\0\3\3\1\0\3\3\6\0\20\3"+
    "\1\u022e\11\3\24\0\3\3\1\0\3\3\6\0\23\3"+
    "\1\u022f\6\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u0230\14\3\24\0\3\3\1\0\3\3\6\0\1\u0231"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\23\3\1\u0232"+
    "\6\3\24\0\3\3\1\0\3\3\6\0\20\3\1\u0233"+
    "\11\3\24\0\3\3\1\0\3\3\6\0\13\3\1\u0234"+
    "\16\3\24\0\3\3\1\0\3\3\6\0\26\3\1\u0235"+
    "\3\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u0236"+
    "\27\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u0237"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\11\3\1\u0238"+
    "\20\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u0239"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\11\3\1\u023a"+
    "\20\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u023b"+
    "\1\u023c\7\3\1\u023d\10\3\24\0\3\3\1\0\3\3"+
    "\6\0\11\3\1\u023e\20\3\24\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u023f\5\3\1\u0240\7\3\1\u0241\1\u0242"+
    "\4\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u0243"+
    "\27\3\24\0\3\3\1\0\3\3\6\0\15\3\1\u0244"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\14\3\1\u0245"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\17\3\1\u0246"+
    "\12\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u0247"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\12\3\1\u0248"+
    "\17\3\24\0\3\3\1\0\3\3\6\0\14\3\1\u0249"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u024a"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u024b"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u024c"+
    "\1\u024d\23\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u024e\27\3\24\0\3\3\1\0\3\3\6\0\20\3"+
    "\1\u024f\11\3\24\0\3\3\1\0\3\3\6\0\13\3"+
    "\1\u0250\16\3\24\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u0251\20\3\24\0\3\3\1\0\3\3\6\0\22\3"+
    "\1\u0252\7\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u0253\17\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0254\26\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u0255\17\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u0256\17\3\24\0\3\3\1\0\3\3\6\0\7\3"+
    "\1\u0257\1\3\1\u0258\20\3\24\0\3\3\1\0\3\3"+
    "\6\0\23\3\1\u0259\6\3\24\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u025a\21\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u025b\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\u025c\20\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u025d\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\24\3\1\u025e\5\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u025f\27\3\24\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\u0260\20\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0261\1\u0262\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\6\3\1\u0263\23\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0264\1\3\1\u0265\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u0266\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0267\23\3\24\0\3\3"+
    "\4\0\1\u0184\71\0\1\u0268\64\0\1\u0268\2\0\47\u0187"+
    "\1\u0269\30\u0187\1\u026a\41\u0187\1\u0188\23\u0187\1\0\3\3"+
    "\6\0\11\3\1\u026b\20\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u026c\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u026d\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u026e\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u026f\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0270\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\17\3\1\u0271\12\3\24\0\3\3\1\0\3\3"+
    "\6\0\2\3\1\u0272\27\3\24\0\3\3\1\0\3\3"+
    "\6\0\3\3\1\u0273\26\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u0274\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0275\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\24\3\1\u0276\5\3\24\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u0277\17\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u0278\27\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u0279\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u027a\23\3\24\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u027b\7\3\1\u027c\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u027d\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u027e\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\u027f\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0280\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0281\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0282\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u0283\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0284\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u0285\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u0286\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u0287\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0288\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u0289\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u028a\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\u028b\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\12\3\1\u028c\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u028d\5\3\1\u028e\13\3\24\0"+
    "\3\3\1\0\3\3\6\0\25\3\1\u028f\4\3\24\0"+
    "\3\3\16\0\1\u0290\55\0\3\3\6\0\21\3\1\u0291"+
    "\10\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u0292"+
    "\24\3\24\0\3\3\1\0\3\3\6\0\1\u0293\31\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\u0294\17\3"+
    "\24\0\3\3\1\0\3\3\6\0\21\3\1\u0295\10\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u0296\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0297\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u0298\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u0299\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u029a\24\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u029b\6\3"+
    "\1\u029c\15\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u029d\23\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u029e\14\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u029f\24\3\24\0\3\3\1\0\3\3\6\0\20\3"+
    "\1\u02a0\11\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02a1\24\3\24\0\3\3\1\0\3\3\6\0\17\3"+
    "\1\u02a2\12\3\24\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u02a3\15\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u02a4\17\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u02a5\26\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02a6\24\3\24\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u02a7\15\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u02a8\21\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02a9\24\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u02aa\14\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02ab\24\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u02ac\27\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02ad\25\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02ae\24\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u02af\26\3\24\0\3\3\1\0\3\3\6\0\1\u02b0"+
    "\13\3\1\u02b1\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u02b2\31\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u02b3\14\3\24\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u02b4\20\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u02b5\21\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u02b6\14\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u02b7\14\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02b8\24\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u02b9\23\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u02ba\23\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02bb\25\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u02bc\27\3\24\0\3\3\1\0\3\3\6\0\24\3"+
    "\1\u02bd\5\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u02be\26\3\24\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u02bf\30\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02c0\25\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u02c1\27\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u02c2\27\3\24\0\3\3\1\0\3\3\6\0\1\u02c3"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u02c4"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u02c5"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u02c6"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u02c7"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u02c8"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\14\3\1\u02c9"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\1\u02ca\25\3"+
    "\1\u02cb\3\3\24\0\3\3\1\0\3\3\6\0\20\3"+
    "\1\u02cc\11\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02cd\25\3\24\0\3\3\1\0\3\3\6\0\1\u02ce"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\24\3\1\u02cf"+
    "\5\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u02d0"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\1\u02d1\14\3"+
    "\1\u02d2\14\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02d3\25\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u02d4\26\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02d5\25\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u02d6\26\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u02d7\17\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u02d8\14\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u02d9\17\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u02da\23\3\24\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u02db\15\3\24\0\3\3\1\0\3\3\6\0\25\3"+
    "\1\u02dc\4\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02dd\25\3\24\0\3\3\1\0\3\3\6\0\22\3"+
    "\1\u02de\7\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u02df\26\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02e0\24\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u02e1\23\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u02e2\27\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02e3\24\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u02e4\26\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02e5\24\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u02e6\17\3\24\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u02e7\15\3\24\0\3\3\1\0\1\3\1\u02e8\1\3"+
    "\6\0\1\3\1\u02e9\3\3\1\u02ea\22\3\1\u02eb\1\3"+
    "\24\0\3\3\1\0\3\3\6\0\2\3\1\u02ec\27\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u02ed\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u02ee\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\30\3\1\u02ef\1\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u02f0\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u02f1\14\3"+
    "\1\u02f2\7\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02f3\24\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u02f4\1\u02f5\23\3\24\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u02f6\17\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u02f7\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u02f8\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u02f9\31\3\24\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u02fa\30\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u02fb\17\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u02fc\25\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u02fd\23\3\24\0\3\3\1\0\3\3\6\0\20\3"+
    "\1\u02fe\11\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u02ff\21\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0300\27\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u0301\14\3\24\0\3\3\1\0\3\3\6\0\1\u0302"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u0303"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u0304"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\15\3\1\u0305"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\1\u0306\31\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0307\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u0308\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u0309\24\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\u030a\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u030b\14\3\24\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u030c\14\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u030d\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u030e\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u030f\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0310\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\21\3\1\u0311\10\3\24\0\3\3"+
    "\1\0\3\3\6\0\27\3\1\u0312\2\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0313\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0314\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0315\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0316\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\13\3\1\u0317\16\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0318\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0319\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\13\3\1\u031a\16\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u031b\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u031c\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u031d\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\13\3\1\u031e\16\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u031f\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0320\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\13\3\1\u0321\16\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0322\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0323\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0324\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0325\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u0326\30\3\24\0\3\3"+
    "\1\0\3\3\6\0\27\3\1\u0327\2\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0328\26\3\24\0\3\3"+
    "\3\0\1\u0268\64\0\2\u0268\1\0\5\u0187\1\u0184\41\u0187"+
    "\1\u0269\23\u0187\1\0\3\3\6\0\1\u0329\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u032a\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u032b\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u032c\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\u032d\17\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u032e\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u032f\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0330\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0331\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0332\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u0333\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u0334\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0335\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u0336\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u0337\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0338\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u0339\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u033a\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u033b\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u033c\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\14\3\1\u033d\15\3\24\0\3\3\1\0\3\3"+
    "\6\0\10\3\1\u033e\21\3\24\0\3\3\1\0\3\3"+
    "\6\0\5\3\1\u033f\24\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u0340\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0341\1\3\1\u0342\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0343\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u0344\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0345\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0346\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0347\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0348\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\14\3\1\u0349\15\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u034a\27\3\24\0\3\3\42\0\1\u034b\31\0"+
    "\3\3\6\0\4\3\1\u034c\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u034d\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u034e\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u034f\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0350\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u0351\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0352\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0353\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0354\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u0355\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u0356\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0357\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\27\3\1\u0358\2\3\24\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u0359\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u035a\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u035b\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u035c\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u035d\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\12\3\1\u035e\17\3\24\0\3\3\1\0\3\3"+
    "\6\0\15\3\1\u035f\14\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0360\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\6\3\1\u0361\23\3\24\0\3\3\1\0\3\3\6\0"+
    "\27\3\1\u0362\2\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u0363\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\12\3\1\u0364\17\3\24\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\u0365\20\3\24\0\3\3\1\0\3\3\6\0"+
    "\5\3\1\u0366\24\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u0367\31\3\24\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u0368\30\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u0369\24\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u036a\21\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u036b\26\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u036c\25\3\24\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u036d\15\3\24\0\3\3\1\0\3\3\6\0\14\3"+
    "\1\u036e\15\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u036f\14\3\24\0\3\3\1\0\3\3\6\0\1\3"+
    "\1\u0370\30\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0371\26\3\24\0\3\3\1\0\3\3\6\0\24\3"+
    "\1\u0372\5\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0373\27\3\24\0\3\3\1\0\3\3\6\0\1\u0374"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u0375"+
    "\24\3\24\0\3\3\1\0\3\3\6\0\14\3\1\u0376"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\15\3\1\u0377"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\14\3\1\u0378"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\1\3\1\u0379"+
    "\30\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u037a"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u037b"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u037c"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u037d"+
    "\24\3\24\0\3\3\1\0\3\3\6\0\11\3\1\u037e"+
    "\20\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u037f"+
    "\27\3\24\0\3\3\1\0\3\3\6\0\21\3\1\u0380"+
    "\10\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u0381"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u0382"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u0383"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u0384"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\15\3\1\u0385"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u0386"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\11\3\1\u0387"+
    "\20\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u0388"+
    "\24\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u0389"+
    "\24\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u038a"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u038b"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u038c"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\23\3\1\u038d"+
    "\6\3\24\0\3\3\1\0\3\3\6\0\14\3\1\u038e"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u038f"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\22\3\1\u0390"+
    "\7\3\24\0\3\3\1\0\3\3\6\0\14\3\1\u0391"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\26\3\1\u0392"+
    "\3\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u0393"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u0394"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\12\3\1\u0395"+
    "\17\3\24\0\3\3\1\0\3\3\6\0\1\u0396\31\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u0397\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\24\3\1\u0398\5\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\u0399\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u039a\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u039b\14\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u039c\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u039d\14\3\1\u039e\4\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u039f\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u03a0\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\10\3\1\u03a1\21\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\3\1\u03a2\30\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\u03a3\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u03a4\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u03a5\14\3\24\0"+
    "\3\3\1\0\3\3\6\0\21\3\1\u03a6\10\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u03a7\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u03a8\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u03a9\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u03aa\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u03ab\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u03ac\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u03ad\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u03ae\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u03af\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u03b0\30\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u03b1\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u03b2\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u03b3\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u03b4\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u03b5\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u03b6\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u03b7\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\25\3\1\u03b8\4\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u03b9\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u03ba\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u03bb\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u03bc\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u03bd\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u03be\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\15\3\1\u03bf\14\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u03c0\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\22\3\1\u03c1\7\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u03c2\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u03c3\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u03c4\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u03c5\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u03c6\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u03c7\21\3\24\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\u03c8\20\3\24\0\3\3\1\0\3\3\6\0"+
    "\17\3\1\u03c9\1\3\1\u03ca\10\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u03cb\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\2\3\1\u03cc\27\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u03cd\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u03ce\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\17\3\1\u03cf\12\3\24\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u03d0\20\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u03d1\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\u03d2\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\u03d3\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u03d4\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u03d5\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\16\3\1\u03d6\13\3\24\0\3\3\1\0\3\3\6\0"+
    "\11\3\1\u03d7\20\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u03d8\31\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u03d9\23\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u03da\23\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u03db\26\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u03dc\24\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u03dd\27\3\24\0\3\3\1\0\3\3\6\0\1\u03de"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u03df"+
    "\23\3\24\0\3\3\16\0\1\u03e0\55\0\3\3\6\0"+
    "\1\u03e1\31\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u03e2\26\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u03e3\25\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u03e4\14\3\24\0\3\3\1\0\3\3\6\0\5\3"+
    "\1\u03e5\24\3\24\0\3\3\1\0\3\3\6\0\30\3"+
    "\1\u03e6\1\3\24\0\3\3\1\0\3\3\6\0\25\3"+
    "\1\u03e7\4\3\24\0\3\3\1\0\3\3\6\0\11\3"+
    "\1\u03e8\20\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u03e9\25\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u03ea\14\3\24\0\3\3\1\0\3\3\6\0\1\u03eb"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u03ec"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\11\3\1\u03ed"+
    "\20\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u03ee"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\1\3\1\u03ef"+
    "\30\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u03f0"+
    "\27\3\24\0\3\3\1\0\3\3\6\0\1\u03f1\31\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u03f2\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\10\3\1\u03f3\21\3"+
    "\24\0\3\3\1\0\3\3\6\0\20\3\1\u03f4\11\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u03f5\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u03f6\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u03f7\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\u03f8\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u03f9\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u03fa\24\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\u03fb\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\u03fc\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u03fd\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u03fe\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\26\3\1\u03ff\3\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u0400\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\23\3\1\u0401\6\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\u0402\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\22\3\1\u0403\7\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0404\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u0405\24\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u0406\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u0407\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0408\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u0409\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u040a\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u040b\10\3"+
    "\1\u040c\14\3\24\0\3\3\1\0\3\3\6\0\21\3"+
    "\1\u040d\10\3\24\0\3\3\1\0\3\3\6\0\6\3"+
    "\1\u040e\23\3\24\0\3\3\1\0\3\3\6\0\12\3"+
    "\1\u040f\17\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0410\26\3\24\0\3\3\1\0\3\3\6\0\1\u0411"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u0412"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u0413"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\6\3\1\u0414"+
    "\23\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u0415"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u0416"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\11\3\1\u0417"+
    "\20\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u0418"+
    "\27\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u0419"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u041a"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\23\3\1\u041b"+
    "\6\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u041c"+
    "\27\3\24\0\3\3\1\0\3\3\6\0\21\3\1\u041d"+
    "\10\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u041e"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u041f"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\3\3\1\u0420"+
    "\26\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u0421"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\1\u0422\31\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u0423\24\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u0424\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0425\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\2\3\1\u0426\27\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u0427\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\u0428\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0429\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u042a\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u042b\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u042c\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\25\3\1\u042d\4\3\24\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u042e\14\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u042f\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\12\3\1\u0430\17\3\24\0"+
    "\3\3\1\0\3\3\6\0\7\3\1\u0431\22\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0432\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u0433\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0434\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0435\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0436\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\22\3\1\u0437\7\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0438\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\30\3\1\u0439\1\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u043a\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u043b\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u043c\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\11\3\1\u043d\20\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u043e\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u043f\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\16\3\1\u0440\13\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0441\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u0442\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u0443\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0444\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0445\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0446\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u0447\17\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0448\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0449\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u044a\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\24\3\1\u044b\5\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u044c\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u044d\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u044e\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u044f\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\u0450\7\3\24\0\3\3"+
    "\1\0\3\3\6\0\25\3\1\u0451\4\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0452\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\24\3\1\u0453\5\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0454\25\3\24\0\3\3"+
    "\23\0\1\u0455\50\0\3\3\6\0\2\3\1\u0456\27\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u0457\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u0458\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u0459\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u045a\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u045b\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\22\3\1\u045c\7\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u045d\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u045e\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\20\3\1\u045f\11\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u0460\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u0461\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\2\3\1\u0462\27\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u0463\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u0464\24\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0465\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u0466\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u0467\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\26\3\1\u0468\3\3"+
    "\24\0\3\3\1\0\3\3\6\0\7\3\1\u0469\22\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u046a\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\u046b\17\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\u046c\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\u046d\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u046e\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\3\1\u046f\30\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0470\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\26\3\1\u0471\3\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0472\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\u0473\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u0474\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0475\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u0476\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u0477\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\10\3\1\u0478\21\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u0479\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u047a\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u047b\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u047c\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\20\3\1\u047d\11\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u047e\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u047f\24\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\u0480\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u0481\21\3\24\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u0482\21\3\24\0"+
    "\3\3\1\0\3\3\6\0\7\3\1\u0483\22\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u0484\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\11\3\1\u0485\20\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u0486\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0487\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u0488\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u0489\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u048a\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\22\3\1\u048b\7\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u048c\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u048d\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u048e\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\22\3\1\u048f\7\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0490\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\30\3\1\u0491\1\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u0492\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0493\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0494\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u0495\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u0496\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u0497\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0498\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u0499\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u049a\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u049b\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u049c\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\21\3\1\u049d\10\3\24\0\3\3"+
    "\1\0\3\3\6\0\7\3\1\u049e\22\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u049f\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u04a0\10\3\1\u04a1\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u04a2\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\21\3\1\u04a3\10\3"+
    "\24\0\3\3\1\0\3\3\6\0\26\3\1\u04a4\3\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\u04a5\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\5\3\1\u04a6\24\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\u04a7\17\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u04a8\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u04a9\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\14\3\1\u04aa\15\3"+
    "\24\0\3\3\1\0\3\3\6\0\4\3\1\u04ab\25\3"+
    "\24\0\3\3\1\0\3\3\6\0\6\3\1\u04ac\23\3"+
    "\24\0\3\3\1\0\3\3\6\0\11\3\1\u04ad\20\3"+
    "\24\0\3\3\1\0\3\3\6\0\12\3\1\u04ae\17\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\u04af\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u04b0\7\3\1\u04b1"+
    "\11\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u04b2"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\22\3\1\u04b3"+
    "\7\3\24\0\3\3\1\0\3\3\6\0\1\3\1\u04b4"+
    "\30\3\24\0\3\3\1\0\3\3\6\0\1\3\1\u04b5"+
    "\1\3\1\u04b6\6\3\1\u04b7\17\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u04b8\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\u04b9\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u04ba\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u04bb\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u04bc\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u04bd\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\14\3\1\u04be\15\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u04bf\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\30\3\1\u04c0\1\3\24\0\3\3\1\0"+
    "\3\3\6\0\6\3\1\u04c1\23\3\24\0\3\3\1\0"+
    "\3\3\6\0\7\3\1\u04c2\22\3\24\0\3\3\1\0"+
    "\3\3\6\0\10\3\1\u04c3\21\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u04c4\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\11\3\1\u04c5\14\3\1\u04c6\3\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u04c7\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u04c8\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u04c9\14\3\24\0"+
    "\3\3\1\0\3\3\6\0\7\3\1\u04ca\22\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u04cb\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u04cc\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u04cd\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u04ce\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u04cf\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u04d0\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u04d1\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u04d2\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u04d3\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u04d4\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u04d5\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u04d6\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\11\3\1\u04d7\20\3\24\0"+
    "\3\3\1\0\3\3\6\0\4\3\1\u04d8\25\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u04d9\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\2\3\1\u04da\27\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u04db\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u04dc\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\5\3\1\u04dd\24\3\24\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\u04de\10\3\1\u04df"+
    "\5\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u04e0"+
    "\24\3\24\0\3\3\1\0\3\3\6\0\14\3\1\u04e1"+
    "\15\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u04e2"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u04e3"+
    "\27\3\24\0\3\3\1\0\3\3\6\0\5\3\1\u04e4"+
    "\24\3\24\0\3\3\1\0\3\3\6\0\22\3\1\u04e5"+
    "\7\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u04e6"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\10\3\1\u04e7"+
    "\21\3\24\0\3\3\1\0\3\3\6\0\12\3\1\u04e8"+
    "\17\3\24\0\3\3\1\0\3\3\6\0\15\3\1\u04e9"+
    "\14\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u04ea"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u04eb"+
    "\25\3\24\0\3\3\1\0\3\3\6\0\1\u04ec\31\3"+
    "\24\0\3\3\1\0\3\3\6\0\15\3\1\u04ed\14\3"+
    "\24\0\3\3\1\0\3\3\6\0\10\3\1\u04ee\21\3"+
    "\24\0\3\3\1\0\3\3\6\0\26\3\1\u04ef\3\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u04f0\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\3\3\1\u04f1\26\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\3\1\u04f2\30\3"+
    "\24\0\3\3\1\0\3\3\6\0\1\u04f3\31\3\24\0"+
    "\3\3\1\0\3\3\6\0\6\3\1\u04f4\23\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u04f5\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u04f6\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\22\3\1\u04f7\7\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u04f8\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\3\3\1\u04f9\26\3\24\0"+
    "\3\3\1\0\3\3\6\0\14\3\1\u04fa\15\3\24\0"+
    "\3\3\1\0\3\3\6\0\15\3\1\u04fb\14\3\24\0"+
    "\3\3\1\0\3\3\6\0\25\3\1\u04fc\4\3\24\0"+
    "\3\3\1\0\3\3\6\0\13\3\1\u04fd\16\3\24\0"+
    "\3\3\1\0\3\3\6\0\10\3\1\u04fe\21\3\24\0"+
    "\3\3\1\0\3\3\6\0\1\u04ff\31\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0500\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0501\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u0502\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u0503\30\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0504\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0505\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0506\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0507\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u0508\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0509\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u050a\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u050b\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u050c\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u050d\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u050e\30\3\24\0\3\3"+
    "\1\0\3\3\6\0\24\3\1\u050f\5\3\24\0\3\3"+
    "\1\0\3\3\6\0\7\3\1\u0510\22\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0511\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0512\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\24\3\1\u0513\5\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0514\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0515\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\13\3\1\u0516\16\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0517\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\17\3\1\u0518\12\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u0519\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u051a\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u051b\17\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u051c\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u051d\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u051e\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\17\3\1\u051f\12\3\24\0\3\3"+
    "\1\0\3\3\6\0\14\3\1\u0520\15\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u0521\17\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0522\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\3\1\u0523\30\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0524\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0525\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\15\3\1\u0526\14\3\24\0\3\3"+
    "\1\0\3\3\6\0\21\3\1\u0527\10\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0528\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u0529\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u052a\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u052b\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u052c\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u052d\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\13\3\1\u052e\16\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u052f\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u0530\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0531\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0532\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\5\3\1\u0533\24\3\24\0\3\3"+
    "\1\0\3\3\6\0\12\3\1\u0534\17\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u0535\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\2\3\1\u0536\27\3\24\0\3\3"+
    "\1\0\3\3\6\0\13\3\1\u0537\16\3\24\0\3\3"+
    "\1\0\3\3\6\0\10\3\1\u0538\21\3\24\0\3\3"+
    "\1\0\3\3\6\0\6\3\1\u0539\23\3\24\0\3\3"+
    "\1\0\3\3\6\0\22\3\1\u053a\7\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u053b\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\11\3\1\u053c\20\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u053d\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\4\3\1\u053e\25\3\24\0\3\3"+
    "\1\0\3\3\6\0\3\3\1\u053f\26\3\24\0\3\3"+
    "\1\0\3\3\6\0\1\u0540\31\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0541\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\3\3\1\u0542\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\22\3\1\u0543\7\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0544\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0545\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\4\3\1\u0546\25\3\24\0\3\3\1\0"+
    "\3\3\6\0\5\3\1\u0547\24\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0548\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0549\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u054a\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u054b\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\15\3\1\u054c\14\3\24\0\3\3\1\0\3\3\6\0"+
    "\10\3\1\u054d\21\3\24\0\3\3\1\0\3\3\6\0"+
    "\24\3\1\u054e\5\3\24\0\3\3\1\0\3\3\6\0"+
    "\13\3\1\u054f\16\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0550\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\4\3\1\u0551\25\3\24\0\3\3\1\0\3\3\6\0"+
    "\21\3\1\u0552\10\3\24\0\3\3\1\0\3\3\6\0"+
    "\7\3\1\u0553\22\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u0554\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\3\1\u0555\1\3\1\u0556\26\3\24\0\3\3\1\0"+
    "\3\3\6\0\1\u0557\31\3\24\0\3\3\1\0\3\3"+
    "\6\0\4\3\1\u0558\25\3\24\0\3\3\1\0\3\3"+
    "\6\0\1\u0559\31\3\24\0\3\3\1\0\3\3\6\0"+
    "\17\3\1\u055a\12\3\24\0\3\3\1\0\3\3\6\0"+
    "\3\3\1\u055b\26\3\24\0\3\3\1\0\3\3\6\0"+
    "\17\3\1\u055c\12\3\24\0\3\3\1\0\3\3\6\0"+
    "\2\3\1\u055d\27\3\24\0\3\3\1\0\3\3\6\0"+
    "\1\u055e\31\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u055f\27\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0560\25\3\24\0\3\3\1\0\3\3\6\0\15\3"+
    "\1\u0561\14\3\24\0\3\3\1\0\3\3\6\0\4\3"+
    "\1\u0562\25\3\24\0\3\3\1\0\3\3\6\0\2\3"+
    "\1\u0563\27\3\24\0\3\3\1\0\3\3\6\0\10\3"+
    "\1\u0564\21\3\24\0\3\3\1\0\3\3\6\0\3\3"+
    "\1\u0565\26\3\24\0\3\3\1\0\3\3\6\0\1\u0566"+
    "\31\3\24\0\3\3\1\0\3\3\6\0\17\3\1\u0567"+
    "\12\3\24\0\3\3\1\0\3\3\6\0\2\3\1\u0568"+
    "\27\3\24\0\3\3\1\0\3\3\6\0\4\3\1\u0569"+
    "\25\3\24\0\3\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[64723];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\40\1\3\11\5\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\3\1\2\0\1\11\171\1"+
    "\12\11\3\0\304\1\1\11\1\1\3\0\62\1\1\0"+
    "\255\1\1\0\46\1\1\0\272\1\1\0\224\1\1\0"+
    "\164\1\1\11\u0114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1385];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int line;
    int column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 138: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NCHAR;
          }
        case 348: break;
        case 177: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LINENO;
          }
        case 349: break;
        case 306: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return STATISTICS;
          }
        case 350: break;
        case 9: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Suma;
          }
        case 351: break;
        case 136: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RIGHT;
          }
        case 352: break;
        case 128: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FULL;
          }
        case 353: break;
        case 254: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRAILING;
          }
        case 354: break;
        case 346: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SEMANTICSIMILARITYTABLE;
          }
        case 355: break;
        case 321: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RECONFIGURE;
          }
        case 356: break;
        case 225: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CASCADE;
          }
        case 357: break;
        case 318: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRANSACTION;
          }
        case 358: break;
        case 19: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CorcheteCerrado;
          }
        case 359: break;
        case 252: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LENGUAGE;
          }
        case 360: break;
        case 29: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AT;
          }
        case 361: break;
        case 235: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTEGER;
          }
        case 362: break;
        case 268: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CASCADED;
          }
        case 363: break;
        case 317: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TABLESAMPLE;
          }
        case 364: break;
        case 301: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DESCRIPTOR;
          }
        case 365: break;
        case 145: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNION;
          }
        case 366: break;
        case 206: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MINUTE;
          }
        case 367: break;
        case 141: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CLOSE;
          }
        case 368: break;
        case 43: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MayorIgual;
          }
        case 369: break;
        case 50: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DobleNumeral;
          }
        case 370: break;
        case 21: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ParentesisCerrado;
          }
        case 371: break;
        case 190: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CREATE;
          }
        case 372: break;
        case 216: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RESTORE;
          }
        case 373: break;
        case 37: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IS;
          }
        case 374: break;
        case 229: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONVERT;
          }
        case 375: break;
        case 18: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CorcheteAbierto;
          }
        case 376: break;
        case 298: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PROCEDURE;
          }
        case 377: break;
        case 35: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OF;
          }
        case 378: break;
        case 142: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CROSS;
          }
        case 379: break;
        case 20: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ParentesisAbierto;
          }
        case 380: break;
        case 30: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AS;
          }
        case 381: break;
        case 42: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MenorIgual;
          }
        case 382: break;
        case 151: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INDEX;
          }
        case 383: break;
        case 125: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WITH;
          }
        case 384: break;
        case 114: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OVER;
          }
        case 385: break;
        case 135: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TABLE;
          }
        case 386: break;
        case 274: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IDENTITY;
          }
        case 387: break;
        case 56: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ANY;
          }
        case 388: break;
        case 327: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INSENSITIVE;
          }
        case 389: break;
        case 153: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INPUT;
          }
        case 390: break;
        case 246: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FOREIGN;
          }
        case 391: break;
        case 164: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MATCH;
          }
        case 392: break;
        case 207: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VALUES;
          }
        case 393: break;
        case 160: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GROUP;
          }
        case 394: break;
        case 63: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NOT;
          }
        case 395: break;
        case 234: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OFFSETS;
          }
        case 396: break;
        case 335: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIMEZONE_HOUR;
          }
        case 397: break;
        case 68: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OFF;
          }
        case 398: break;
        case 198: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPTION;
          }
        case 399: break;
        case 167: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VALUE;
          }
        case 400: break;
        case 219: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NOCHECK;
          }
        case 401: break;
        case 41: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IgualIgual;
          }
        case 402: break;
        case 270: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONTAINS;
          }
        case 403: break;
        case 53: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ALL;
          }
        case 404: break;
        case 131: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ALTER;
          }
        case 405: break;
        case 162: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHERE;
          }
        case 406: break;
        case 291: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENQUERY;
          }
        case 407: break;
        case 237: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BETWEEN;
          }
        case 408: break;
        case 267: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SMALLINT;
          }
        case 409: break;
        case 290: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COLLATION;
          }
        case 410: break;
        case 28: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return String;
          }
        case 411: break;
        case 295: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ISOLARION;
          }
        case 412: break;
        case 139: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLCA;
          }
        case 413: break;
        case 293: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTERSECT;
          }
        case 414: break;
        case 313: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRIVILEGES;
          }
        case 415: break;
        case 271: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONTINUE;
          }
        case 416: break;
        case 189: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SCHEMA;
          }
        case 417: break;
        case 93: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ELSE;
          }
        case 418: break;
        case 99: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROWS;
          }
        case 419: break;
        case 92: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIME;
          }
        case 420: break;
        case 208: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DECLARE;
          }
        case 421: break;
        case 264: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLERROR;
          }
        case 422: break;
        case 46: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return or;
          }
        case 423: break;
        case 149: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ORDER;
          }
        case 424: break;
        case 244: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VARCHAR;
          }
        case 425: break;
        case 14: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SignoExclamacion;
          }
        case 426: break;
        case 110: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USER;
          }
        case 427: break;
        case 105: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SOME;
          }
        case 428: break;
        case 217: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NATURAL;
          }
        case 429: break;
        case 273: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OVERLAPS;
          }
        case 430: break;
        case 79: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DESC;
          }
        case 431: break;
        case 249: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DATABASE;
          }
        case 432: break;
        case 303: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REFERENCES;
          }
        case 433: break;
        case 302: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISCONNECT;
          }
        case 434: break;
        case 61: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TOP;
          }
        case 435: break;
        case 147: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USING;
          }
        case 436: break;
        case 87: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LIKE;
          }
        case 437: break;
        case 176: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DOMAIN;
          }
        case 438: break;
        case 77: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DATE;
          }
        case 439: break;
        case 17: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Punto;
          }
        case 440: break;
        case 36: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IN;
          }
        case 441: break;
        case 49: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Llaves;
          }
        case 442: break;
        case 8: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Igual;
          }
        case 443: break;
        case 230: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COMPUTE;
          }
        case 444: break;
        case 4: 
          { /*Ignore*/
          }
        case 445: break;
        case 85: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LEFT;
          }
        case 446: break;
        case 1: 
          { line=yyline; column=yycolumn; return ERROR;
          }
        case 447: break;
        case 215: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXECUTE;
          }
        case 448: break;
        case 266: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SHUTDOWN;
          }
        case 449: break;
        case 88: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRAN;
          }
        case 450: break;
        case 333: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OCTET_LENGTH;
          }
        case 451: break;
        case 345: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SEMANTICKEYPHRASETABLE;
          }
        case 452: break;
        case 102: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NONE;
          }
        case 453: break;
        case 163: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHILE;
          }
        case 454: break;
        case 113: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPEN;
          }
        case 455: break;
        case 90: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRIM;
          }
        case 456: break;
        case 299: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WRITETEXT;
          }
        case 457: break;
        case 288: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CLUSTERED;
          }
        case 458: break;
        case 209: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DECIMAL;
          }
        case 459: break;
        case 157: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRIOR;
          }
        case 460: break;
        case 140: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SPACE;
          }
        case 461: break;
        case 231: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNKNOWN;
          }
        case 462: break;
        case 328: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NONCLUSTERED;
          }
        case 463: break;
        case 27: 
          { lexeme=yytext(); column=yycolumn; line=yyline; return Float;
          }
        case 464: break;
        case 312: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BIT_LENGTH;
          }
        case 465: break;
        case 300: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DEALLOCATE;
          }
        case 466: break;
        case 191: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURSOR;
          }
        case 467: break;
        case 263: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NATIONAL;
          }
        case 468: break;
        case 84: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LAST;
          }
        case 469: break;
        case 74: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MAX;
          }
        case 470: break;
        case 26: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Bit;
          }
        case 471: break;
        case 126: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VIEW;
          }
        case 472: break;
        case 117: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BULK;
          }
        case 473: break;
        case 304: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROWGUIDCOL;
          }
        case 474: break;
        case 247: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ALLOCATE;
          }
        case 475: break;
        case 319: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRANSLATION;
          }
        case 476: break;
        case 11: 
          { lexeme=yytext();line=yyline; column=yycolumn; return Porcentaje;
          }
        case 477: break;
        case 341: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIMEZONE_MINUTE;
          }
        case 478: break;
        case 186: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SELECT;
          }
        case 479: break;
        case 337: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CORRESPONDING;
          }
        case 480: break;
        case 282: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TEMPORARY;
          }
        case 481: break;
        case 148: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UPPER;
          }
        case 482: break;
        case 338: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONTAINSTABLE;
          }
        case 483: break;
        case 129: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FILE;
          }
        case 484: break;
        case 228: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONNECT;
          }
        case 485: break;
        case 339: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FREETEXTTABLE;
          }
        case 486: break;
        case 111: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return HOUR;
          }
        case 487: break;
        case 124: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WORK;
          }
        case 488: break;
        case 257: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXTERNAL;
          }
        case 489: break;
        case 31: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TO;
          }
        case 490: break;
        case 97: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REAL;
          }
        case 491: break;
        case 7: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Resta;
          }
        case 492: break;
        case 65: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SET;
          }
        case 493: break;
        case 144: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COUNT;
          }
        case 494: break;
        case 187: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SECOND;
          }
        case 495: break;
        case 175: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DOUBLE;
          }
        case 496: break;
        case 314: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FILLFACTOR;
          }
        case 497: break;
        case 239: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PERCENT;
          }
        case 498: break;
        case 308: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONNECTION;
          }
        case 499: break;
        case 121: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PROC;
          }
        case 500: break;
        case 116: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ZONE;
          }
        case 501: break;
        case 287: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SUBSTRING;
          }
        case 502: break;
        case 130: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return JOIN;
          }
        case 503: break;
        case 123: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHEN;
          }
        case 504: break;
        case 101: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NULL;
          }
        case 505: break;
        case 256: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ENDEXEC;
          }
        case 506: break;
        case 52: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ADD;
          }
        case 507: break;
        case 260: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RESTRICT;
          }
        case 508: break;
        case 98: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RULE;
          }
        case 509: break;
        case 118: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BOTH;
          }
        case 510: break;
        case 156: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRINT;
          }
        case 511: break;
        case 227: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COLLATE;
          }
        case 512: break;
        case 155: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BREAK;
          }
        case 513: break;
        case 159: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GRANT;
          }
        case 514: break;
        case 285: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXCEPTION;
          }
        case 515: break;
        case 201: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BROWSE;
          }
        case 516: break;
        case 48: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Parentesis;
          }
        case 517: break;
        case 82: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISK;
          }
        case 518: break;
        case 195: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UPDATE;
          }
        case 519: break;
        case 342: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IDENTITY_INSERT;
          }
        case 520: break;
        case 150: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OUTER;
          }
        case 521: break;
        case 73: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GET;
          }
        case 522: break;
        case 279: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FREETEXT;
          }
        case 523: break;
        case 143: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHECK;
          }
        case 524: break;
        case 255: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRUNCATE;
          }
        case 525: break;
        case 251: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISTINCT;
          }
        case 526: break;
        case 284: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TIMESTAMP;
          }
        case 527: break;
        case 258: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return READTEXT;
          }
        case 528: break;
        case 47: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Corchetes;
          }
        case 529: break;
        case 179: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ESCAPE;
          }
        case 530: break;
        case 115: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTO;
          }
        case 531: break;
        case 108: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CASE;
          }
        case 532: break;
        case 154: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BEGIN;
          }
        case 533: break;
        case 6: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Guionbajo;
          }
        case 534: break;
        case 169: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FLOAT;
          }
        case 535: break;
        case 100: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NEXT;
          }
        case 536: break;
        case 329: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SESSION_USER;
          }
        case 537: break;
        case 69: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INT;
          }
        case 538: break;
        case 276: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRESERVE;
          }
        case 539: break;
        case 33: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OR;
          }
        case 540: break;
        case 38: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IF;
          }
        case 541: break;
        case 196: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return HAVING;
          }
        case 542: break;
        case 39: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BY;
          }
        case 543: break;
        case 192: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COLUMN;
          }
        case 544: break;
        case 161: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WRITE;
          }
        case 545: break;
        case 202: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PASCAL;
          }
        case 546: break;
        case 62: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return END;
          }
        case 547: break;
        case 89: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRUE;
          }
        case 548: break;
        case 78: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DENY;
          }
        case 549: break;
        case 51: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ADA;
          }
        case 550: break;
        case 221: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SETUSER;
          }
        case 551: break;
        case 120: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PLAN;
          }
        case 552: break;
        case 178: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ERRLVL;
          }
        case 553: break;
        case 240: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PREPARE;
          }
        case 554: break;
        case 210: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DEFAULT;
          }
        case 555: break;
        case 265: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLSTATE;
          }
        case 556: break;
        case 214: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXTRACT;
          }
        case 557: break;
        case 253: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TEXTSIZE;
          }
        case 558: break;
        case 272: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return HOLDLOCK;
          }
        case 559: break;
        case 280: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FUNCTION;
          }
        case 560: break;
        case 23: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LlaveCerrada;
          }
        case 561: break;
        case 316: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DISTRIBUTED;
          }
        case 562: break;
        case 165: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MERGE;
          }
        case 563: break;
        case 72: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PAD;
          }
        case 564: break;
        case 132: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LEVEL;
          }
        case 565: break;
        case 2: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Identificador;
          }
        case 566: break;
        case 22: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LlaveAbierta;
          }
        case 567: break;
        case 322: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REPLICATION;
          }
        case 568: break;
        case 199: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INSERT;
          }
        case 569: break;
        case 344: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_TIMESTAMP;
          }
        case 570: break;
        case 275: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INTERVAL;
          }
        case 571: break;
        case 294: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INITIALLY;
          }
        case 572: break;
        case 286: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RAISERROR;
          }
        case 573: break;
        case 171: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FOUND;
          }
        case 574: break;
        case 66: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SUM;
          }
        case 575: break;
        case 283: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRANSLATE;
          }
        case 576: break;
        case 91: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return THEN;
          }
        case 577: break;
        case 336: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SECURITYAUDIT;
          }
        case 578: break;
        case 185: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NULLIF;
          }
        case 579: break;
        case 269: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COALESCE;
          }
        case 580: break;
        case 172: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FIRST;
          }
        case 581: break;
        case 104: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SAVE;
          }
        case 582: break;
        case 109: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHAR;
          }
        case 583: break;
        case 94: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXEC;
          }
        case 584: break;
        case 103: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return YEAR;
          }
        case 585: break;
        case 181: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXISTS;
          }
        case 586: break;
        case 347: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SEMANTICSIMILARITYDETAILSTABLE;
          }
        case 587: break;
        case 75: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MIN;
          }
        case 588: break;
        case 40: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GO;
          }
        case 589: break;
        case 16: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PuntoyComa;
          }
        case 590: break;
        case 57: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ASC;
          }
        case 591: break;
        case 70: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BIT;
          }
        case 592: break;
        case 64: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQL;
          }
        case 593: break;
        case 34: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ON;
          }
        case 594: break;
        case 310: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UPDATETEXT;
          }
        case 595: break;
        case 241: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRIMARY;
          }
        case 596: break;
        case 60: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DEC;
          }
        case 597: break;
        case 281: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ASSERTION;
          }
        case 598: break;
        case 127: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FROM;
          }
        case 599: break;
        case 81: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DUMP;
          }
        case 600: break;
        case 10: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Multiplicacion;
          }
        case 601: break;
        case 194: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNIQUE;
          }
        case 602: break;
        case 96: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return READ;
          }
        case 603: break;
        case 292: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INDICATOR;
          }
        case 604: break;
        case 261: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROLLBACK;
          }
        case 605: break;
        case 86: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LOAD;
          }
        case 606: break;
        case 197: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OUTPUT;
          }
        case 607: break;
        case 112: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ONLY;
          }
        case 608: break;
        case 315: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DIAGNOSTICS;
          }
        case 609: break;
        case 80: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DROP;
          }
        case 610: break;
        case 323: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SYSTEM_USER;
          }
        case 611: break;
        case 220: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLCODE;
          }
        case 612: break;
        case 259: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RELATIVE;
          }
        case 613: break;
        case 119: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return KILL;
          }
        case 614: break;
        case 213: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TSEQUAL;
          }
        case 615: break;
        case 83: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DBCC;
          }
        case 616: break;
        case 331: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_TIME;
          }
        case 617: break;
        case 45: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return andS;
          }
        case 618: break;
        case 15: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return y;
          }
        case 619: break;
        case 44: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NoIgual;
          }
        case 620: break;
        case 242: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WAITFOR;
          }
        case 621: break;
        case 332: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_USER;
          }
        case 622: break;
        case 58: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AVG;
          }
        case 623: break;
        case 3: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Numero;
          }
        case 624: break;
        case 146: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USAGE;
          }
        case 625: break;
        case 25: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Numeral;
          }
        case 626: break;
        case 211: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LEADING;
          }
        case 627: break;
        case 67: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return USE;
          }
        case 628: break;
        case 170: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FETCH;
          }
        case 629: break;
        case 223: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SECTION;
          }
        case 630: break;
        case 212: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRIGGER;
          }
        case 631: break;
        case 173: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ACTION;
          }
        case 632: break;
        case 311: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENROWSET;
          }
        case 633: break;
        case 233: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENXML;
          }
        case 634: break;
        case 330: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT_DATE;
          }
        case 635: break;
        case 134: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LOWER;
          }
        case 636: break;
        case 24: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Arroba;
          }
        case 637: break;
        case 232: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return UNPIVOT;
          }
        case 638: break;
        case 238: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PARTIAL;
          }
        case 639: break;
        case 326: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IDENTITYCOL;
          }
        case 640: break;
        case 296: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IMMEDIATE;
          }
        case 641: break;
        case 122: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GOTO;
          }
        case 642: break;
        case 59: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DAY;
          }
        case 643: break;
        case 180: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXCEPT;
          }
        case 644: break;
        case 204: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return GLOBAL;
          }
        case 645: break;
        case 188: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SCROLL;
          }
        case 646: break;
        case 166: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MONTH;
          }
        case 647: break;
        case 309: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONSTRAINT;
          }
        case 648: break;
        case 54: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ARE;
          }
        case 649: break;
        case 5: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Division;
          }
        case 650: break;
        case 340: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return OPENDATASOURCE;
          }
        case 651: break;
        case 137: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NAMES;
          }
        case 652: break;
        case 325: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CONSTRAINTS;
          }
        case 653: break;
        case 168: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FALSE;
          }
        case 654: break;
        case 200: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return BACKUP;
          }
        case 655: break;
        case 205: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MODULE;
          }
        case 656: break;
        case 224: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CATALOG;
          }
        case 657: break;
        case 152: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INNER;
          }
        case 658: break;
        case 297: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PRECISION;
          }
        case 659: break;
        case 182: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return RETURN;
          }
        case 660: break;
        case 133: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LOCAL;
          }
        case 661: break;
        case 76: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FOR;
          }
        case 662: break;
        case 222: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SESSION;
          }
        case 663: break;
        case 158: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PIVOT;
          }
        case 664: break;
        case 278: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return WHENEVER;
          }
        case 665: break;
        case 262: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ROWCOUNT;
          }
        case 666: break;
        case 12: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Menor;
          }
        case 667: break;
        case 334: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AUTHORIZATION;
          }
        case 668: break;
        case 305: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SQLWARNING;
          }
        case 669: break;
        case 226: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CURRENT;
          }
        case 670: break;
        case 55: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return AND;
          }
        case 671: break;
        case 174: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DELETE;
          }
        case 672: break;
        case 32: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NO;
          }
        case 673: break;
        case 250: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DESCRIBE;
          }
        case 674: break;
        case 13: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Mayor;
          }
        case 675: break;
        case 218: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NUMERIC;
          }
        case 676: break;
        case 107: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CAST;
          }
        case 677: break;
        case 184: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REVOKE;
          }
        case 678: break;
        case 106: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SIZE;
          }
        case 679: break;
        case 71: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return KEY;
          }
        case 680: break;
        case 248: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ABSOLUTE;
          }
        case 681: break;
        case 343: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHARACTER_LENGTH;
          }
        case 682: break;
        case 236: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return INCLUDE;
          }
        case 683: break;
        case 289: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHARACTER;
          }
        case 684: break;
        case 277: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return POSITION;
          }
        case 685: break;
        case 203: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PUBLIC;
          }
        case 686: break;
        case 243: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return VARYING;
          }
        case 687: break;
        case 183: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return REVERT;
          }
        case 688: break;
        case 307: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHECKPOINT;
          }
        case 689: break;
        case 95: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return EXIT;
          }
        case 690: break;
        case 320: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return TRY_CONVERT;
          }
        case 691: break;
        case 193: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return COMMIT;
          }
        case 692: break;
        case 324: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CHAR_LENGTH;
          }
        case 693: break;
        case 245: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return FORTRAN;
          }
        case 694: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
