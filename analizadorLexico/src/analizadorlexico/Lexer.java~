/* The following code was generated by JFlex 1.4.3 on 26/08/19 11:22 AM */

package analizadorlexico;
import static analizadorlexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/08/19 11:22 AM from the specification file
 * <tt>C:/Users/garya/ProyectoCompiladoreaFase1/analizadorLexico/src/analizadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\4\2\0\1\5\22\0\1\6\1\51\1\0\1\65"+
    "\1\0\1\46\1\52\1\70\1\60\1\61\1\44\1\43\1\6\1\41"+
    "\1\55\1\45\1\67\1\66\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\0\1\54\1\47\1\42\1\50\1\0\1\64\1\7"+
    "\1\26\1\20\1\10\1\13\1\36\1\31\1\22\1\24\1\40\1\27"+
    "\1\11\1\33\1\15\1\23\1\30\1\2\1\14\1\17\1\12\1\21"+
    "\1\34\1\32\1\37\1\16\1\25\1\56\1\0\1\57\1\0\1\35"+
    "\1\0\32\1\1\62\1\53\1\63\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\26\2\1\5\2\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\2\1\35\2\2\1\35\24\2\1\35\17\2\1\35"+
    "\30\2\2\35\4\2\1\35\1\2\2\35\24\2\1\35"+
    "\22\2\1\4\1\36\1\0\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\0\1\46\1\47\1\50\2\33"+
    "\1\51\1\0\1\35\11\2\1\35\30\2\1\35\30\2"+
    "\1\35\2\2\1\35\34\2\1\35\10\2\1\35\2\2"+
    "\1\35\14\2\1\35\22\2\1\35\7\2\1\35\2\2"+
    "\2\4\2\52\1\0\1\51\1\0\10\2\1\35\13\2"+
    "\1\35\4\2\1\35\1\2\1\0\6\2\1\35\16\2"+
    "\1\35\27\2\1\35\17\2\2\35\20\2\1\35\5\2"+
    "\1\35\5\2\2\0\1\3\1\34\13\2\1\35\6\2"+
    "\1\0\36\2\1\35\35\2\1\35\13\2\1\0\1\35"+
    "\45\2\1\0\4\2\1\35\3\2\1\35\1\2\1\35"+
    "\16\2\1\35\7\2\1\35\3\2\1\35\32\2\1\35"+
    "\21\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[678];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\162\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\71\0\71\0\u06e7\0\71\0\u0720\0\u0759\0\u0792\0\u07cb"+
    "\0\u0804\0\71\0\u083d\0\u0876\0\71\0\u08af\0\71\0\u08e8"+
    "\0\71\0\71\0\u0921\0\253\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\162\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94"+
    "\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc"+
    "\0\u22f5\0\u232e\0\u2367\0\71\0\u23a0\0\71\0\71\0\71"+
    "\0\71\0\71\0\u083d\0\71\0\u23d9\0\71\0\71\0\71"+
    "\0\u2412\0\u244b\0\u095a\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568"+
    "\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730"+
    "\0\u0f5d\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87"+
    "\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17"+
    "\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf"+
    "\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7"+
    "\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f"+
    "\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537"+
    "\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff"+
    "\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7"+
    "\0\u31a7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56"+
    "\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e"+
    "\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6"+
    "\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae"+
    "\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176"+
    "\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e"+
    "\0\u4377\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\71"+
    "\0\u4506\0\u453f\0\u4578\0\u45b1\0\71\0\u45ea\0\u4623\0\u465c"+
    "\0\u4695\0\u46ce\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824"+
    "\0\u485d\0\u4896\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec"+
    "\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4"+
    "\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c"+
    "\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44"+
    "\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\u5061\0\u509a\0\u50d3\0\u510c"+
    "\0\u5145\0\u517e\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b\0\u52d4"+
    "\0\u530d\0\u5346\0\u537f\0\u53b8\0\u53f1\0\u542a\0\u5463\0\u549c"+
    "\0\u54d5\0\u550e\0\u5547\0\u5580\0\u55b9\0\u55f2\0\u562b\0\u5664"+
    "\0\u569d\0\u56d6\0\u570f\0\u5748\0\u5781\0\u57ba\0\u57f3\0\u582c"+
    "\0\u5865\0\u4293\0\u589e\0\u58d7\0\u5910\0\u5949\0\u5982\0\u59bb"+
    "\0\u59f4\0\u5a2d\0\u5a66\0\u5a9f\0\u5ad8\0\u5b11\0\u5b4a\0\u5b83"+
    "\0\u5bbc\0\u5bf5\0\u5c2e\0\u5c67\0\u5ca0\0\u5cd9\0\u5d12\0\u5d4b"+
    "\0\u5d84\0\u5dbd\0\u5df6\0\u5e2f\0\u5e68\0\u5ea1\0\u5eda\0\u5f13"+
    "\0\u5f4c\0\u5f85\0\u5fbe\0\u5ff7\0\u6030\0\u453f\0\u6069\0\71"+
    "\0\u60a2\0\u60db\0\u6114\0\u24bd\0\u614d\0\u6186\0\u61bf\0\u61f8"+
    "\0\u6231\0\u626a\0\u62a3\0\u62dc\0\u6315\0\u634e\0\u6387\0\u63c0"+
    "\0\u63f9\0\u6432\0\u646b\0\u64a4\0\u64dd\0\u6516\0\u654f\0\u6588"+
    "\0\u65c1\0\u65fa\0\u6633\0\u666c\0\u66a5\0\u66de\0\u6717\0\u6750"+
    "\0\u6789\0\u67c2\0\u67fb\0\u6834\0\u686d\0\u68a6\0\u68df\0\u6918"+
    "\0\u6951\0\u698a\0\u69c3\0\u69fc\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0"+
    "\0\u6b19\0\u6b52\0\u6b8b\0\u6bc4\0\u6bfd\0\u6c36\0\u6c6f\0\u6ca8"+
    "\0\u6ce1\0\u6d1a\0\u6d53\0\u6d8c\0\u3e58\0\u6dc5\0\u6dfe\0\u6e37"+
    "\0\u6e70\0\u6ea9\0\u6ee2\0\u6f1b\0\u6f54\0\u6f8d\0\u6fc6\0\u6fff"+
    "\0\u7038\0\u7071\0\u70aa\0\u70e3\0\u711c\0\u7155\0\u718e\0\u71c7"+
    "\0\u50d3\0\u7200\0\u7239\0\u7272\0\u72ab\0\u72e4\0\u731d\0\u7356"+
    "\0\u738f\0\u73c8\0\u7401\0\u743a\0\u7473\0\u2568\0\u74ac\0\u74e5"+
    "\0\u751e\0\u7557\0\u7590\0\u75c9\0\u7602\0\u763b\0\u7674\0\u76ad"+
    "\0\u76e6\0\u771f\0\u7758\0\u7791\0\u77ca\0\u7803\0\u783c\0\u7875"+
    "\0\u78ae\0\u78e7\0\u7920\0\u7959\0\u7992\0\u79cb\0\u7a04\0\u7a3d"+
    "\0\u7a76\0\u7aaf\0\u7ae8\0\u7b21\0\u7b5a\0\u7b93\0\u7bcc\0\u7c05"+
    "\0\u7c3e\0\u7c77\0\u7cb0\0\u7ce9\0\u7d22\0\u7d5b\0\u7d94\0\u7dcd"+
    "\0\u76ad\0\u7e06\0\u7e3f\0\u328b\0\u2931\0\u7e78\0\u7eb1\0\u7eea"+
    "\0\u7f23\0\u7f5c\0\u7f95\0\u7fce\0\u8007\0\u8040\0\u18b7\0\u8079"+
    "\0\u80b2\0\u80eb\0\u8124\0\u815d\0\u8196\0\71\0\u81cf\0\u8208"+
    "\0\u8241\0\u827a\0\u82b3\0\u82ec\0\u8325\0\u835e\0\u8397\0\u83d0"+
    "\0\u8409\0\u8442\0\u847b\0\u84b4\0\u84ed\0\u8526\0\u855f\0\u8598"+
    "\0\u85d1\0\u860a\0\u8643\0\u867c\0\u86b5\0\u86ee\0\u8727\0\u8760"+
    "\0\u8799\0\u87d2\0\u880b\0\u8844\0\u887d\0\u88b6\0\u88ef\0\u8928"+
    "\0\u8961\0\u899a\0\u89d3\0\u8a0c\0\u8a45\0\u8a7e\0\u8ab7\0\u8af0"+
    "\0\u8b29\0\u8b62\0\u8b9b\0\u8bd4\0\u8c0d\0\u8c46\0\u835e\0\u8c7f"+
    "\0\u8cb8\0\u8cf1\0\u8d2a\0\u8d63\0\u8d9c\0\u8dd5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[678];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\3\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\3\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\2\64\1\65\72\0\3\3\3\0"+
    "\32\3\25\0\2\3\4\0\1\4\51\0\1\66\10\0"+
    "\2\4\5\0\3\5\63\0\3\3\3\0\1\3\1\67"+
    "\1\70\1\71\1\3\1\72\1\73\1\3\1\74\1\75"+
    "\1\76\4\3\1\77\5\3\1\100\4\3\25\0\2\3"+
    "\2\0\3\3\3\0\1\101\3\3\1\102\1\103\4\3"+
    "\1\104\1\3\1\105\1\106\1\3\1\107\12\3\25\0"+
    "\2\3\2\0\3\3\3\0\1\110\3\3\1\111\7\3"+
    "\1\112\1\113\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\114\3\3\1\115\1\116\2\3\1\117\2\3\1\120"+
    "\1\121\1\122\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\123\2\3\1\124\1\125\1\3\1\126\17\3"+
    "\1\127\1\3\25\0\2\3\2\0\3\3\3\0\1\130"+
    "\3\3\1\131\5\3\1\132\1\3\1\133\1\134\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\135\3\3\1\136"+
    "\4\3\1\137\1\140\1\3\1\141\15\3\25\0\2\3"+
    "\2\0\3\3\3\0\4\3\1\142\25\3\25\0\2\3"+
    "\2\0\1\3\1\143\1\3\3\0\1\144\2\3\1\145"+
    "\1\146\2\3\1\147\1\3\1\150\1\151\1\152\1\153"+
    "\1\154\3\3\1\155\2\3\1\156\5\3\25\0\2\3"+
    "\2\0\3\3\3\0\1\157\1\3\1\160\2\3\1\161"+
    "\4\3\1\162\1\163\1\164\15\3\25\0\2\3\2\0"+
    "\3\3\3\0\6\3\1\165\1\3\1\166\10\3\1\167"+
    "\10\3\25\0\2\3\2\0\3\3\3\0\1\170\13\3"+
    "\1\171\15\3\25\0\2\3\2\0\3\3\3\0\5\3"+
    "\1\172\1\173\2\3\1\174\1\175\6\3\1\176\3\3"+
    "\1\177\1\3\1\200\2\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\3\1\201\4\3\1\202\1\3\1\203\13\3"+
    "\1\204\2\3\1\71\2\3\25\0\2\3\2\0\3\3"+
    "\3\0\14\3\1\205\15\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\206\3\3\1\207\1\210\1\3\1\71\2\3"+
    "\1\211\1\3\1\212\1\213\14\3\25\0\2\3\2\0"+
    "\3\3\3\0\4\3\1\214\10\3\1\215\14\3\25\0"+
    "\2\3\2\0\3\3\3\0\1\216\1\3\1\217\1\3"+
    "\1\220\1\221\4\3\1\222\1\3\1\223\1\224\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\2\3\1\225\1\3"+
    "\1\226\1\227\6\3\1\230\15\3\25\0\2\3\2\0"+
    "\3\3\3\0\1\231\4\3\1\232\5\3\1\233\1\234"+
    "\1\212\14\3\25\0\2\3\2\0\3\3\3\0\1\235"+
    "\3\3\1\236\7\3\1\237\1\240\14\3\25\0\2\3"+
    "\2\0\3\3\3\0\1\241\14\3\1\242\14\3\25\0"+
    "\2\3\2\0\3\3\3\0\1\243\1\3\1\244\1\3"+
    "\1\245\1\246\4\3\1\247\1\3\1\250\1\251\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\14\3\1\252\15\3"+
    "\25\0\2\3\42\0\1\253\71\0\1\254\72\0\1\255"+
    "\66\0\1\256\70\0\1\257\70\0\1\260\100\0\1\261"+
    "\71\0\1\262\20\0\1\263\62\0\2\263\60\0\1\264"+
    "\52\0\1\265\17\0\1\266\72\0\1\267\72\0\1\270"+
    "\3\0\4\65\1\271\1\272\62\65\1\273\3\0\1\66"+
    "\7\0\1\274\52\0\2\66\2\0\3\3\3\0\2\71"+
    "\30\3\25\0\2\3\2\0\3\3\3\0\2\3\1\275"+
    "\1\276\26\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\71\25\3\25\0\2\3\2\0\3\3\3\0\1\3"+
    "\1\71\5\3\1\71\22\3\25\0\2\3\2\0\3\3"+
    "\3\0\10\3\1\277\1\71\20\3\25\0\2\3\2\0"+
    "\3\3\3\0\3\3\1\300\26\3\25\0\2\3\2\0"+
    "\3\3\3\0\3\3\1\301\26\3\25\0\2\3\2\0"+
    "\3\3\3\0\10\3\1\302\21\3\25\0\2\3\2\0"+
    "\3\3\3\0\22\3\1\71\7\3\25\0\2\3\2\0"+
    "\3\3\3\0\3\3\1\303\3\3\1\71\22\3\25\0"+
    "\2\3\2\0\3\3\3\0\1\304\1\3\1\305\3\3"+
    "\1\214\1\3\1\306\1\307\15\3\1\310\2\3\25\0"+
    "\2\3\2\0\3\3\3\0\14\3\1\311\15\3\25\0"+
    "\2\3\2\0\3\3\3\0\24\3\1\311\5\3\25\0"+
    "\2\3\2\0\3\3\3\0\12\3\1\312\11\3\1\313"+
    "\5\3\25\0\2\3\2\0\3\3\3\0\1\314\7\3"+
    "\1\315\21\3\25\0\2\3\2\0\3\3\3\0\11\3"+
    "\1\316\20\3\25\0\2\3\2\0\3\3\3\0\10\3"+
    "\1\226\21\3\25\0\2\3\2\0\3\3\3\0\1\317"+
    "\5\3\1\320\16\3\1\321\1\3\1\226\2\3\25\0"+
    "\2\3\2\0\3\3\3\0\1\322\10\3\1\323\11\3"+
    "\1\276\6\3\25\0\2\3\2\0\3\3\3\0\6\3"+
    "\1\324\11\3\1\72\11\3\25\0\2\3\2\0\3\3"+
    "\3\0\17\3\1\325\12\3\25\0\2\3\2\0\3\3"+
    "\3\0\24\3\1\326\3\3\1\327\1\3\25\0\2\3"+
    "\2\0\3\3\3\0\1\330\6\3\1\331\2\3\1\332"+
    "\2\3\1\333\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\334\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\335\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\21\3\1\71\10\3\25\0\2\3\2\0\3\3\3\0"+
    "\24\3\1\336\5\3\25\0\2\3\2\0\3\3\3\0"+
    "\10\3\1\72\21\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\337\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\3\1\340\30\3\25\0\2\3\2\0\3\3\3\0"+
    "\11\3\1\341\20\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\342\1\343\4\3\1\344\3\3\1\345\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\15\3\1\346\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\347\1\3\1\350"+
    "\1\351\4\3\1\352\1\353\7\3\1\354\3\3\1\355"+
    "\1\3\1\356\2\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\72\27\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\357\20\3\1\360\6\3\25\0\2\3\2\0"+
    "\3\3\3\0\22\3\1\361\7\3\25\0\2\3\2\0"+
    "\3\3\3\0\3\3\1\362\20\3\1\363\5\3\25\0"+
    "\2\3\2\0\3\3\3\0\30\3\1\226\1\3\25\0"+
    "\2\3\2\0\3\3\3\0\13\3\1\142\16\3\25\0"+
    "\2\3\2\0\3\3\3\0\2\3\1\364\21\3\1\365"+
    "\5\3\25\0\2\3\2\0\3\3\3\0\3\3\1\71"+
    "\2\3\1\366\2\3\1\367\20\3\25\0\2\3\2\0"+
    "\3\3\3\0\1\370\31\3\25\0\2\3\2\0\3\3"+
    "\3\0\2\3\1\371\27\3\25\0\2\3\2\0\3\3"+
    "\3\0\25\3\1\72\4\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\372\31\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\373\1\374\4\3\1\375\1\376\12\3\1\377"+
    "\5\3\25\0\2\3\2\0\3\3\3\0\10\3\1\u0100"+
    "\21\3\25\0\2\3\2\0\3\3\3\0\5\3\1\u0101"+
    "\5\3\1\u0102\16\3\25\0\2\3\2\0\3\3\3\0"+
    "\17\3\1\u0103\4\3\1\71\5\3\25\0\2\3\2\0"+
    "\3\3\3\0\12\3\1\u0104\17\3\25\0\2\3\2\0"+
    "\3\3\3\0\24\3\1\72\5\3\25\0\2\3\2\0"+
    "\3\3\3\0\16\3\1\72\13\3\25\0\2\3\2\0"+
    "\3\3\3\0\1\u0105\31\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\u0106\31\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u0107\4\3\1\u0108\21\3\25\0\2\3\2\0"+
    "\3\3\3\0\12\3\1\u0109\1\3\1\123\15\3\25\0"+
    "\2\3\2\0\3\3\3\0\4\3\1\u010a\7\3\1\u010b"+
    "\15\3\25\0\2\3\2\0\3\3\3\0\5\3\1\u010c"+
    "\24\3\25\0\2\3\2\0\3\3\3\0\1\u010d\3\3"+
    "\1\u010e\25\3\25\0\2\3\2\0\3\3\3\0\1\u010f"+
    "\1\3\1\u0110\2\3\1\u0111\1\u0112\3\3\1\u0113\11\3"+
    "\1\u0114\5\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\u0115\2\3\1\u0116\1\u0117\10\3\25\0\2\3\2\0"+
    "\3\3\3\0\1\u0118\3\3\1\u0119\10\3\1\u011a\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\3\1\u011b\17\3"+
    "\1\276\10\3\25\0\2\3\2\0\3\3\3\0\25\3"+
    "\1\u011c\4\3\25\0\2\3\2\0\3\3\3\0\2\3"+
    "\1\u011d\7\3\1\370\17\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\3\1\276\30\3\25\0\2\3\2\0\3\3"+
    "\3\0\2\3\1\214\27\3\25\0\2\3\2\0\3\3"+
    "\3\0\3\3\1\u011e\26\3\25\0\2\3\2\0\3\3"+
    "\3\0\3\3\1\u011f\26\3\25\0\2\3\2\0\3\3"+
    "\3\0\3\3\1\300\1\u0120\25\3\25\0\2\3\2\0"+
    "\3\3\3\0\4\3\1\u0121\25\3\25\0\2\3\2\0"+
    "\3\3\3\0\27\3\1\u0122\2\3\25\0\2\3\2\0"+
    "\3\3\3\0\4\3\1\u0123\25\3\25\0\2\3\2\0"+
    "\3\3\3\0\1\3\1\u0124\1\3\1\u0125\2\3\1\276"+
    "\1\3\1\u0126\1\u0127\3\3\1\u0128\3\3\1\u0129\10\3"+
    "\25\0\2\3\2\0\3\3\3\0\14\3\1\u012a\15\3"+
    "\25\0\2\3\2\0\3\3\3\0\24\3\1\u012b\5\3"+
    "\25\0\2\3\2\0\3\3\3\0\6\3\1\72\23\3"+
    "\25\0\2\3\2\0\3\3\3\0\11\3\1\u012c\20\3"+
    "\25\0\2\3\2\0\3\3\3\0\3\3\1\u012d\16\3"+
    "\1\252\7\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u012e\7\3\1\u012f\15\3\25\0\2\3\2\0\3\3"+
    "\3\0\2\3\1\u0130\27\3\25\0\2\3\2\0\3\3"+
    "\3\0\3\3\1\u0131\26\3\25\0\2\3\2\0\3\3"+
    "\3\0\3\3\1\u0132\26\3\25\0\2\3\2\0\3\3"+
    "\3\0\7\3\1\71\22\3\25\0\2\3\2\0\3\3"+
    "\3\0\2\3\1\u0133\27\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\3\1\71\3\3\1\u0134\2\3\1\u0135\21\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\335\31\3\25\0"+
    "\2\3\2\0\3\3\3\0\5\3\1\u0136\24\3\25\0"+
    "\2\3\2\0\3\3\3\0\4\3\1\u0137\7\3\1\u0138"+
    "\1\u0139\14\3\25\0\2\3\2\0\3\3\3\0\17\3"+
    "\1\u013a\12\3\25\0\2\3\2\0\3\3\3\0\10\3"+
    "\1\u013b\21\3\25\0\2\3\2\0\3\3\3\0\25\3"+
    "\1\u013c\4\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\u013d\15\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\1\71\26\3\25\0\2\3\2\0\3\3\3\0\1\u0113"+
    "\13\3\1\u013e\15\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u013f\26\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u0140\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u0141\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u0142\10\3\1\132\14\3\25\0\2\3\2\0"+
    "\3\3\3\0\5\3\1\u0130\24\3\25\0\2\3\2\0"+
    "\3\3\3\0\3\3\1\u0143\24\3\1\71\1\3\25\0"+
    "\2\3\2\0\3\3\3\0\5\3\1\u0118\24\3\25\0"+
    "\2\3\2\0\3\3\3\0\1\3\1\u0144\4\3\1\212"+
    "\23\3\25\0\2\3\2\0\3\3\3\0\6\3\1\u0145"+
    "\23\3\25\0\2\3\2\0\3\3\3\0\2\3\1\u0146"+
    "\2\3\1\u0147\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u0148\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\123\27\3\25\0\2\3\2\0\3\3\3\0"+
    "\14\3\1\u0149\15\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u0143\26\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u014a\7\3\1\u014b\15\3\25\0\2\3\2\0"+
    "\3\3\3\0\2\3\1\u0133\3\3\1\u014c\23\3\25\0"+
    "\2\3\2\0\3\3\3\0\5\3\1\u014d\4\3\1\u014e"+
    "\17\3\25\0\2\3\2\0\3\3\3\0\2\3\1\u014f"+
    "\2\3\1\110\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\335\14\3\25\0\2\3\1\0\4\253\1\u0150"+
    "\1\u0151\63\253\44\u0152\1\u0153\24\u0152\3\0\1\u0154\62\0"+
    "\2\u0154\71\0\1\u0155\4\0\1\271\63\0\1\u0155\43\0"+
    "\1\u0156\26\0\3\3\3\0\14\3\1\u0157\15\3\25\0"+
    "\2\3\2\0\3\3\3\0\4\3\1\370\25\3\25\0"+
    "\2\3\2\0\3\3\3\0\4\3\1\u0158\25\3\25\0"+
    "\2\3\2\0\3\3\3\0\15\3\1\u0159\14\3\25\0"+
    "\2\3\2\0\3\3\3\0\13\3\1\u015a\16\3\25\0"+
    "\2\3\2\0\3\3\3\0\14\3\1\u015b\15\3\25\0"+
    "\2\3\2\0\3\3\3\0\1\u015c\3\3\1\71\25\3"+
    "\25\0\2\3\2\0\3\3\3\0\2\3\1\u015d\27\3"+
    "\25\0\2\3\2\0\3\3\3\0\4\3\1\u015e\25\3"+
    "\25\0\2\3\2\0\3\3\3\0\11\3\1\u015f\20\3"+
    "\25\0\2\3\2\0\3\3\3\0\2\3\1\u0160\12\3"+
    "\1\u0161\14\3\25\0\2\3\2\0\3\3\3\0\1\u0162"+
    "\31\3\25\0\2\3\2\0\3\3\3\0\17\3\1\132"+
    "\12\3\25\0\2\3\2\0\3\3\3\0\1\252\31\3"+
    "\25\0\2\3\2\0\3\3\3\0\22\3\1\u0163\7\3"+
    "\25\0\2\3\2\0\3\3\3\0\3\3\1\u0164\5\3"+
    "\1\u0165\6\3\1\71\11\3\25\0\2\3\2\0\3\3"+
    "\3\0\11\3\1\71\20\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\3\1\u011c\30\3\25\0\2\3\2\0\3\3"+
    "\3\0\22\3\1\u0166\7\3\25\0\2\3\2\0\3\3"+
    "\3\0\4\3\1\u0133\25\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\3\1\71\30\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\u0133\31\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u0167\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\u0168\27\3\25\0\2\3\2\0\3\3\3\0"+
    "\21\3\1\u0169\10\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u016a\26\3\25\0\2\3\2\0\3\3\3\0"+
    "\6\3\1\u016b\6\3\1\u016c\14\3\25\0\2\3\2\0"+
    "\3\3\3\0\26\3\1\u016d\3\3\25\0\2\3\2\0"+
    "\3\3\3\0\4\3\1\71\1\3\1\u0157\23\3\25\0"+
    "\2\3\2\0\3\3\3\0\22\3\1\u016e\1\3\1\71"+
    "\5\3\25\0\2\3\2\0\1\3\1\u016f\1\3\3\0"+
    "\32\3\25\0\2\3\2\0\3\3\3\0\6\3\1\71"+
    "\23\3\25\0\2\3\2\0\3\3\3\0\4\3\1\u0170"+
    "\25\3\25\0\2\3\2\0\3\3\3\0\2\3\1\u0171"+
    "\27\3\25\0\2\3\2\0\3\3\3\0\32\3\1\u0172"+
    "\24\0\2\3\2\0\3\3\3\0\1\u0173\31\3\25\0"+
    "\2\3\2\0\3\3\3\0\4\3\1\u0174\1\u0175\24\3"+
    "\25\0\2\3\2\0\3\3\3\0\11\3\1\u0145\20\3"+
    "\25\0\2\3\2\0\3\3\3\0\4\3\1\u0176\25\3"+
    "\25\0\2\3\2\0\3\3\3\0\3\3\1\71\4\3"+
    "\1\u0177\21\3\25\0\2\3\2\0\3\3\3\0\10\3"+
    "\1\u0178\21\3\25\0\2\3\2\0\3\3\3\0\1\3"+
    "\1\u0179\1\71\27\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\u017a\31\3\25\0\2\3\2\0\3\3\3\0\12\3"+
    "\1\u017b\17\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\1\u017c\26\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\u017d\15\3\25\0\2\3\2\0\3\3\3\0\2\3"+
    "\1\u017e\27\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u017f\7\3\1\u0180\15\3\25\0\2\3\2\0\3\3"+
    "\3\0\4\3\1\u0181\25\3\25\0\2\3\2\0\3\3"+
    "\3\0\2\3\1\u0182\27\3\25\0\2\3\2\0\3\3"+
    "\3\0\10\3\1\71\1\u0183\10\3\1\u0184\7\3\25\0"+
    "\2\3\2\0\3\3\3\0\13\3\1\226\16\3\25\0"+
    "\2\3\2\0\3\3\3\0\12\3\1\u0185\2\3\1\u0186"+
    "\14\3\25\0\2\3\2\0\3\3\3\0\4\3\1\u0187"+
    "\25\3\25\0\2\3\2\0\3\3\3\0\2\3\1\u0188"+
    "\27\3\25\0\2\3\2\0\3\3\3\0\4\3\1\u0189"+
    "\25\3\25\0\2\3\2\0\3\3\3\0\4\3\1\71"+
    "\4\3\1\u018a\20\3\25\0\2\3\2\0\3\3\3\0"+
    "\13\3\1\u018b\16\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\71\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u018c\3\3\1\u018d\1\u018e\11\3\1\u018f\6\3"+
    "\25\0\2\3\2\0\3\3\3\0\3\3\1\u0190\26\3"+
    "\25\0\2\3\2\0\3\3\3\0\4\3\1\u0191\25\3"+
    "\25\0\2\3\2\0\3\3\3\0\12\3\1\u0192\17\3"+
    "\25\0\2\3\2\0\3\3\3\0\10\3\1\u0193\21\3"+
    "\25\0\2\3\2\0\3\3\3\0\3\3\1\300\6\3"+
    "\1\u0194\1\3\1\u014e\15\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\u0195\31\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u0196\26\3\25\0\2\3\2\0\3\3\3\0"+
    "\14\3\1\215\15\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u0197\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\10\3\1\u0198\21\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u0199\26\3\25\0\2\3\2\0\3\3\3\0"+
    "\11\3\1\72\20\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\u019a\27\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\u019b\31\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\2\71\4\3\1\u019c\20\3\25\0\2\3\2\0\3\3"+
    "\3\0\10\3\1\u019d\21\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\u015e\31\3\25\0\2\3\2\0\3\3\3\0"+
    "\10\3\1\u0187\21\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\u019e\2\3\1\u019f\21\3\25\0\2\3\2\0"+
    "\3\3\3\0\5\3\1\u01a0\24\3\25\0\2\3\2\0"+
    "\3\3\3\0\11\3\1\u01a1\20\3\25\0\2\3\2\0"+
    "\3\3\3\0\2\3\1\u01a2\27\3\25\0\2\3\2\0"+
    "\3\3\3\0\2\3\1\u01a3\7\3\1\u01a4\17\3\25\0"+
    "\2\3\2\0\3\3\3\0\5\3\1\u01a5\24\3\25\0"+
    "\2\3\2\0\3\3\3\0\3\3\1\u01a6\2\3\1\u01a7"+
    "\1\3\1\u01a8\14\3\1\u01a9\4\3\25\0\2\3\2\0"+
    "\3\3\3\0\6\3\1\226\23\3\25\0\2\3\2\0"+
    "\3\3\3\0\21\3\1\u01aa\2\3\1\u01ab\5\3\25\0"+
    "\2\3\2\0\1\3\1\u01ac\1\3\3\0\14\3\1\335"+
    "\15\3\25\0\2\3\2\0\3\3\3\0\6\3\1\u01ad"+
    "\23\3\25\0\2\3\2\0\3\3\3\0\15\3\1\224"+
    "\14\3\25\0\2\3\2\0\3\3\3\0\22\3\1\72"+
    "\7\3\25\0\2\3\2\0\3\3\3\0\6\3\1\100"+
    "\23\3\25\0\2\3\2\0\3\3\3\0\1\u0141\31\3"+
    "\25\0\2\3\2\0\3\3\3\0\15\3\1\u011a\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\3\1\u01ae\30\3"+
    "\25\0\2\3\2\0\3\3\3\0\4\3\1\u01af\25\3"+
    "\25\0\2\3\2\0\3\3\3\0\4\3\1\370\14\3"+
    "\1\u0129\10\3\25\0\2\3\2\0\3\3\3\0\6\3"+
    "\1\u01b0\23\3\25\0\2\3\2\0\3\3\3\0\5\3"+
    "\1\u01b1\24\3\25\0\2\3\2\0\3\3\3\0\10\3"+
    "\1\u01b2\21\3\25\0\2\3\2\0\3\3\3\0\6\3"+
    "\1\u01b3\23\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u01b4\10\3\1\u01b5\14\3\25\0\2\3\2\0\3\3"+
    "\3\0\4\3\1\u01b6\7\3\1\71\15\3\25\0\2\3"+
    "\2\0\3\3\3\0\4\3\1\u01b7\25\3\25\0\2\3"+
    "\2\0\3\3\3\0\2\3\1\u01b8\27\3\25\0\2\3"+
    "\2\0\3\3\3\0\3\3\1\u01b9\26\3\25\0\2\3"+
    "\2\0\3\3\3\0\12\3\1\226\17\3\25\0\2\3"+
    "\2\0\3\3\3\0\2\3\1\u01ba\27\3\25\0\2\3"+
    "\2\0\3\3\3\0\4\3\1\u01bb\25\3\25\0\2\3"+
    "\2\0\3\3\3\0\20\3\1\u013e\11\3\25\0\2\3"+
    "\2\0\3\3\3\0\23\3\1\u01bc\6\3\25\0\2\3"+
    "\2\0\3\3\3\0\1\u0130\31\3\25\0\2\3\2\0"+
    "\3\3\3\0\23\3\1\123\6\3\25\0\2\3\2\0"+
    "\3\3\3\0\20\3\1\71\11\3\25\0\2\3\2\0"+
    "\3\3\3\0\13\3\1\71\16\3\25\0\2\3\2\0"+
    "\3\3\3\0\26\3\1\u01bd\3\3\25\0\2\3\2\0"+
    "\3\3\3\0\2\3\1\71\27\3\25\0\2\3\2\0"+
    "\3\3\3\0\3\3\1\u01be\26\3\25\0\2\3\2\0"+
    "\3\3\3\0\11\3\1\323\20\3\25\0\2\3\2\0"+
    "\3\3\3\0\11\3\1\u01bf\20\3\25\0\2\3\2\0"+
    "\3\3\3\0\10\3\1\u01c0\1\u01c1\7\3\1\u0160\10\3"+
    "\25\0\2\3\2\0\3\3\3\0\11\3\1\u01c2\20\3"+
    "\25\0\2\3\2\0\3\3\3\0\6\3\1\226\5\3"+
    "\1\370\7\3\1\u01c3\1\u01c4\4\3\25\0\2\3\2\0"+
    "\3\3\3\0\2\3\1\u01c5\27\3\25\0\2\3\2\0"+
    "\3\3\3\0\15\3\1\75\14\3\25\0\2\3\2\0"+
    "\3\3\3\0\14\3\1\226\15\3\25\0\2\3\2\0"+
    "\3\3\3\0\17\3\1\323\12\3\25\0\2\3\2\0"+
    "\3\3\3\0\12\3\1\311\17\3\25\0\2\3\2\0"+
    "\3\3\3\0\14\3\1\71\15\3\25\0\2\3\2\0"+
    "\3\3\3\0\3\3\1\u01c6\26\3\25\0\2\3\2\0"+
    "\3\3\3\0\3\3\1\u01c7\26\3\25\0\2\3\2\0"+
    "\3\3\3\0\5\3\1\72\1\u01c8\23\3\25\0\2\3"+
    "\2\0\3\3\3\0\11\3\1\u0131\20\3\25\0\2\3"+
    "\2\0\3\3\3\0\12\3\1\132\17\3\25\0\2\3"+
    "\2\0\3\3\3\0\12\3\1\u015e\17\3\25\0\2\3"+
    "\2\0\3\3\3\0\12\3\1\u01c9\17\3\25\0\2\3"+
    "\2\0\3\3\3\0\7\3\1\u011c\1\3\1\137\20\3"+
    "\25\0\2\3\2\0\3\3\3\0\23\3\1\71\6\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\226\31\3\25\0"+
    "\2\3\2\0\3\3\3\0\4\3\1\u01ca\25\3\25\0"+
    "\2\3\2\0\3\3\3\0\24\3\1\71\5\3\25\0"+
    "\2\3\2\0\3\3\3\0\11\3\1\75\20\3\25\0"+
    "\2\3\2\0\3\3\3\0\3\3\1\u01cb\1\u01cc\25\3"+
    "\25\0\2\3\2\0\3\3\3\0\6\3\1\322\23\3"+
    "\25\0\2\3\2\0\3\3\3\0\2\3\1\u01cd\1\3"+
    "\1\71\25\3\25\0\2\3\5\0\1\u0150\64\0\44\u01ce"+
    "\1\u01cf\24\u01ce\44\0\1\u0153\1\u0150\26\0\1\u0154\55\0"+
    "\1\u01d0\4\0\2\u0154\4\0\1\u01d1\62\0\1\u01d1\3\0"+
    "\3\3\3\0\11\3\1\u010a\20\3\25\0\2\3\2\0"+
    "\3\3\3\0\5\3\1\75\24\3\25\0\2\3\2\0"+
    "\3\3\3\0\14\3\1\335\15\3\25\0\2\3\2\0"+
    "\3\3\3\0\14\3\1\u01d2\15\3\25\0\2\3\2\0"+
    "\3\3\3\0\2\3\1\u01aa\27\3\25\0\2\3\2\0"+
    "\3\3\3\0\17\3\1\u01d3\12\3\25\0\2\3\2\0"+
    "\3\3\3\0\2\3\1\u01d4\27\3\25\0\2\3\2\0"+
    "\3\3\3\0\3\3\1\72\26\3\25\0\2\3\2\0"+
    "\3\3\3\0\5\3\1\u01d5\24\3\25\0\2\3\2\0"+
    "\3\3\3\0\1\u01d6\31\3\25\0\2\3\2\0\3\3"+
    "\3\0\24\3\1\323\5\3\25\0\2\3\2\0\3\3"+
    "\3\0\12\3\1\u01d7\17\3\25\0\2\3\2\0\3\3"+
    "\3\0\6\3\1\u01d8\23\3\25\0\2\3\2\0\3\3"+
    "\3\0\5\3\1\u01d9\7\3\1\u01da\14\3\25\0\2\3"+
    "\2\0\3\3\3\0\14\3\1\u01db\15\3\25\0\2\3"+
    "\2\0\3\3\3\0\12\3\1\u01dc\17\3\25\0\2\3"+
    "\2\0\3\3\3\0\6\3\1\u013f\23\3\25\0\2\3"+
    "\2\0\3\3\3\0\4\3\1\u01dd\25\3\25\0\2\3"+
    "\2\0\3\3\3\0\14\3\1\u01de\15\3\25\0\2\3"+
    "\2\0\3\3\3\0\10\3\1\u01df\21\3\25\0\2\3"+
    "\2\0\3\3\3\0\10\3\1\u01e0\21\3\25\0\2\3"+
    "\2\0\3\3\3\0\2\3\1\u011c\27\3\25\0\2\3"+
    "\2\0\3\3\3\0\11\3\1\u01e1\20\3\25\0\2\3"+
    "\2\0\3\3\3\0\22\3\1\276\7\3\25\0\2\3"+
    "\2\0\3\3\3\0\12\3\1\323\17\3\25\0\2\3"+
    "\2\0\3\3\3\0\10\3\1\u01e2\5\3\1\u01e3\13\3"+
    "\25\0\2\3\2\0\3\3\3\0\25\3\1\u0133\4\3"+
    "\25\0\2\3\14\0\1\u01e4\56\0\3\3\3\0\21\3"+
    "\1\72\10\3\25\0\2\3\2\0\3\3\3\0\5\3"+
    "\1\u01e5\24\3\25\0\2\3\2\0\3\3\3\0\1\u0191"+
    "\31\3\25\0\2\3\2\0\3\3\3\0\21\3\1\u01e6"+
    "\10\3\25\0\2\3\2\0\3\3\3\0\3\3\1\u0187"+
    "\26\3\25\0\2\3\2\0\3\3\3\0\4\3\1\u018c"+
    "\25\3\25\0\2\3\2\0\3\3\3\0\3\3\1\u01e7"+
    "\26\3\25\0\2\3\2\0\3\3\3\0\3\3\1\u01e8"+
    "\26\3\25\0\2\3\2\0\3\3\3\0\5\3\1\335"+
    "\24\3\25\0\2\3\2\0\3\3\3\0\5\3\1\u01e9"+
    "\6\3\1\u01d6\15\3\25\0\2\3\2\0\3\3\3\0"+
    "\6\3\1\u01ea\23\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u01eb\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\226\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\20\3\1\72\11\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\u01ec\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\17\3\1\u01ed\12\3\25\0\2\3\2\0\3\3\3\0"+
    "\14\3\1\u01ee\15\3\25\0\2\3\2\0\3\3\3\0"+
    "\12\3\1\u01ef\17\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\323\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\14\3\1\u01e5\15\3\25\0\2\3\2\0\3\3\3\0"+
    "\10\3\1\71\21\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u01f0\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\u01c5\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\u01f1\27\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u01f2\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\u01f3\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u010a\26\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\71\13\3\1\u01f4\15\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\u01f5\31\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u01f6\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\11\3\1\226\20\3\25\0\2\3\2\0\3\3\3\0"+
    "\10\3\1\276\21\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u01f7\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u01f8\26\3\25\0\2\3\2\0\3\3\3\0"+
    "\6\3\1\u01f9\23\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u01fa\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\24\3\1\u01fb\5\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u01fc\26\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\3\1\u01ad\30\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\u01fd\27\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\u01fe\27\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\u01ff\31\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\1\u0200\26\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u0201\25\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\370\15\3\25\0\2\3\2\0\3\3\3\0\1\u0202"+
    "\25\3\1\u01bd\3\3\25\0\2\3\2\0\3\3\3\0"+
    "\20\3\1\u0203\11\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u0204\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\u0205\31\3\25\0\2\3\2\0\3\3\3\0\24\3"+
    "\1\335\5\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u0206\25\3\25\0\2\3\2\0\3\3\3\0\1\u0207"+
    "\14\3\1\u0208\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u0209\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u020a\26\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u017f\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\226\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\12\3\1\72\17\3\25\0\2\3\2\0\3\3\3\0"+
    "\14\3\1\u020b\15\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\u020c\27\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u020d\26\3\25\0\2\3\2\0\1\3\1\u020e"+
    "\1\3\3\0\1\3\1\u020f\3\3\1\u0210\22\3\1\u0211"+
    "\1\3\25\0\2\3\2\0\3\3\3\0\2\3\1\u0212"+
    "\27\3\25\0\2\3\2\0\3\3\3\0\4\3\1\u0177"+
    "\25\3\25\0\2\3\2\0\3\3\3\0\3\3\1\u0213"+
    "\26\3\25\0\2\3\2\0\3\3\3\0\30\3\1\71"+
    "\1\3\25\0\2\3\2\0\3\3\3\0\11\3\1\u0214"+
    "\20\3\25\0\2\3\2\0\3\3\3\0\5\3\1\u0215"+
    "\14\3\1\276\7\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\226\1\u0216\23\3\25\0\2\3\2\0\3\3"+
    "\3\0\12\3\1\u01f4\17\3\25\0\2\3\2\0\3\3"+
    "\3\0\15\3\1\u0217\14\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\u0218\31\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\3\1\u0219\30\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\120\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\2\3\1\u021a\27\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\323\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u0113\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u021b\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u021c\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u021d\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\u021e\31\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\u021f\14\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\316\14\3\25\0\2\3\2\0\3\3\3\0\27\3"+
    "\1\u019f\2\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u0179\25\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u0220\25\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u0221\25\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\1\u0222\26\3\25\0\2\3\2\0\3\3\3\0\5\3"+
    "\1\217\24\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\u0223\14\3\25\0\2\3\2\0\3\3\3\0\27\3"+
    "\1\u0224\2\3\25\0\2\3\1\0\44\u01ce\1\u01cf\1\u0150"+
    "\23\u01ce\3\0\1\u01d1\62\0\2\u01d1\2\0\3\3\3\0"+
    "\5\3\1\u0225\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\123\31\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\u0226\14\3\25\0\2\3\2\0\3\3\3\0\5\3"+
    "\1\72\24\3\25\0\2\3\2\0\3\3\3\0\2\3"+
    "\1\226\27\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\u01f6\15\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\u0227\14\3\25\0\2\3\2\0\3\3\3\0\6\3"+
    "\1\u0191\23\3\25\0\2\3\2\0\3\3\3\0\6\3"+
    "\1\u0228\23\3\25\0\2\3\2\0\3\3\3\0\1\u0118"+
    "\31\3\25\0\2\3\2\0\3\3\3\0\10\3\1\u0229"+
    "\21\3\25\0\2\3\2\0\3\3\3\0\5\3\1\u01c3"+
    "\24\3\25\0\2\3\2\0\3\3\3\0\15\3\1\154"+
    "\14\3\25\0\2\3\2\0\3\3\3\0\1\u014c\1\3"+
    "\1\u01a3\27\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\u022a\15\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\1\u022b\26\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\u022c\15\3\25\0\2\3\40\0\1\u022d\32\0\3\3"+
    "\3\0\6\3\1\323\23\3\25\0\2\3\2\0\3\3"+
    "\3\0\3\3\1\u022e\26\3\25\0\2\3\2\0\3\3"+
    "\3\0\4\3\1\136\25\3\25\0\2\3\2\0\3\3"+
    "\3\0\15\3\1\144\14\3\25\0\2\3\2\0\3\3"+
    "\3\0\15\3\1\u0191\14\3\25\0\2\3\2\0\3\3"+
    "\3\0\27\3\1\u022f\2\3\25\0\2\3\2\0\3\3"+
    "\3\0\11\3\1\u0230\20\3\25\0\2\3\2\0\3\3"+
    "\3\0\4\3\1\u0231\25\3\25\0\2\3\2\0\3\3"+
    "\3\0\1\u01f2\31\3\25\0\2\3\2\0\3\3\3\0"+
    "\12\3\1\u0113\17\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u0232\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\27\3\1\71\2\3\25\0\2\3\2\0\3\3\3\0"+
    "\12\3\1\u0109\17\3\25\0\2\3\2\0\3\3\3\0"+
    "\11\3\1\u0130\20\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\u019f\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\3\1\72\30\3\25\0\2\3\2\0\3\3\3\0"+
    "\5\3\1\u0233\24\3\25\0\2\3\2\0\3\3\3\0"+
    "\10\3\1\u0234\21\3\25\0\2\3\2\0\3\3\3\0"+
    "\14\3\1\u0235\15\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u0236\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\3\3\1\u0237\26\3\25\0\2\3\2\0\3\3\3\0"+
    "\24\3\1\u0238\5\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\71\31\3\25\0\2\3\2\0\3\3\3\0\5\3"+
    "\1\u011c\24\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\u0113\14\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\100\15\3\25\0\2\3\2\0\3\3\3\0\1\3"+
    "\1\u0239\30\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u023a\25\3\25\0\2\3\2\0\3\3\3\0\6\3"+
    "\1\u023b\23\3\25\0\2\3\2\0\3\3\3\0\11\3"+
    "\1\u023c\20\3\25\0\2\3\2\0\3\3\3\0\21\3"+
    "\1\u023d\10\3\25\0\2\3\2\0\3\3\3\0\10\3"+
    "\1\u0105\21\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\1\u023e\26\3\25\0\2\3\2\0\3\3\3\0\10\3"+
    "\1\u023f\21\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\u0240\14\3\25\0\2\3\2\0\3\3\3\0\6\3"+
    "\1\u01ac\23\3\25\0\2\3\2\0\3\3\3\0\11\3"+
    "\1\u01e6\20\3\25\0\2\3\2\0\3\3\3\0\5\3"+
    "\1\u0241\24\3\25\0\2\3\2\0\3\3\3\0\23\3"+
    "\1\335\6\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\u01f2\15\3\25\0\2\3\2\0\3\3\3\0\12\3"+
    "\1\u0242\17\3\25\0\2\3\2\0\3\3\3\0\1\u0243"+
    "\31\3\25\0\2\3\2\0\3\3\3\0\14\3\1\u0244"+
    "\15\3\25\0\2\3\2\0\3\3\3\0\24\3\1\u0133"+
    "\5\3\25\0\2\3\2\0\3\3\3\0\1\u0245\31\3"+
    "\25\0\2\3\2\0\3\3\3\0\15\3\1\u0246\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\u0247\31\3\25\0"+
    "\2\3\2\0\3\3\3\0\10\3\1\373\14\3\1\323"+
    "\4\3\25\0\2\3\2\0\3\3\3\0\10\3\1\u0248"+
    "\21\3\25\0\2\3\2\0\3\3\3\0\1\u0249\31\3"+
    "\25\0\2\3\2\0\3\3\3\0\5\3\1\300\24\3"+
    "\25\0\2\3\2\0\3\3\3\0\15\3\1\u010a\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\4\3\1\u024a\25\3"+
    "\25\0\2\3\2\0\3\3\3\0\5\3\1\144\24\3"+
    "\25\0\2\3\2\0\3\3\3\0\10\3\1\300\21\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\3\1\u024b\30\3"+
    "\25\0\2\3\2\0\3\3\3\0\5\3\1\214\24\3"+
    "\25\0\2\3\2\0\3\3\3\0\2\3\1\u024c\27\3"+
    "\25\0\2\3\2\0\3\3\3\0\25\3\1\276\4\3"+
    "\25\0\2\3\2\0\3\3\3\0\4\3\1\u024d\25\3"+
    "\25\0\2\3\2\0\3\3\3\0\22\3\1\335\7\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\u024e\31\3\25\0"+
    "\2\3\2\0\3\3\3\0\15\3\1\u024f\14\3\25\0"+
    "\2\3\2\0\3\3\3\0\17\3\1\72\1\3\1\u0247"+
    "\10\3\25\0\2\3\2\0\3\3\3\0\17\3\1\u0250"+
    "\12\3\25\0\2\3\2\0\3\3\3\0\6\3\1\373"+
    "\23\3\25\0\2\3\2\0\3\3\3\0\1\u0251\31\3"+
    "\25\0\2\3\2\0\3\3\3\0\6\3\1\u0252\23\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\104\31\3\25\0"+
    "\2\3\2\0\3\3\3\0\6\3\1\u0253\23\3\25\0"+
    "\2\3\14\0\1\u0254\56\0\3\3\3\0\15\3\1\u0255"+
    "\14\3\25\0\2\3\2\0\3\3\3\0\1\75\31\3"+
    "\25\0\2\3\2\0\3\3\3\0\6\3\1\u0256\23\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\3\1\u0257\30\3"+
    "\25\0\2\3\2\0\3\3\3\0\6\3\1\u011c\23\3"+
    "\25\0\2\3\2\0\3\3\3\0\3\3\1\u0258\26\3"+
    "\25\0\2\3\2\0\3\3\3\0\6\3\1\u0259\23\3"+
    "\25\0\2\3\2\0\3\3\3\0\5\3\1\u025a\24\3"+
    "\25\0\2\3\2\0\3\3\3\0\15\3\1\u025b\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\26\3\1\u025c\3\3"+
    "\25\0\2\3\2\0\3\3\3\0\4\3\1\u025d\25\3"+
    "\25\0\2\3\2\0\3\3\3\0\5\3\1\u025e\24\3"+
    "\25\0\2\3\2\0\3\3\3\0\3\3\1\u025f\26\3"+
    "\25\0\2\3\2\0\3\3\3\0\3\3\1\u0260\26\3"+
    "\25\0\2\3\2\0\3\3\3\0\14\3\1\u01fd\15\3"+
    "\25\0\2\3\2\0\3\3\3\0\4\3\1\71\10\3"+
    "\1\u0159\14\3\25\0\2\3\2\0\3\3\3\0\21\3"+
    "\1\u0261\10\3\25\0\2\3\2\0\3\3\3\0\6\3"+
    "\1\u0262\23\3\25\0\2\3\2\0\3\3\3\0\1\u0263"+
    "\31\3\25\0\2\3\2\0\3\3\3\0\4\3\1\u021e"+
    "\25\3\25\0\2\3\2\0\3\3\3\0\3\3\1\u0264"+
    "\26\3\25\0\2\3\2\0\3\3\3\0\23\3\1\u0265"+
    "\6\3\25\0\2\3\2\0\3\3\3\0\21\3\1\u0187"+
    "\10\3\25\0\2\3\2\0\3\3\3\0\3\3\1\u0266"+
    "\26\3\25\0\2\3\2\0\3\3\3\0\3\3\1\u019f"+
    "\26\3\25\0\2\3\2\0\3\3\3\0\15\3\1\u017a"+
    "\14\3\25\0\2\3\2\0\3\3\3\0\2\3\1\u0267"+
    "\27\3\25\0\2\3\2\0\3\3\3\0\6\3\1\u0268"+
    "\23\3\25\0\2\3\2\0\3\3\3\0\12\3\1\u01d6"+
    "\17\3\25\0\2\3\2\0\3\3\3\0\4\3\1\u0269"+
    "\25\3\25\0\2\3\2\0\3\3\3\0\30\3\1\u026a"+
    "\1\3\25\0\2\3\2\0\3\3\3\0\11\3\1\u0247"+
    "\20\3\25\0\2\3\2\0\3\3\3\0\16\3\1\u0230"+
    "\13\3\25\0\2\3\2\0\3\3\3\0\12\3\1\u026b"+
    "\17\3\25\0\2\3\2\0\3\3\3\0\24\3\1\u026c"+
    "\5\3\25\0\2\3\2\0\3\3\3\0\25\3\1\u01a9"+
    "\4\3\25\0\2\3\2\0\3\3\3\0\4\3\1\u026d"+
    "\25\3\25\0\2\3\21\0\1\u026e\51\0\3\3\3\0"+
    "\22\3\1\u024b\7\3\25\0\2\3\2\0\3\3\3\0"+
    "\11\3\1\363\20\3\25\0\2\3\2\0\3\3\3\0"+
    "\11\3\1\u026f\20\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u0270\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\7\3\1\u0271\22\3\25\0\2\3\2\0\3\3\3\0"+
    "\11\3\1\u0272\20\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\322\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\26\3\1\u0273\3\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u0274\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\14\3\1\u0275\15\3\25\0\2\3\2\0\3\3\3\0"+
    "\10\3\1\u0276\21\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u0277\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\u0278\31\3\25\0\2\3\2\0\3\3\3\0\10\3"+
    "\1\u0279\21\3\25\0\2\3\2\0\3\3\3\0\7\3"+
    "\1\u027a\22\3\25\0\2\3\2\0\3\3\3\0\22\3"+
    "\1\212\7\3\25\0\2\3\2\0\3\3\3\0\22\3"+
    "\1\363\7\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\1\u0276\26\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\1\u025e\26\3\25\0\2\3\2\0\3\3\3\0\21\3"+
    "\1\132\10\3\25\0\2\3\2\0\3\3\3\0\26\3"+
    "\1\u027b\3\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\u0133\15\3\25\0\2\3\2\0\3\3\3\0\11\3"+
    "\1\u0187\20\3\25\0\2\3\2\0\3\3\3\0\1\u027c"+
    "\31\3\25\0\2\3\2\0\3\3\3\0\10\3\1\u027d"+
    "\7\3\1\u027e\11\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\3\1\u010a\1\3\1\u027f\6\3\1\u0192\17\3\25\0"+
    "\2\3\2\0\3\3\3\0\5\3\1\u0132\24\3\25\0"+
    "\2\3\2\0\3\3\3\0\6\3\1\317\23\3\25\0"+
    "\2\3\2\0\3\3\3\0\3\3\1\u0280\26\3\25\0"+
    "\2\3\2\0\3\3\3\0\6\3\1\u0281\23\3\25\0"+
    "\2\3\2\0\3\3\3\0\10\3\1\u0282\21\3\25\0"+
    "\2\3\2\0\3\3\3\0\4\3\1\226\25\3\25\0"+
    "\2\3\2\0\3\3\3\0\11\3\1\u026f\14\3\1\u0283"+
    "\3\3\25\0\2\3\2\0\3\3\3\0\13\3\1\u0284"+
    "\10\3\1\u0285\5\3\25\0\2\3\2\0\3\3\3\0"+
    "\12\3\1\u0286\17\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u0287\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\4\3\1\u0288\25\3\25\0\2\3\2\0\3\3\3\0"+
    "\15\3\1\u0289\14\3\25\0\2\3\2\0\3\3\3\0"+
    "\1\312\31\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\1\u0221\26\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\u028a\15\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\u028b\14\3\25\0\2\3\2\0\3\3\3\0\14\3"+
    "\1\u028c\15\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\u028d\14\3\25\0\2\3\2\0\3\3\3\0\1\3"+
    "\1\u01ab\30\3\25\0\2\3\2\0\3\3\3\0\24\3"+
    "\1\u028e\5\3\25\0\2\3\2\0\3\3\3\0\7\3"+
    "\1\u028f\22\3\25\0\2\3\2\0\3\3\3\0\24\3"+
    "\1\u0290\5\3\25\0\2\3\2\0\3\3\3\0\12\3"+
    "\1\u0291\17\3\25\0\2\3\2\0\3\3\3\0\6\3"+
    "\1\u0292\23\3\25\0\2\3\2\0\3\3\3\0\12\3"+
    "\1\370\17\3\25\0\2\3\2\0\3\3\3\0\6\3"+
    "\1\u01aa\23\3\25\0\2\3\2\0\3\3\3\0\15\3"+
    "\1\u0293\14\3\25\0\2\3\2\0\3\3\3\0\21\3"+
    "\1\u0294\10\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u0295\25\3\25\0\2\3\2\0\3\3\3\0\5\3"+
    "\1\u0105\24\3\25\0\2\3\2\0\3\3\3\0\10\3"+
    "\1\u01a9\21\3\25\0\2\3\2\0\3\3\3\0\2\3"+
    "\1\u0296\27\3\25\0\2\3\2\0\3\3\3\0\13\3"+
    "\1\u0297\16\3\25\0\2\3\2\0\3\3\3\0\10\3"+
    "\1\u01e2\21\3\25\0\2\3\2\0\3\3\3\0\1\u0298"+
    "\31\3\25\0\2\3\2\0\3\3\3\0\5\3\1\u0299"+
    "\24\3\25\0\2\3\2\0\3\3\3\0\5\3\1\u029a"+
    "\24\3\25\0\2\3\2\0\3\3\3\0\1\u029b\31\3"+
    "\25\0\2\3\2\0\3\3\3\0\15\3\1\u029c\14\3"+
    "\25\0\2\3\2\0\3\3\3\0\10\3\1\u029d\21\3"+
    "\25\0\2\3\2\0\3\3\3\0\3\3\1\u029e\26\3"+
    "\25\0\2\3\2\0\3\3\3\0\4\3\1\u029f\25\3"+
    "\25\0\2\3\2\0\3\3\3\0\7\3\1\u02a0\22\3"+
    "\25\0\2\3\2\0\3\3\3\0\1\3\1\u02a1\1\3"+
    "\1\u0280\26\3\25\0\2\3\2\0\3\3\3\0\4\3"+
    "\1\u02a2\25\3\25\0\2\3\2\0\3\3\3\0\3\3"+
    "\1\u02a3\26\3\25\0\2\3\2\0\3\3\3\0\1\u02a4"+
    "\31\3\25\0\2\3\2\0\3\3\3\0\15\3\1\u02a5"+
    "\14\3\25\0\2\3\2\0\3\3\3\0\2\3\1\u02a6"+
    "\27\3\25\0\2\3\2\0\3\3\3\0\10\3\1\u029f"+
    "\21\3\25\0\2\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36366];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\36\1\2\11\1\1\1\11\5\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\2\11\171\1\1\11"+
    "\1\0\5\11\1\1\1\11\1\0\3\11\3\1\1\0"+
    "\223\1\1\11\3\1\1\0\1\11\1\0\33\1\1\0"+
    "\133\1\2\0\1\11\23\1\1\0\110\1\1\0\46\1"+
    "\1\0\31\1\1\11\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[678];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    int line;
    int column;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MayorIgual;
          }
        case 43: break;
        case 20: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ParentesisAbierto;
          }
        case 44: break;
        case 37: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Corchetes;
          }
        case 45: break;
        case 36: 
          { line=yyline; column=yycolumn; lexeme=yytext(); return ERRORDecimal;
          }
        case 46: break;
        case 9: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Multiplicacion;
          }
        case 47: break;
        case 27: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ERRORString;
          }
        case 48: break;
        case 21: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return ParentesisCerrado;
          }
        case 49: break;
        case 31: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return MenorIgual;
          }
        case 50: break;
        case 10: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Division;
          }
        case 51: break;
        case 28: 
          { lexeme=yytext(); column=yycolumn; line=yyline; return Float;
          }
        case 52: break;
        case 2: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Identificador;
          }
        case 53: break;
        case 38: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Parentesis;
          }
        case 54: break;
        case 29: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Reservadas;
          }
        case 55: break;
        case 1: 
          { line=yyline; column=yycolumn; return ERROR;
          }
        case 56: break;
        case 24: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Arroba;
          }
        case 57: break;
        case 26: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Bit;
          }
        case 58: break;
        case 8: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Suma;
          }
        case 59: break;
        case 17: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Punto;
          }
        case 60: break;
        case 25: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Numeral;
          }
        case 61: break;
        case 6: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Resta;
          }
        case 62: break;
        case 13: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Mayor;
          }
        case 63: break;
        case 16: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return PuntoyComa;
          }
        case 64: break;
        case 33: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return NoIgual;
          }
        case 65: break;
        case 5: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Guionbajo;
          }
        case 66: break;
        case 22: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LlaveAbierta;
          }
        case 67: break;
        case 18: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CorcheteAbierto;
          }
        case 68: break;
        case 39: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Llaves;
          }
        case 69: break;
        case 41: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return String;
          }
        case 70: break;
        case 11: 
          { lexeme=yytext();line=yyline; column=yycolumn; return Porcentaje;
          }
        case 71: break;
        case 40: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return DobleNumeral;
          }
        case 72: break;
        case 15: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return y;
          }
        case 73: break;
        case 35: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return or;
          }
        case 74: break;
        case 30: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return IgualIgual;
          }
        case 75: break;
        case 23: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return LlaveCerrada;
          }
        case 76: break;
        case 19: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return CorcheteCerrado;
          }
        case 77: break;
        case 7: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Igual;
          }
        case 78: break;
        case 34: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return and;
          }
        case 79: break;
        case 14: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return SignoExclamacion;
          }
        case 80: break;
        case 3: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Numero;
          }
        case 81: break;
        case 42: 
          { line=yyline; column=yycolumn; return ERRORComentario;
          }
        case 82: break;
        case 4: 
          { /*Ignore*/
          }
        case 83: break;
        case 12: 
          { lexeme=yytext(); line=yyline; column=yycolumn; return Menor;
          }
        case 84: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
